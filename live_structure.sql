/*
SQLyog Ultimate v13.1.1 (64 bit)
MySQL - 10.7.3-MariaDB : Database - EASYBAZARDB2
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`EASYBAZARDB2` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `EASYBAZARDB2`;

/*Table structure for table `A` */

DROP TABLE IF EXISTS `A`;

CREATE TABLE `A` (
  `A` varchar(200) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_BANK_ACC` */

DROP TABLE IF EXISTS `ACC_BANK_ACC`;

CREATE TABLE `ACC_BANK_ACC` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `F_ACCOUNT_SOURCE_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_bank_acc` (`F_ACCOUNT_SOURCE_NO`,`NAME`),
  CONSTRAINT `fk_ACC_BANK_ACC_ACC_PAYMENT_SOURCE` FOREIGN KEY (`F_ACCOUNT_SOURCE_NO`) REFERENCES `ACC_PAYMENT_SOURCE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb4;

/*Table structure for table `ACC_BANK_LIST` */

DROP TABLE IF EXISTS `ACC_BANK_LIST`;

CREATE TABLE `ACC_BANK_LIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `BANK_NAME` varchar(40) DEFAULT NULL,
  `BANK_URL` varchar(40) DEFAULT NULL,
  `SERIAL_NO` int(5) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_BANK_RECONCILATION` */

DROP TABLE IF EXISTS `ACC_BANK_RECONCILATION`;

CREATE TABLE `ACC_BANK_RECONCILATION` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `TX_REF` varchar(200) DEFAULT NULL,
  `F_BANK_ACCOUNT_NO` int(11) DEFAULT NULL,
  `TX_AMOUNT` float DEFAULT 0,
  `TX_TYPE_IN_OUT` int(11) DEFAULT NULL,
  `NARRATION` varchar(200) DEFAULT NULL,
  `TX_BY_USER_NO` int(11) DEFAULT NULL,
  `ATTACHEMENT_PATH` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_BANK_RECONCILATION_ACC_PAYMENT_BANK_ACC` (`F_BANK_ACCOUNT_NO`),
  CONSTRAINT `fk_ACC_BANK_RECONCILATION_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_BANK_ACCOUNT_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_BANK_TXN` */

DROP TABLE IF EXISTS `ACC_BANK_TXN`;

CREATE TABLE `ACC_BANK_TXN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `TXN_REF` varchar(200) DEFAULT NULL,
  `TXN_TYPE_IN_OUT` int(11) DEFAULT NULL,
  `TXN_DATE` date DEFAULT NULL,
  `AMOUNT_ACTUAL` float DEFAULT 0,
  `IS_CUS_SELLER_BANK_RECONCILATION` int(11) DEFAULT NULL COMMENT '1=customer, 2=seller,3=bankstatement,4=EX/IX_transfer',
  `F_PAYMENT_ACC_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `F_MERCHANT_NO` int(4) DEFAULT NULL,
  `F_BANK_RECONCILATION_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_NO` int(11) DEFAULT NULL,
  `F_MERCHANT_PAYMENT_NO` int(10) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_COD` int(1) DEFAULT 0,
  `PAYMENT_TYPE` int(2) DEFAULT 1,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=2324 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_BANK_TXN_STATEMENT` */

DROP TABLE IF EXISTS `ACC_BANK_TXN_STATEMENT`;

CREATE TABLE `ACC_BANK_TXN_STATEMENT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_ACC_BANK_PAYMENT_NO` int(11) DEFAULT NULL,
  `TXN_DATE` date DEFAULT NULL,
  `TXN_REF` varchar(40) DEFAULT NULL,
  `NARRATION` varchar(200) DEFAULT NULL,
  `DR_AMOUNT` decimal(10,2) DEFAULT 0.00,
  `CR_AMOUNT` decimal(10,2) DEFAULT 0.00,
  `IS_MATCHED` int(11) DEFAULT NULL,
  `MATCHED_ON` datetime DEFAULT NULL,
  `F_ACC_BANK_TXN_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `USED_REASON` varchar(200) DEFAULT NULL,
  `IS_DRAFT` tinyint(1) DEFAULT 1,
  `IS_VARIFIED` tinyint(1) DEFAULT 0,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(3) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(3) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `MARK_AS_USED` tinyint(4) DEFAULT 0,
  `F_ACC_BANK_STMT_MASTER_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_BANK_TXN_STATEMENT_ACC_BANK_TXN` (`F_ACC_BANK_TXN_NO`),
  KEY `fk_ACC_BANK_TXN_STATEMENT_ACC_CUSTOMER_PAYMENT_METHOD` (`F_CUSTOMER_PAYMENT_METHOD_NO`),
  KEY `fk_ACC_BANK_TXN_STATEMENT_ACC_PAYMENT_BANK_ACC` (`F_ACC_BANK_PAYMENT_NO`),
  KEY `fk_ACC_BANK_TXN_STATEMENT_ACC_BANK_TXN_STATEMENT_MASTER` (`F_ACC_BANK_STMT_MASTER_NO`),
  FULLTEXT KEY `NARRATION` (`NARRATION`),
  FULLTEXT KEY `NARRATION_2` (`NARRATION`),
  CONSTRAINT `fk_ACC_BANK_TXN_STATEMENT_ACC_BANK_TXN` FOREIGN KEY (`F_ACC_BANK_TXN_NO`) REFERENCES `ACC_BANK_TXN` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_STATEMENT_ACC_BANK_TXN_STATEMENT_MASTER` FOREIGN KEY (`F_ACC_BANK_STMT_MASTER_NO`) REFERENCES `ACC_BANK_TXN_STATEMENT_MASTER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_STATEMENT_ACC_CUSTOMER_PAYMENT_METHOD` FOREIGN KEY (`F_CUSTOMER_PAYMENT_METHOD_NO`) REFERENCES `ACC_CUSTOMER_PAYMENT_METHOD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_STATEMENT_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_ACC_BANK_PAYMENT_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4527 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_BANK_TXN_STATEMENT_MASTER` */

DROP TABLE IF EXISTS `ACC_BANK_TXN_STATEMENT_MASTER`;

CREATE TABLE `ACC_BANK_TXN_STATEMENT_MASTER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `UPLOAD_DATE` datetime DEFAULT NULL,
  `UPLOAD_TXN_REF` varchar(40) DEFAULT NULL,
  `NARRATION` varchar(200) DEFAULT NULL,
  `DR_AMOUNT` float DEFAULT 0,
  `CR_AMOUNT` float DEFAULT 0,
  `IS_MATCHED` int(11) DEFAULT NULL,
  `F_PAYMENT_ACC_BANK_NO` int(11) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(3) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(3) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_bank_txn_statement_master` (`UPLOAD_TXN_REF`),
  UNIQUE KEY `u_acc_bank_txn_statement_master_c` (`CODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_COURIER_BILL` */

DROP TABLE IF EXISTS `ACC_COURIER_BILL`;

CREATE TABLE `ACC_COURIER_BILL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_COURIER_NO` int(11) DEFAULT NULL,
  `TRACKING_NO` varchar(20) DEFAULT NULL,
  `AMOUNT` float DEFAULT NULL,
  `PARCEL_DATE` datetime DEFAULT NULL,
  `BATCH_NO` int(11) DEFAULT NULL,
  `DATE_FROM` date DEFAULT NULL,
  `DATE_TO` date DEFAULT NULL,
  `IS_USED` int(11) DEFAULT NULL,
  `F_SC_DISPATCH_DETAILS_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_COURIER_BILL_SC_COURIER` (`F_COURIER_NO`),
  CONSTRAINT `fk_ACC_COURIER_BILL_SC_COURIER` FOREIGN KEY (`F_COURIER_NO`) REFERENCES `SC_COURIER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_CUSTOMER_PAYMENTS` */

DROP TABLE IF EXISTS `ACC_CUSTOMER_PAYMENTS`;

CREATE TABLE `ACC_CUSTOMER_PAYMENTS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `CUSTOMER_MOBILE_NO` varchar(40) DEFAULT NULL,
  `F_PAYMENT_CURRENCY_NO` int(11) DEFAULT NULL,
  `CURRENCY_NAME` varchar(10) DEFAULT NULL,
  `CONVERSION_RATE_TO_MR` float DEFAULT 0,
  `PAY_AMOUNT` float DEFAULT 0,
  `PAYMENT_REMAINING_MR` float DEFAULT 0,
  `IS_TRANSFERRED` int(11) DEFAULT 0,
  `TRANSFERRED_MR` float DEFAULT 0,
  `F_BANK_TXN_NO_TRANSFERAR` int(11) DEFAULT NULL,
  `F_PAYMENT_ACC_NO` int(11) DEFAULT NULL,
  `PAYMENT_BANK_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_ACCOUNT_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_BANK_ACC_NO` varchar(40) DEFAULT NULL,
  `PAYMENT_CONFIRMED_STATUS` int(11) DEFAULT NULL,
  `ATTACHMENT_PATH` varchar(200) DEFAULT NULL,
  `PAYMENT_NOTE` varchar(200) DEFAULT NULL,
  `REFUND_MR` float DEFAULT 0,
  `REFUND_MAPING` varchar(200) DEFAULT NULL,
  `PAID_BY` varchar(40) DEFAULT NULL,
  `SLIP_NUMBER` varchar(40) DEFAULT NULL,
  `PAYMENT_DATE` date DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `IS_COD` int(1) DEFAULT 0,
  `PAYMENT_TYPE` int(2) DEFAULT 1,
  `F_ACC_CUST_RES_REFUND_REQUEST_NO` int(10) DEFAULT NULL,
  `F_BOOKING_NO_FOR_PAYMENT_TYPE3` int(10) DEFAULT NULL,
  `PAYMENT_REMAINING` float DEFAULT 0,
  `TRANSFERRED` float DEFAULT 0,
  `REFUND` float DEFAULT 0,
  `CARD_ISSUER` varchar(150) DEFAULT NULL,
  `CARD_BRAND` varchar(100) DEFAULT NULL,
  `CARD_SUB_BRAND` varchar(100) DEFAULT NULL,
  `CURRENCY_RATE` float DEFAULT NULL,
  `STORE_AMOUNT` float DEFAULT NULL,
  `CARD_TYPE` varchar(100) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `PAYMENT_METHOD` varchar(50) DEFAULT NULL,
  `TRANSACTION_ID` varchar(150) DEFAULT NULL,
  `PAYMENT_GATEWAY_COST` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_CUSTOMER_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` (`F_CUSTOMER_PAYMENT_METHOD_NO`),
  KEY `fk_ACC_CUSTOMER_PAYMENTS_ACC_PAYMENT_BANK_ACC` (`F_PAYMENT_ACC_NO`),
  KEY `fk_ACC_CUSTOMER_PAYMENTS_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  KEY `fk_ACC_CUSTOMER_PAYMENTS_SS_CURRENCY` (`F_PAYMENT_CURRENCY_NO`),
  CONSTRAINT `fk_ACC_CUSTOMER_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` FOREIGN KEY (`F_CUSTOMER_PAYMENT_METHOD_NO`) REFERENCES `ACC_CUSTOMER_PAYMENT_METHOD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_CUSTOMER_PAYMENTS_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_PAYMENT_ACC_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_CUSTOMER_PAYMENTS_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_CUSTOMER_PAYMENTS_SS_CURRENCY` FOREIGN KEY (`F_PAYMENT_CURRENCY_NO`) REFERENCES `SS_CURRENCY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2390 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_CUSTOMER_PAYMENT_METHOD` */

DROP TABLE IF EXISTS `ACC_CUSTOMER_PAYMENT_METHOD`;

CREATE TABLE `ACC_CUSTOMER_PAYMENT_METHOD` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `METHOD_PREFIX` varchar(20) DEFAULT NULL,
  `METHOD_NAME` varchar(100) DEFAULT NULL,
  `METHOD_FEE` float DEFAULT NULL,
  `METHOD_FEE_PERCENTAGE` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_customer_payment_method` (`METHOD_PREFIX`),
  UNIQUE KEY `u_acc_customer_payment_method_mn` (`METHOD_NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_CUST_RES_REFUND_REQUEST` */

DROP TABLE IF EXISTS `ACC_CUST_RES_REFUND_REQUEST`;

CREATE TABLE `ACC_CUST_RES_REFUND_REQUEST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `MR_AMOUNT` float DEFAULT 0,
  `IS_CUSTOMER` int(1) DEFAULT 1,
  `REQUEST_NOTE` varchar(200) DEFAULT NULL,
  `REQUEST_BY` int(4) DEFAULT NULL,
  `REQUEST_BY_NAME` varchar(50) DEFAULT NULL,
  `REQUEST_DATE` date DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `STATUS` int(1) DEFAULT 0 COMMENT '0=request,1=accept,2=deny',
  `F_ACC_BANK_LIST_NO` int(4) DEFAULT NULL,
  `REQ_BANK_NAME` varchar(100) DEFAULT NULL,
  `REQ_BANK_ACC_NAME` varchar(100) DEFAULT NULL,
  `REQ_BANK_ACC_NO` varchar(100) DEFAULT NULL,
  `F_ACC_BANK_LIST_NO_REFUNDED` int(4) DEFAULT NULL,
  `REFUNDED_BANK_NAME` varchar(100) DEFAULT NULL,
  `REFUNDED_BANK_ACC_NAME` varchar(100) DEFAULT NULL,
  `REFUNDED_BANK_ACC_NO` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_CUST_RES_REFUND_REQUEST_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  KEY `fk_ACC_CUST_RES_REFUND_REQUEST_S` (`F_SELLER_NO`),
  CONSTRAINT `fk_ACC_CUST_RES_REFUND_REQUEST_S` FOREIGN KEY (`F_SELLER_NO`) REFERENCES `SLS_SELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_CUST_RES_REFUND_REQUEST_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_INSTALLMENT_RECORD` */

DROP TABLE IF EXISTS `ACC_INSTALLMENT_RECORD`;

CREATE TABLE `ACC_INSTALLMENT_RECORD` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CALCULATED_INSTALLMENT_AMOUNT` float NOT NULL,
  `PAID_INSTALLMENT_AMOUNT` float NOT NULL DEFAULT 0,
  `ORDER_GROUP_ID` int(11) NOT NULL,
  `F_ACC_CUSTOMER_PAYMENT_NO` int(11) NOT NULL,
  `F_ACC_SELLER_PAYMENT_NO` int(11) NOT NULL,
  `SS_CREATED_ON` datetime NOT NULL,
  `SS_MODIFIED_ON` datetime NOT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `IS_PAID` int(1) NOT NULL DEFAULT 0,
  `INSTALLMENT_COUNT` int(1) NOT NULL,
  `IS_EXPIRED` int(1) DEFAULT 0,
  `IS_MAIL_SEND` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=330 DEFAULT CHARSET=latin1 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_MERCHANT_BILL_PAYMENT` */

DROP TABLE IF EXISTS `ACC_MERCHANT_BILL_PAYMENT`;

CREATE TABLE `ACC_MERCHANT_BILL_PAYMENT` (
  `PK_NO` int(10) NOT NULL AUTO_INCREMENT,
  `F_BILL_NO` int(11) DEFAULT NULL,
  `CODE` int(10) DEFAULT NULL,
  `PAYMENT_DATE` datetime DEFAULT NULL,
  `AMOUNT` double DEFAULT NULL,
  `F_MERCHANT_NO` int(11) DEFAULT NULL,
  `F_SS_CREATED_BY` int(11) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_MERCHANT_PAYMENTS` */

DROP TABLE IF EXISTS `ACC_MERCHANT_PAYMENTS`;

CREATE TABLE `ACC_MERCHANT_PAYMENTS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_MERCHANT_NO` int(11) DEFAULT NULL,
  `MERCHANT_NO` int(11) DEFAULT NULL,
  `MERCHANT_NAME` varchar(200) DEFAULT NULL,
  `MERCHANT_CELL` varchar(40) DEFAULT NULL,
  `F_PAYMENT_CURRENCY_NO` int(11) DEFAULT NULL,
  `CURRENCY_NAME` varchar(10) DEFAULT NULL,
  `CONVERSION_RATE_TO_MR` float DEFAULT 0,
  `MR_AMOUNT` float DEFAULT 0,
  `PAYMENT_REMAINING_MR` float DEFAULT 0,
  `IS_TRANSFERRED` int(11) DEFAULT 0,
  `TRANSFERRED_MR` float DEFAULT 0,
  `F_BANK_TXN_NO_TRANSFERAR` int(11) DEFAULT NULL,
  `F_PAYMENT_ACC_NO` int(11) DEFAULT NULL,
  `PAYMENT_BANK_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_ACCOUNT_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_BANK_ACC_NO` varchar(40) DEFAULT NULL,
  `PAYMENT_CONFIRMED_STATUS` int(11) DEFAULT NULL,
  `ATTACHMENT_PATH` varchar(200) DEFAULT NULL,
  `PAYMENT_NOTE` varchar(200) DEFAULT NULL,
  `REFUND_MR` float DEFAULT 0,
  `REFUND_MAPING` varchar(200) DEFAULT NULL,
  `PAID_BY` varchar(40) DEFAULT NULL,
  `SLIP_NUMBER` varchar(40) DEFAULT NULL,
  `PAYMENT_DATE` date DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `IS_COD` int(1) DEFAULT 0,
  `PAYMENT_TYPE` int(2) DEFAULT 1,
  `F_ACC_CUST_RES_REFUND_REQUEST_NO` int(10) DEFAULT NULL,
  `F_BOOKING_NO_FOR_PAYMENT_TYPE3` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `U_ACC_MERCHANT_PAYMENTS` (`SLIP_NUMBER`),
  KEY `fk_ACC_MERCHANT_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` (`F_CUSTOMER_PAYMENT_METHOD_NO`),
  KEY `fk_ACC_MERCHANT_PAYMENTS_ACC_PAYMENT_BANK_ACC` (`F_PAYMENT_ACC_NO`),
  KEY `fk_ACC_MERCHANT_PAYMENTS_SLS_MERCHANT` (`F_MERCHANT_NO`),
  KEY `fk_ACC_MERCHANT_PAYMENTS_SS_CURRENCY` (`F_PAYMENT_CURRENCY_NO`),
  CONSTRAINT `fk_ACC_MERCHANT_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` FOREIGN KEY (`F_CUSTOMER_PAYMENT_METHOD_NO`) REFERENCES `ACC_CUSTOMER_PAYMENT_METHOD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_MERCHANT_PAYMENTS_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_PAYMENT_ACC_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_MERCHANT_PAYMENTS_SLS_MERCHANT` FOREIGN KEY (`F_MERCHANT_NO`) REFERENCES `SLS_MERCHANT` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_MERCHANT_PAYMENTS_SS_CURRENCY` FOREIGN KEY (`F_PAYMENT_CURRENCY_NO`) REFERENCES `SS_CURRENCY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_ONLINE_PAYMENT_TXN` */

DROP TABLE IF EXISTS `ACC_ONLINE_PAYMENT_TXN`;

CREATE TABLE `ACC_ONLINE_PAYMENT_TXN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_BOOKING_NO` int(20) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `IS_SELLER` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `SELLER_NAME` varchar(200) DEFAULT NULL,
  `PAYMENT_POSITION` varchar(200) DEFAULT NULL,
  `ORDER_GROUP_ID` int(11) DEFAULT NULL,
  `BILL_ID` varchar(100) DEFAULT NULL,
  `COLLECTION_ID` varchar(100) DEFAULT NULL,
  `IS_SINGLE_PAYMENT` int(1) NOT NULL DEFAULT 0,
  `PAYMENT_AMOUNT` float DEFAULT 0,
  `DUE_AT` datetime DEFAULT NULL,
  `IS_PAID` int(1) DEFAULT 0,
  `PAID_AT` datetime DEFAULT NULL,
  `TRANSACTION_ID` varchar(100) DEFAULT NULL,
  `F_ACC_CUSTOMER_PAYMENT_NO` int(11) DEFAULT 0,
  `F_ACC_SELLER_PAYMENT_NO` int(11) DEFAULT 0,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `IS_PAID_BY_ADMIN` int(1) DEFAULT 0,
  `IS_PAYMENT_TO_BALANCE` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_ONLINE_PAYOUT_TXN` */

DROP TABLE IF EXISTS `ACC_ONLINE_PAYOUT_TXN`;

CREATE TABLE `ACC_ONLINE_PAYOUT_TXN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `IS_SELLER` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `SELLER_NAME` varchar(200) DEFAULT NULL,
  `PAYMENT_POSITION` varchar(200) DEFAULT NULL,
  `BILL_ID` varchar(100) DEFAULT NULL,
  `COLLECTION_ID` varchar(100) DEFAULT NULL,
  `PAYMENT_AMOUNT` float DEFAULT 0,
  `DUE_AT` datetime DEFAULT NULL,
  `IS_PAID` int(1) DEFAULT 0,
  `PAID_AT` datetime DEFAULT NULL,
  `TRANSACTION_ID` varchar(100) DEFAULT NULL,
  `F_ACC_CUSTOMER_PAYMENT_NO` int(11) DEFAULT 0,
  `F_ACC_SELLER_PAYMENT_NO` int(11) DEFAULT 0,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `REQUEST_NOTE` varchar(200) DEFAULT NULL,
  `REQUEST_BY` int(4) DEFAULT NULL,
  `REQUEST_BY_NAME` varchar(50) DEFAULT NULL,
  `REQUEST_DATE` date DEFAULT NULL,
  `BANK_CODE` varchar(100) DEFAULT NULL,
  `BANK_ACCOUNT_NUMBER` varchar(100) DEFAULT NULL,
  `IDENTITY_NUMBER` varchar(100) DEFAULT NULL,
  `BANBK_NAME` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_ORDER_PAYMENT` */

DROP TABLE IF EXISTS `ACC_ORDER_PAYMENT`;

CREATE TABLE `ACC_ORDER_PAYMENT` (
  `ORDER_NO` int(10) DEFAULT NULL,
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `IS_CUSTOMER` int(11) DEFAULT NULL,
  `F_ACC_CUSTOMER_PAYMENT_NO` int(11) DEFAULT NULL,
  `F_ACC_SELLER_PAYMENT_NO` int(11) DEFAULT NULL,
  `PAYMENT_AMOUNT` float DEFAULT 0,
  `IS_PAYMENT_FROM_BALANCE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_ORDER_PAYMENT_ACC_CUSTOMER_PAYMENTS` (`F_ACC_CUSTOMER_PAYMENT_NO`),
  KEY `fk_ACC_ORDER_PAYMENT_ACC_SELLER_PAYMENTS` (`F_ACC_SELLER_PAYMENT_NO`),
  KEY `fk_ACC_ORDER_PAYMENT_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  KEY `fk_ACC_ORDER_PAYMENT_SLS_SELLERS` (`F_SHOP_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PARTY_PAYMENT_METHOD` */

DROP TABLE IF EXISTS `ACC_PARTY_PAYMENT_METHOD`;

CREATE TABLE `ACC_PARTY_PAYMENT_METHOD` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `METHOD_PREFIX` varchar(20) DEFAULT NULL,
  `METHOD_NAME` varchar(100) DEFAULT NULL,
  `METHOD_FEE` float DEFAULT NULL,
  `METHOD_FEE_PERCENTAGE` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_party_payment_method` (`METHOD_PREFIX`),
  UNIQUE KEY `u_acc_party_payment_method_mn` (`METHOD_NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_ACC_HEAD` */

DROP TABLE IF EXISTS `ACC_PAYMENT_ACC_HEAD`;

CREATE TABLE `ACC_PAYMENT_ACC_HEAD` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `ACC_HEAD` int(11) NOT NULL,
  `ACC_HEAD_NAME` varchar(200) NOT NULL,
  `F_PARENT_ACC_HEAD_NO` int(11) DEFAULT NULL,
  `NARRATION` varchar(255) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_CREATED_BY` int(11) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_PAYMENT_ACC_HEAD_ACC_PAYMENT_ACC_HEAD` (`F_PARENT_ACC_HEAD_NO`),
  CONSTRAINT `fk_ACC_PAYMENT_ACC_HEAD_ACC_PAYMENT_ACC_HEAD` FOREIGN KEY (`F_PARENT_ACC_HEAD_NO`) REFERENCES `ACC_PAYMENT_ACC_HEAD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_BANK_ACC` */

DROP TABLE IF EXISTS `ACC_PAYMENT_BANK_ACC`;

CREATE TABLE `ACC_PAYMENT_BANK_ACC` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `BANK_NAME` varchar(40) DEFAULT NULL,
  `BANK_ACC_NAME` varchar(40) DEFAULT NULL,
  `BANK_ACC_NO` varchar(40) DEFAULT NULL,
  `BALANCE_ACTUAL` float DEFAULT 0,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_COD` int(1) DEFAULT 0,
  `F_USER_NO` int(4) DEFAULT NULL,
  `BRANCH_NAME` varchar(155) DEFAULT NULL,
  `START_DATE` date DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `Unique_code` (`CODE`) COMMENT 'unique'
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_BANK_ACC_EXFER` */

DROP TABLE IF EXISTS `ACC_PAYMENT_BANK_ACC_EXFER`;

CREATE TABLE `ACC_PAYMENT_BANK_ACC_EXFER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_I_ACC_PAYMENT_BANK_ACC_NO` int(11) NOT NULL,
  `F_ACC_BANK_TXN` int(11) DEFAULT NULL,
  `ENTERED_MR_AMOUNT` float NOT NULL,
  `IS_IN` int(1) DEFAULT NULL,
  `F_ACC_PARTY_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `ACC_PARTY_PAYMENT_METHOD` varchar(20) DEFAULT NULL,
  `F_ACC_PAYMENT_ACC_HEAD_NO` int(11) DEFAULT NULL,
  `ACK_MR_AMOUNT` float DEFAULT NULL,
  `IS_VERIFIED` int(1) DEFAULT 0,
  `F_VERIFIED_BY_SA_USER_NO` int(11) DEFAULT NULL,
  `NARRATION` varchar(255) DEFAULT NULL,
  `ATTACHMENT_PATH` varchar(255) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_CREATED_BY` int(11) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_BANK_ACC_IXFER` */

DROP TABLE IF EXISTS `ACC_PAYMENT_BANK_ACC_IXFER`;

CREATE TABLE `ACC_PAYMENT_BANK_ACC_IXFER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_FROM_ACC_PAYMENT_BANK_ACC_NO` int(11) NOT NULL,
  `F_TO_ACC_PAYMENT_BANK_ACC_NO` int(11) NOT NULL,
  `F_FROM_ACC_BANK_TXN` int(11) DEFAULT NULL,
  `F_TO_ACC_BANK_TXN` int(11) DEFAULT NULL,
  `ENTERED_MR_AMOUNT` float NOT NULL,
  `F_ACC_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `ACC_CUSTOMER_PAYMENT_METHOD` varchar(20) DEFAULT NULL,
  `ACK_MR_AMOUNT` float NOT NULL,
  `IS_VERIFIED` int(1) DEFAULT 0,
  `F_VERIFIED_BY_SA_USER_NO` int(11) DEFAULT NULL,
  `NARRATION` varchar(255) DEFAULT NULL,
  `ATTACHMENT_PATH` varchar(255) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_CREATED_BY` int(11) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_METHODS` */

DROP TABLE IF EXISTS `ACC_PAYMENT_METHODS`;

CREATE TABLE `ACC_PAYMENT_METHODS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `F_ACC_SOURCE_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_payment_methods` (`F_ACC_SOURCE_NO`,`NAME`),
  CONSTRAINT `fk_ACC_PAYMENT_METHODS_ACC_PAYMENT_SOURCE` FOREIGN KEY (`F_ACC_SOURCE_NO`) REFERENCES `ACC_PAYMENT_SOURCE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8mb4;

/*Table structure for table `ACC_PAYMENT_SOURCE` */

DROP TABLE IF EXISTS `ACC_PAYMENT_SOURCE`;

CREATE TABLE `ACC_PAYMENT_SOURCE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(2) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_payment_source` (`CODE`),
  UNIQUE KEY `u_acc_payment_source_name` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4;

/*Table structure for table `ACC_SELLER_CUSTOMER_TX` */

DROP TABLE IF EXISTS `ACC_SELLER_CUSTOMER_TX`;

CREATE TABLE `ACC_SELLER_CUSTOMER_TX` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_FROM_SELLER_NO` int(11) DEFAULT NULL,
  `F_FROM_SELLER_PAYMENT_NO` int(10) DEFAULT NULL,
  `F_TO_SELLER_NO` int(11) DEFAULT NULL,
  `F_FROM_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_FROM_CUSTOMER_PAYMENT_NO` int(10) DEFAULT NULL,
  `F_TO_CUSTOMER` int(11) DEFAULT NULL,
  `AMOUNT` float DEFAULT 0,
  `ORDER_TOPUP` float DEFAULT 0,
  `ORDER_TOPUP_SPENT` float DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_SELLER_CUSTOMER_TX_ACC_CUSTOMER_PAYMENTS` (`F_FROM_CUSTOMER_PAYMENT_NO`),
  KEY `fk_ACC_SELLER_CUSTOMER_TX_ACC_SELLER_PAYMENTS` (`F_FROM_SELLER_PAYMENT_NO`),
  KEY `fk_ACC_SELLER_CUSTOMER_TX_SLS_CUSTOMERS` (`F_TO_CUSTOMER`),
  KEY `fk_ACC_SELLER_CUSTOMER_TX_SLS_CUSTOMERS_t` (`F_FROM_CUSTOMER_NO`),
  KEY `fk_ACC_SELLER_CUSTOMER_TX_SLS_SELLERS` (`F_FROM_SELLER_NO`),
  KEY `fk_ACC_SELLER_CUSTOMER_TX_SLS_SELLERS_t` (`F_TO_SELLER_NO`),
  CONSTRAINT `fk_ACC_SELLER_CUSTOMER_TX_ACC_CUSTOMER_PAYMENTS` FOREIGN KEY (`F_FROM_CUSTOMER_PAYMENT_NO`) REFERENCES `ACC_CUSTOMER_PAYMENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_SELLER_CUSTOMER_TX_ACC_SELLER_PAYMENTS` FOREIGN KEY (`F_FROM_SELLER_PAYMENT_NO`) REFERENCES `ACC_SELLER_PAYMENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_SELLER_CUSTOMER_TX_SLS_CUSTOMERS` FOREIGN KEY (`F_TO_CUSTOMER`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_SELLER_CUSTOMER_TX_SLS_CUSTOMERS_t` FOREIGN KEY (`F_FROM_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_SELLER_CUSTOMER_TX_SLS_SELLERS` FOREIGN KEY (`F_FROM_SELLER_NO`) REFERENCES `SLS_SELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_SELLER_CUSTOMER_TX_SLS_SELLERS_t` FOREIGN KEY (`F_TO_SELLER_NO`) REFERENCES `SLS_SELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_SELLER_PAYMENTS` */

DROP TABLE IF EXISTS `ACC_SELLER_PAYMENTS`;

CREATE TABLE `ACC_SELLER_PAYMENTS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `SELLER_NO` int(11) DEFAULT NULL,
  `SELLER_NAME` varchar(200) DEFAULT NULL,
  `SELLER_CELL` varchar(40) DEFAULT NULL,
  `F_PAYMENT_CURRENCY_NO` int(11) DEFAULT NULL,
  `CURRENCY_NAME` varchar(10) DEFAULT NULL,
  `CONVERSION_RATE_TO_MR` float DEFAULT 0,
  `MR_AMOUNT` float DEFAULT 0,
  `PAYMENT_REMAINING_MR` float DEFAULT 0,
  `TRANSFERRED_MR` float NOT NULL DEFAULT 0,
  `IS_TRANSFERRED` int(11) DEFAULT 0,
  `F_BANK_TXN_NO_TRANSFERAR` int(11) DEFAULT NULL,
  `F_PAYMENT_ACC_NO` int(11) DEFAULT NULL,
  `PAYMENT_BANK_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_ACCOUNT_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_BANK_ACC_NO` varchar(40) DEFAULT NULL,
  `PAYMENT_CONFIRMED_STATUS` int(11) DEFAULT NULL,
  `ATTACHMENT_PATH` varchar(200) DEFAULT NULL,
  `PAYMENT_NOTE` varchar(200) DEFAULT NULL,
  `REFUND_MR` float DEFAULT NULL,
  `REFUND_MAPING` varchar(200) DEFAULT NULL,
  `PAID_BY` varchar(200) DEFAULT NULL,
  `SLIP_NUMBER` varchar(40) DEFAULT NULL,
  `PAYMENT_DATE` date DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(2) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `IS_COD` int(1) DEFAULT 0,
  `PAYMENT_TYPE` int(11) DEFAULT 1,
  `F_ACC_CUST_RES_REFUND_REQUEST_NO` int(11) DEFAULT NULL,
  `F_BOOKING_NO_FOR_PAYMENT_TYPE3` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_seller_payments` (`SLIP_NUMBER`),
  KEY `fk_ACC_SELLER_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` (`F_CUSTOMER_PAYMENT_METHOD_NO`),
  KEY `fk_ACC_SELLER_PAYMENTS_ACC_PAYMENT_BANK_ACC` (`F_PAYMENT_ACC_NO`),
  KEY `fk_ACC_SELLER_PAYMENTS_SLS_SELLERS` (`F_SELLER_NO`),
  CONSTRAINT `fk_ACC_SELLER_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` FOREIGN KEY (`F_CUSTOMER_PAYMENT_METHOD_NO`) REFERENCES `ACC_CUSTOMER_PAYMENT_METHOD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_SELLER_PAYMENTS_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_PAYMENT_ACC_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_SELLER_PAYMENTS_SLS_SELLERS` FOREIGN KEY (`F_SELLER_NO`) REFERENCES `SLS_SELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_VAT_CLASS` */

DROP TABLE IF EXISTS `ACC_VAT_CLASS`;

CREATE TABLE `ACC_VAT_CLASS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(4) DEFAULT NULL,
  `NAME` varchar(20) DEFAULT NULL,
  `RATE` float DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ACC_VAT_CLASS` (`CODE`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `CUSTOMS_TARRIF_CODE` */

DROP TABLE IF EXISTS `CUSTOMS_TARRIF_CODE`;

CREATE TABLE `CUSTOMS_TARRIF_CODE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `HSCODE` int(50) NOT NULL,
  `DESCRIPTION` varchar(200) DEFAULT NULL,
  `CD` int(11) DEFAULT NULL,
  `SD` int(11) DEFAULT NULL,
  `VAT` int(11) DEFAULT NULL,
  `AIT` int(11) DEFAULT NULL,
  `RD` int(11) DEFAULT NULL,
  `AT` int(11) DEFAULT NULL,
  `TTI` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_customs_tarrif_code` (`HSCODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='HS_CODE_LIST;';

/*Table structure for table `INV_STOCK` */

DROP TABLE IF EXISTS `INV_STOCK`;

CREATE TABLE `INV_STOCK` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_INV_STOCK_PRC_STOCK_IN_MAP_NO` int(11) DEFAULT NULL,
  `F_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_PRC_STOCK_IN_DETAILS_NO` int(11) DEFAULT NULL,
  `IG_CODE` varchar(20) DEFAULT NULL,
  `SKUID` varchar(40) DEFAULT NULL,
  `BARCODE` varchar(40) DEFAULT NULL,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARINAT_NAME` varchar(200) DEFAULT NULL,
  `INVOICE_NAME` varchar(200) NOT NULL,
  `F_CATEGORY_NO` int(11) DEFAULT NULL,
  `CATEGORY_NAME` varchar(200) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `SHOP_NAME` varchar(200) DEFAULT NULL,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_BOOKING_DETAILS_NO` int(11) DEFAULT NULL,
  `BOOKING_STATUS` int(11) DEFAULT 0,
  `ORDER_STATUS` int(11) DEFAULT 0,
  `IS_FAULTY` int(1) DEFAULT 0,
  `PRODUCT_PURCHASE_PRICE` double DEFAULT NULL,
  `REGULAR_PRICE` double DEFAULT NULL,
  `SPECIAL_PRICE` float DEFAULT NULL,
  `INSTALLMENT_PRICE` double DEFAULT NULL,
  `WHOLESALE_PRICE` float DEFAULT NULL,
  `PRODUCT_STATUS` int(11) DEFAULT NULL,
  `PRC_IN_IMAGE_PATH` varchar(255) DEFAULT NULL,
  `PRD_VARIANT_IMAGE_PATH` varchar(255) DEFAULT NULL,
  `F_INV_ZONE_NO` int(11) DEFAULT NULL,
  `ZONE_CHECK_IN_BY` int(11) DEFAULT NULL,
  `INV_ZONE_BARCODE` varchar(200) DEFAULT NULL,
  `ZONE_CHECK_IN_BY_NAME` varchar(200) DEFAULT NULL,
  `ZONE_CHECK_OUT_BY` int(11) DEFAULT NULL,
  `ZONE_CHECK_OUT_BY_NAME` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`,`INVOICE_NAME`),
  KEY `GENERAL_INDEX_PRODUCT_STATUS` (`F_SHOP_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=21695 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `INV_STOCK_PRC_STOCK_IN_MAP` */

DROP TABLE IF EXISTS `INV_STOCK_PRC_STOCK_IN_MAP`;

CREATE TABLE `INV_STOCK_PRC_STOCK_IN_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `IS_PROCESS_COMPLETE` int(11) DEFAULT NULL,
  `PROCESS_START_TIME` datetime DEFAULT NULL,
  `PROCESS_COMPLETE_TIME` datetime DEFAULT NULL,
  `F_PROCESS_RUN_BY` int(11) DEFAULT NULL,
  `PROCESS_RUN_BY` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(11) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_inv_stock_prc_stock_in_sls_seller` (`F_PRC_STOCK_IN_NO`,`F_SHOP_NO`),
  KEY `fk_INV_STOCK_PRC_STOCK_IN_MAP_SLS_SELLERS` (`F_SHOP_NO`),
  CONSTRAINT `fk_INV_STOCK_PRC_STOCK_IN_MAP_PRC_STOCK_IN` FOREIGN KEY (`F_PRC_STOCK_IN_NO`) REFERENCES `PRC_STOCK_IN` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `INV_WAREHOUSE` */

DROP TABLE IF EXISTS `INV_WAREHOUSE`;

CREATE TABLE `INV_WAREHOUSE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `LOCATION` varchar(200) DEFAULT NULL,
  `ADDRESS` varchar(200) DEFAULT NULL,
  `MANAGER` varchar(200) DEFAULT NULL,
  `CONTACT_PHONE` varchar(50) DEFAULT NULL,
  `COUNTRY_NAME` varchar(50) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_inv_warehouse` (`CODE`),
  KEY `fk_INV_WAREHOUSE_SS_COUNTRY` (`F_COUNTRY_NO`),
  CONSTRAINT `fk_INV_WAREHOUSE_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `INV_WAREHOUSE_ZONES` */

DROP TABLE IF EXISTS `INV_WAREHOUSE_ZONES`;

CREATE TABLE `INV_WAREHOUSE_ZONES` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `ZONE_BARCODE` varchar(20) DEFAULT NULL,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `DESCRIPTION` varchar(200) DEFAULT NULL,
  `ITEM_COUNT` int(11) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_inv_warehouse_zones` (`CODE`),
  UNIQUE KEY `u_inv_warehouse_zones_bc` (`ZONE_BARCODE`),
  KEY `fk_INV_WAREHOUSE_ZONES_INV_WAREHOUSE` (`F_INV_WAREHOUSE_NO`),
  CONSTRAINT `fk_INV_WAREHOUSE_ZONES_INV_WAREHOUSE` FOREIGN KEY (`F_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=265 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `INV_WAREHOUSE_ZONE_STOCK_ITEM` */

DROP TABLE IF EXISTS `INV_WAREHOUSE_ZONE_STOCK_ITEM`;

CREATE TABLE `INV_WAREHOUSE_ZONE_STOCK_ITEM` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_INV_STOCK_NO` int(11) DEFAULT NULL,
  `F_INV_WAREHOUSE_ZONE_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_INV_WAREHOUSE_ZONE_STOCK_ITEM_INV_STOCK` (`F_INV_STOCK_NO`),
  KEY `fk_INV_WAREHOUSE_ZONE_STOCK_ITEM_INV_WAREHOUSE` (`F_INV_WAREHOUSE_ZONE_NO`),
  CONSTRAINT `fk_INV_WAREHOUSE_ZONE_STOCK_ITEM_INV_STOCK` FOREIGN KEY (`F_INV_STOCK_NO`) REFERENCES `INV_STOCK` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_INV_WAREHOUSE_ZONE_STOCK_ITEM_INV_WAREHOUSE_ZONES` FOREIGN KEY (`F_INV_WAREHOUSE_ZONE_NO`) REFERENCES `INV_WAREHOUSE_ZONES` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1053 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `MER_INV_STOCK` */

DROP TABLE IF EXISTS `MER_INV_STOCK`;

CREATE TABLE `MER_INV_STOCK` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_INV_STOCK_PRC_STOCK_IN_MAP_NO` int(11) DEFAULT NULL,
  `F_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_PRC_STOCK_IN_DETAILS_NO` int(11) DEFAULT NULL,
  `IG_CODE` varchar(20) DEFAULT NULL,
  `SKUID` varchar(40) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARINAT_NAME` varchar(200) DEFAULT NULL,
  `INVOICE_NAME` varchar(200) DEFAULT NULL,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `INV_WAREHOUSE_NAME` varchar(200) DEFAULT NULL,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_BOOKING_DETAILS_NO` int(11) DEFAULT NULL,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `F_ORDER_DETAILS_NO` int(11) DEFAULT NULL,
  `HS_CODE` varchar(20) DEFAULT NULL,
  `HS_CODE_NARRATION` varchar(200) DEFAULT NULL,
  `F_CATEGORY_NO` int(11) DEFAULT NULL,
  `CATEGORY_NAME` varchar(200) DEFAULT NULL,
  `F_SUB_CATEGORY_NO` int(11) DEFAULT NULL,
  `SUB_CATEGORY_NAME` varchar(200) DEFAULT NULL,
  `BARCODE` varchar(40) DEFAULT NULL,
  `F_BRAND_NO` int(11) DEFAULT NULL,
  `BRAND_NAME` varchar(40) DEFAULT NULL,
  `F_MODEL_NO` int(11) DEFAULT NULL,
  `MODEL_NAME` varchar(200) DEFAULT NULL,
  `PRODUCT_STATUS` int(11) DEFAULT NULL,
  `BOOKING_STATUS` int(11) DEFAULT NULL,
  `ORDER_STATUS` int(11) DEFAULT NULL,
  `IS_FAULTY` int(1) DEFAULT 0,
  `PRODUCT_PURCHASE_PRICE_GBP` double DEFAULT NULL,
  `PRODUCT_PURCHASE_PRICE` double DEFAULT NULL,
  `MER_PRODUCT_PURCHASE_PRICE_GBP` double DEFAULT NULL,
  `MER_PRODUCT_PURCHASE_PRICE` double DEFAULT NULL,
  `REGULAR_PRICE` double DEFAULT NULL,
  `INSTALLMENT_PRICE` double DEFAULT NULL,
  `ORDER_PRICE` double DEFAULT NULL,
  `PREFERRED_SHIPPING_METHOD` varchar(40) DEFAULT NULL,
  `CUSTOMER_PREFFERED_SHIPPING_METHOD` varchar(100) DEFAULT NULL,
  `FINAL_PREFFERED_SHIPPING_METHOD` varchar(45) DEFAULT NULL,
  `SM_COST` double DEFAULT NULL,
  `SS_COST` double DEFAULT NULL,
  `AIR_FREIGHT_COST` double DEFAULT NULL,
  `SEA_FREIGHT_COST` double DEFAULT NULL,
  `F_SHIPPMENT_NO` int(11) DEFAULT NULL,
  `SHIPMENT_NAME` varchar(200) DEFAULT NULL,
  `SHIPMENT_TYPE` varchar(45) DEFAULT NULL,
  `BOX_BARCODE` varchar(200) DEFAULT NULL,
  `F_BOX_NO` int(11) DEFAULT NULL,
  `BOX_TYPE` varchar(45) DEFAULT NULL,
  `PRC_IN_IMAGE_PATH` varchar(200) DEFAULT NULL,
  `PRD_VARIANT_IMAGE_PATH` varchar(200) DEFAULT NULL,
  `F_INV_ZONE_NO` int(11) DEFAULT NULL,
  `INV_ZONE_BARCODE` varchar(200) DEFAULT NULL,
  `ZONE_CHECK_IN_BY` int(11) DEFAULT NULL,
  `ZONE_CHECK_IN_BY_NAME` varchar(100) DEFAULT NULL,
  `ZONE_CHECK_OUT_BY` int(11) DEFAULT NULL,
  `ZONE_CHECK_OUT_BY_NAME` varchar(100) DEFAULT NULL,
  `F_MERCHANT_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `GENERAL_INDEX_PRODUCT_STATUS` (`PRODUCT_STATUS`)
) ENGINE=InnoDB AUTO_INCREMENT=175 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `MER_INV_STOCK_PRC_STOCK_IN_MAP` */

DROP TABLE IF EXISTS `MER_INV_STOCK_PRC_STOCK_IN_MAP`;

CREATE TABLE `MER_INV_STOCK_PRC_STOCK_IN_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `IS_PROCESS_COMPLETE` int(11) DEFAULT NULL,
  `PROCESS_START_TIME` datetime DEFAULT NULL,
  `PROCESS_COMPLETE_TIME` datetime DEFAULT NULL,
  `F_PROCESS_RUN_BY` int(11) DEFAULT NULL,
  `PROCESS_RUN_BY` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_inv_stock_prc_stock_in_map` (`F_PRC_STOCK_IN_NO`),
  KEY `fk_INV_STOCK_PRC_STOCK_IN_MAP_INV_WAREHOUSE` (`F_INV_WAREHOUSE_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `MER_PRC_IMG_LIBRARY` */

DROP TABLE IF EXISTS `MER_PRC_IMG_LIBRARY`;

CREATE TABLE `MER_PRC_IMG_LIBRARY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_FILE_TYPE_NO` int(11) DEFAULT NULL,
  `FILE_EXT` varchar(20) DEFAULT NULL,
  `RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `SERIAL_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_PRC_IMG_LIBRARY_SS_IMG_FILE_TYPE` (`F_FILE_TYPE_NO`),
  KEY `fk_PRC_IMG_LIBRARY_PRC_STOCK_IN` (`F_PRC_STOCK_IN_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `MER_PRC_STOCK_IN` */

DROP TABLE IF EXISTS `MER_PRC_STOCK_IN`;

CREATE TABLE `MER_PRC_STOCK_IN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `INVOICE_NO` varchar(200) DEFAULT NULL,
  `INVOICE_DATE` date DEFAULT NULL,
  `INVOICE_CURRENCY` varchar(20) DEFAULT NULL,
  `F_SS_CURRENCY_NO` int(11) DEFAULT NULL,
  `TOTAL_QTY` int(11) DEFAULT 0,
  `RECIEVED_QTY` int(11) DEFAULT 0,
  `FAULTY_QTY` int(11) DEFAULT 0,
  `DISCOUNT_PERCENTAGE` float DEFAULT NULL,
  `DISCOUNT_AMOUNT` float DEFAULT NULL,
  `F_VENDOR_NO` int(11) DEFAULT NULL,
  `VENDOR_NAME` varchar(200) DEFAULT NULL,
  `F_PURCHASER_USER_NO` int(11) DEFAULT NULL,
  `PURCHASER_NAME` varchar(200) DEFAULT NULL,
  `INVOICE_EXACT_VALUE` double DEFAULT NULL,
  `INVOICE_EXACT_POSTAGE` double DEFAULT NULL,
  `INVOICE_EXACT_VAT` double DEFAULT NULL,
  `INVOICE_TOTAL_EV_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_TOTAL_VAT_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_TOTAL_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT` double DEFAULT NULL,
  `INVOICE_POSTAGE_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_TOTAL_EV_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_TOTAL_VAT_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_TOTAL_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT` double DEFAULT NULL,
  `INVOICE_POSTAGE_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_TOTAL_EV_ACTUAL_AC` double DEFAULT NULL,
  `INVOICE_TOTAL_VAT_ACTUAL_AC` double DEFAULT NULL,
  `INVOICE_TOTAL_ACTUAL_AC` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT` double DEFAULT NULL,
  `INVOICE_POSTAGE_ACTUAL_AC` double DEFAULT NULL,
  `HAS_VAT_REFUND` int(11) DEFAULT NULL,
  `VAT_CLAIMED` int(11) DEFAULT 0,
  `GBP_TO_MR_RATE` float DEFAULT NULL,
  `GBP_TO_AC_RATE` float DEFAULT NULL,
  `HAS_LOYALTY` int(11) DEFAULT NULL,
  `LOYALTY_CLAIMED` int(11) DEFAULT NULL,
  `MASTER_INVOICE_RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `INV_STOCK_RECORD_GENERATED` int(11) DEFAULT 0,
  `DISCOUNT2_PERCENTAGE` float DEFAULT NULL,
  `DISCOUNT2_AMOUNT` float DEFAULT NULL,
  `F_PAYMENT_SOURCE_NO` int(11) DEFAULT NULL,
  `PAYMENT_SOURCE_NAME` varchar(100) DEFAULT NULL,
  `F_PAYMENT_ACC_NO` int(11) DEFAULT NULL,
  `PAYMENT_ACC_NAME` varchar(100) DEFAULT NULL,
  `F_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `PAYMENT_METHOD_NAME` varchar(100) DEFAULT NULL,
  `IS_QUICK_BOOK_ENTERED` tinyint(4) DEFAULT NULL,
  `F_PARENT_PRC_STOCK_IN` int(11) DEFAULT NULL,
  `F_CHILD_PRC_STOCK_IN` int(11) DEFAULT NULL,
  `DESCRIPTION` varchar(255) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SETTLEMENT_AMT` int(11) DEFAULT NULL,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_MERCHANT_NO` int(11) DEFAULT NULL,
  `IS_PAID` int(1) DEFAULT 0,
  `MER_INVOICE_TOTAL_ACTUAL_GBP` double DEFAULT NULL,
  `MER_INVOICE_TOTAL_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_PHOTO_SHOW_MERCHANT` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prc_stock_in` (`CODE`),
  UNIQUE KEY `u_prc_stock_in_INV_UQ` (`INVOICE_NO`,`INVOICE_DATE`,`F_VENDOR_NO`),
  KEY `fk_PRC_STOCK_IN_PRC_VENDORS` (`F_VENDOR_NO`),
  KEY `fk_PRC_STOCK_IN_SS_CURRENCY` (`F_SS_CURRENCY_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `MER_PRC_STOCK_IN_DETAILS` */

DROP TABLE IF EXISTS `MER_PRC_STOCK_IN_DETAILS`;

CREATE TABLE `MER_PRC_STOCK_IN_DETAILS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRC_STOCK_IN` int(11) DEFAULT NULL,
  `CODE` int(10) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARIANT_NAME` varchar(200) DEFAULT NULL,
  `INVOICE_NAME` varchar(200) DEFAULT NULL,
  `HS_CODE` varchar(20) DEFAULT NULL,
  `BAR_CODE` varchar(200) DEFAULT NULL,
  `MER_UNIT_PRICE_MR_EV` double DEFAULT NULL,
  `MER_UNIT_VAT_MR` double DEFAULT NULL,
  `MER_LINE_TOTAL_VAT_MR` double DEFAULT NULL,
  `MER_SUB_TOTAL_MR_RECEIPT` double DEFAULT NULL,
  `MER_SUB_TOTAL_MR_EV` double DEFAULT NULL,
  `MER_REC_TOTAL_MR_WITH_VAT` double DEFAULT NULL,
  `MER_REC_TOTAL_MR_ONLY_VAT` double DEFAULT NULL,
  `MER_UNIT_PRICE_GBP_EV` double DEFAULT NULL,
  `MER_UNIT_VAT_GBP` double DEFAULT NULL,
  `MER_LINE_TOTAL_VAT_GBP` double DEFAULT NULL,
  `MER_SUB_TOTAL_GBP_RECEIPT` double DEFAULT NULL,
  `MER_SUB_TOTAL_GBP_EV` double DEFAULT NULL,
  `MER_REC_TOTAL_GBP_WITH_VAT` double DEFAULT NULL,
  `MER_REC_TOTAL_GBP_ONLY_VAT` double DEFAULT NULL,
  `UNIT_PRICE_MR_EV` double DEFAULT NULL,
  `UNIT_VAT_MR` double DEFAULT NULL,
  `LINE_TOTAL_VAT_MR` double DEFAULT NULL,
  `SUB_TOTAL_MR_RECEIPT` double DEFAULT NULL,
  `SUB_TOTAL_MR_EV` double DEFAULT NULL,
  `REC_TOTAL_MR_WITH_VAT` double DEFAULT NULL,
  `REC_TOTAL_MR_ONLY_VAT` double DEFAULT NULL,
  `UNIT_PRICE_GBP_EV` double DEFAULT NULL,
  `UNIT_VAT_GBP` double DEFAULT NULL,
  `LINE_TOTAL_VAT_GBP` double DEFAULT NULL,
  `SUB_TOTAL_GBP_RECEIPT` double DEFAULT NULL,
  `SUB_TOTAL_GBP_EV` double DEFAULT NULL,
  `REC_TOTAL_GBP_WITH_VAT` double DEFAULT NULL,
  `REC_TOTAL_GBP_ONLY_VAT` double DEFAULT NULL,
  `UNIT_PRICE_AC_EV` double DEFAULT NULL,
  `UNIT_VAT_AC` double DEFAULT NULL,
  `LINE_TOTAL_VAT_AC` double DEFAULT NULL,
  `SUB_TOTAL_AC_RECEIPT` double DEFAULT NULL,
  `SUB_TOTAL_AC_EV` double DEFAULT NULL,
  `REC_TOTAL_AC_WITH_VAT` double DEFAULT NULL,
  `REC_TOTAL_AC_ONLY_VAT` double DEFAULT NULL,
  `QTY` int(11) NOT NULL,
  `RECIEVED_QTY` int(11) NOT NULL,
  `FAULTY_QTY` int(11) NOT NULL,
  `F_VAT_CLASS_NO` int(11) DEFAULT NULL,
  `VAT_RATE` int(11) DEFAULT NULL,
  `CURRENCY` varchar(20) DEFAULT NULL,
  `SERIAL_NO` varchar(2000) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prc_stock_in_details` (`CODE`),
  KEY `fk_PRC_STOCK_IN_DETAILS_ACC_VAT_CLASS` (`F_VAT_CLASS_NO`),
  KEY `fk_PRC_STOCK_IN_DETAILS_PRD_VARIANT_SETUP` (`F_PRD_VARIANT_NO`),
  KEY `fk_PRC_STOCK_IN_DETAILS_PRC_STOCK_IN` (`F_PRC_STOCK_IN`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `MER_SC_BOX_INV_STOCK` */

DROP TABLE IF EXISTS `MER_SC_BOX_INV_STOCK`;

CREATE TABLE `MER_SC_BOX_INV_STOCK` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BOX_NO` int(11) NOT NULL,
  `F_INV_STOCK_NO` int(11) NOT NULL,
  `F_MERCHANT_NO` int(11) NOT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_box_mer_inv_stock` (`F_BOX_NO`,`F_INV_STOCK_NO`),
  KEY `fk_SC_BOX_INV_STOCK_MER_MER_INV_STOCK` (`F_INV_STOCK_NO`),
  KEY `fk_SC_BOX_INV_STOCK_MER_SLS_MERCHANT` (`F_MERCHANT_NO`),
  CONSTRAINT `fk_SC_BOX_INV_STOCK_MER_MER_INV_STOCK` FOREIGN KEY (`F_INV_STOCK_NO`) REFERENCES `MER_INV_STOCK` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_BOX_INV_STOCK_MER_SC_BOX` FOREIGN KEY (`F_BOX_NO`) REFERENCES `SC_BOX` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_BOX_INV_STOCK_MER_SLS_MERCHANT` FOREIGN KEY (`F_MERCHANT_NO`) REFERENCES `SLS_MERCHANT` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRC_IMG_LIBRARY` */

DROP TABLE IF EXISTS `PRC_IMG_LIBRARY`;

CREATE TABLE `PRC_IMG_LIBRARY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_FILE_TYPE_NO` int(11) DEFAULT NULL,
  `FILE_EXT` varchar(20) DEFAULT NULL,
  `RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `SERIAL_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_PRC_IMG_LIBRARY_SS_IMG_FILE_TYPE` (`F_FILE_TYPE_NO`),
  KEY `fk_PRC_IMG_LIBRARY_PRC_STOCK_IN` (`F_PRC_STOCK_IN_NO`),
  CONSTRAINT `fk_PRC_IMG_LIBRARY_PRC_STOCK_IN` FOREIGN KEY (`F_PRC_STOCK_IN_NO`) REFERENCES `PRC_STOCK_IN` (`PK_NO`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_PRC_IMG_LIBRARY_SS_IMG_FILE_TYPE` FOREIGN KEY (`F_FILE_TYPE_NO`) REFERENCES `SS_IMG_FILE_TYPE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=610 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRC_STOCK_IN` */

DROP TABLE IF EXISTS `PRC_STOCK_IN`;

CREATE TABLE `PRC_STOCK_IN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `INVOICE_NO` varchar(200) DEFAULT NULL,
  `INVOICE_DATE` date DEFAULT NULL,
  `INVOICE_CURRENCY` varchar(20) DEFAULT NULL,
  `F_SS_CURRENCY_NO` int(11) DEFAULT NULL,
  `TOTAL_QTY` int(11) DEFAULT NULL,
  `RECIEVED_QTY` int(11) DEFAULT NULL,
  `FAULTY_QTY` int(11) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `SHOP_NAME` varchar(255) DEFAULT NULL,
  `DISCOUNT_PERCENTAGE` float DEFAULT NULL,
  `DISCOUNT_AMOUNT` float DEFAULT NULL,
  `F_VENDOR_NO` int(11) DEFAULT NULL,
  `VENDOR_NAME` varchar(200) DEFAULT NULL,
  `F_PURCHASER_USER_NO` int(11) DEFAULT NULL,
  `PURCHASER_NAME` varchar(200) DEFAULT NULL,
  `INVOICE_EXACT_VALUE` double DEFAULT NULL,
  `INVOICE_EXACT_POSTAGE` double DEFAULT NULL,
  `INVOICE_EXACT_VAT` double DEFAULT NULL,
  `INVOICE_TOTAL_EV_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_TOTAL_VAT_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_TOTAL_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT` double DEFAULT NULL,
  `INVOICE_POSTAGE_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_TOTAL_EV_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_TOTAL_VAT_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_TOTAL_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT` double DEFAULT NULL,
  `INVOICE_POSTAGE_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_TOTAL_EV_ACTUAL_AC` double DEFAULT NULL,
  `INVOICE_TOTAL_VAT_ACTUAL_AC` double DEFAULT NULL,
  `INVOICE_TOTAL_ACTUAL_AC` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT` double DEFAULT NULL,
  `INVOICE_POSTAGE_ACTUAL_AC` double DEFAULT NULL,
  `HAS_VAT_REFUND` int(11) DEFAULT NULL,
  `VAT_CLAIMED` int(11) DEFAULT 0,
  `GBP_TO_MR_RATE` float DEFAULT NULL,
  `GBP_TO_AC_RATE` float DEFAULT NULL,
  `HAS_LOYALTY` int(11) DEFAULT NULL,
  `LOYALTY_CLAIMED` int(11) DEFAULT NULL,
  `MASTER_INVOICE_RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `INV_STOCK_RECORD_GENERATED` int(11) DEFAULT 0,
  `DISCOUNT2_PERCENTAGE` float DEFAULT NULL,
  `DISCOUNT2_AMOUNT` float DEFAULT NULL,
  `F_PAYMENT_SOURCE_NO` int(11) DEFAULT NULL,
  `PAYMENT_SOURCE_NAME` varchar(100) DEFAULT NULL,
  `F_PAYMENT_ACC_NO` int(11) DEFAULT NULL,
  `PAYMENT_ACC_NAME` varchar(100) DEFAULT NULL,
  `F_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `PAYMENT_METHOD_NAME` varchar(100) DEFAULT NULL,
  `IS_QUICK_BOOK_ENTERED` tinyint(4) DEFAULT NULL,
  `F_PARENT_PRC_STOCK_IN` int(11) DEFAULT NULL,
  `F_CHILD_PRC_STOCK_IN` int(11) DEFAULT NULL,
  `DESCRIPTION` varchar(255) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SETTLEMENT_AMT` int(11) DEFAULT NULL,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_STOCK_IN` int(1) DEFAULT 1 COMMENT '1=stock in;2=stock out',
  `STOCK_IN_TYPE` int(1) DEFAULT NULL COMMENT '1=purchase;2=return',
  `STOCK_OUT_TYPE` int(1) DEFAULT NULL COMMENT '1=sell;2=return to vendor;3=faulty',
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prc_stock_in` (`CODE`),
  UNIQUE KEY `u_prc_stock_in_INV_UQ` (`INVOICE_NO`,`INVOICE_DATE`,`F_VENDOR_NO`),
  KEY `fk_PRC_STOCK_IN_PRC_VENDORS` (`F_VENDOR_NO`),
  KEY `fk_PRC_STOCK_IN_SS_CURRENCY` (`F_SS_CURRENCY_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=750 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRC_STOCK_IN_DETAILS` */

DROP TABLE IF EXISTS `PRC_STOCK_IN_DETAILS`;

CREATE TABLE `PRC_STOCK_IN_DETAILS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRC_STOCK_IN` int(11) DEFAULT NULL,
  `CODE` int(10) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARIANT_NAME` varchar(200) DEFAULT NULL,
  `INVOICE_NAME` varchar(200) DEFAULT NULL,
  `HS_CODE` varchar(20) DEFAULT NULL,
  `BAR_CODE` varchar(200) DEFAULT NULL,
  `UNIT_PRICE_MR_EV` double DEFAULT NULL,
  `UNIT_VAT_MR` double DEFAULT NULL,
  `LINE_TOTAL_VAT_MR` double DEFAULT NULL,
  `SUB_TOTAL_MR_RECEIPT` double DEFAULT NULL,
  `SUB_TOTAL_MR_EV` double DEFAULT NULL,
  `REC_TOTAL_MR_WITH_VAT` double DEFAULT NULL,
  `REC_TOTAL_MR_ONLY_VAT` double DEFAULT NULL,
  `UNIT_PRICE_GBP_EV` double DEFAULT NULL,
  `UNIT_VAT_GBP` double DEFAULT NULL,
  `LINE_TOTAL_VAT_GBP` double DEFAULT NULL,
  `SUB_TOTAL_GBP_RECEIPT` double DEFAULT NULL,
  `SUB_TOTAL_GBP_EV` double DEFAULT NULL,
  `REC_TOTAL_GBP_WITH_VAT` double DEFAULT NULL,
  `REC_TOTAL_GBP_ONLY_VAT` double DEFAULT NULL,
  `UNIT_PRICE_AC_EV` double DEFAULT NULL,
  `UNIT_VAT_AC` double DEFAULT NULL,
  `LINE_TOTAL_VAT_AC` double DEFAULT NULL,
  `SUB_TOTAL_AC_RECEIPT` double DEFAULT NULL,
  `SUB_TOTAL_AC_EV` double DEFAULT NULL,
  `REC_TOTAL_AC_WITH_VAT` double DEFAULT NULL,
  `REC_TOTAL_AC_ONLY_VAT` double DEFAULT NULL,
  `QTY` int(11) NOT NULL,
  `RECIEVED_QTY` int(11) NOT NULL,
  `FAULTY_QTY` int(11) NOT NULL,
  `F_VAT_CLASS_NO` int(11) DEFAULT NULL,
  `VAT_RATE` int(11) DEFAULT NULL,
  `CURRENCY` varchar(20) DEFAULT NULL,
  `SERIAL_NO` varchar(2000) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prc_stock_in_details` (`CODE`),
  KEY `fk_PRC_STOCK_IN_DETAILS_ACC_VAT_CLASS` (`F_VAT_CLASS_NO`),
  KEY `fk_PRC_STOCK_IN_DETAILS_PRD_VARIANT_SETUP` (`F_PRD_VARIANT_NO`),
  KEY `fk_PRC_STOCK_IN_DETAILS_PRC_STOCK_IN` (`F_PRC_STOCK_IN`),
  CONSTRAINT `fk_PRC_STOCK_IN_DETAILS_ACC_VAT_CLASS` FOREIGN KEY (`F_VAT_CLASS_NO`) REFERENCES `ACC_VAT_CLASS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRC_STOCK_IN_DETAILS_PRC_STOCK_IN` FOREIGN KEY (`F_PRC_STOCK_IN`) REFERENCES `PRC_STOCK_IN` (`PK_NO`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRC_VENDORS` */

DROP TABLE IF EXISTS `PRC_VENDORS`;

CREATE TABLE `PRC_VENDORS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `ADDRESS` varchar(200) DEFAULT NULL,
  `PHONE` varchar(100) DEFAULT NULL,
  `F_COUNTRY` int(11) DEFAULT NULL,
  `COUNTRY` varchar(100) DEFAULT NULL,
  `F_ACC_CODE` varchar(100) DEFAULT NULL,
  `ACC_CODE` varchar(100) DEFAULT NULL,
  `HAS_LOYALITY` int(1) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SHOP_NO` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prc_vendors` (`CODE`),
  KEY `fk_PRC_VENDORS_SS_COUNTRY` (`F_COUNTRY`),
  CONSTRAINT `fk_PRC_VENDORS_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_ATTRIBUTE_CHILD` */

DROP TABLE IF EXISTS `PRD_ATTRIBUTE_CHILD`;

CREATE TABLE `PRD_ATTRIBUTE_CHILD` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `VALUE` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_ATTRIBUTE_MASTER` int(11) DEFAULT NULL,
  `ORDER_NO` int(11) DEFAULT NULL,
  `F_SS_CREATED_BY` int(1) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(1) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_attribute_child` (`PK_NO`),
  UNIQUE KEY `u_prd_attribute_child_prd_master` (`F_ATTRIBUTE_MASTER`,`VALUE`),
  CONSTRAINT `fk_PRD_ATTRIBUTE_CHILD_PRD_ATTRIBUTE_MASTER` FOREIGN KEY (`F_ATTRIBUTE_MASTER`) REFERENCES `PRD_ATTRIBUTE_MASTER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=849 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_ATTRIBUTE_MASTER` */

DROP TABLE IF EXISTS `PRD_ATTRIBUTE_MASTER`;

CREATE TABLE `PRD_ATTRIBUTE_MASTER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `TITLE` varchar(300) DEFAULT NULL,
  `SLUG` varchar(200) DEFAULT NULL,
  `ATTRIBUTE_TYPE` int(1) DEFAULT NULL COMMENT '1=Text;2=Dropdown;3=Multiselect;4=Number',
  `IS_ACTIVE` int(1) DEFAULT 1,
  `IS_REQUIRED` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_attribute_master` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=88 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_ATTRIBUTE_RELATIONS` */

DROP TABLE IF EXISTS `PRD_ATTRIBUTE_RELATIONS`;

CREATE TABLE `PRD_ATTRIBUTE_RELATIONS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) DEFAULT NULL,
  `F_ATTRIBUTE_NO` int(11) DEFAULT NULL,
  `F_CATEGORY_NO` int(11) DEFAULT NULL,
  `F_SUBCATEGORY_NO` int(11) DEFAULT NULL,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `F_VARIANT_NO` int(11) DEFAULT NULL,
  `TYPE` int(1) DEFAULT NULL COMMENT '1=CATEGORY;2=SUBCATEGORY;3=MASTER;4=VARIANT',
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(1) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(1) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_attribute_relations` (`PK_NO`),
  KEY `fk_PRD_ATTRIBUTE_RELATIONS_PRD_ATTRIBUTE_MASTER` (`F_ATTRIBUTE_NO`),
  KEY `fk_PRD_ATTRIBUTE_RELATIONS_PRD_CATEGORY` (`F_CATEGORY_NO`),
  KEY `fk_PRD_ATTRIBUTE_RELATIONS_PRD_SUB_CATEGORY` (`F_SUBCATEGORY_NO`),
  KEY `fk_PRD_ATTRIBUTE_RELATIONS_PRD_MASTER_SETUP` (`F_PRD_MASTER_SETUP_NO`),
  KEY `fk_PRD_ATTRIBUTE_RELATIONS_PRD_VARIANT_SETUP` (`F_VARIANT_NO`),
  CONSTRAINT `fk_PRD_ATTRIBUTE_RELATIONS_PRD_ATTRIBUTE_MASTER` FOREIGN KEY (`F_ATTRIBUTE_NO`) REFERENCES `PRD_ATTRIBUTE_MASTER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_PRD_ATTRIBUTE_RELATIONS_PRD_SUB_CATEGORY` FOREIGN KEY (`F_SUBCATEGORY_NO`) REFERENCES `PRD_SUB_CATEGORY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=237 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_BEST_SELL_MASTER` */

DROP TABLE IF EXISTS `PRD_BEST_SELL_MASTER`;

CREATE TABLE `PRD_BEST_SELL_MASTER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `FROM_DATE` date DEFAULT NULL,
  `TO_DATE` date DEFAULT NULL,
  `PDF_PATH` varchar(50) DEFAULT NULL,
  `MAX_VARIANT` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `HAS_CHILD` int(1) DEFAULT 1,
  `F_SHOP_NO` int(5) DEFAULT NULL,
  `SHOP_NAME` varchar(150) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_BEST_SELL_MASTER_DETAIL` */

DROP TABLE IF EXISTS `PRD_BEST_SELL_MASTER_DETAIL`;

CREATE TABLE `PRD_BEST_SELL_MASTER_DETAIL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BEST_SELL_MASTER_NO` int(11) DEFAULT NULL,
  `F_PRD_MASTER_SETUP_NO` int(10) DEFAULT NULL,
  `QTY` int(10) DEFAULT NULL,
  `SELL_AMOUNT` float DEFAULT NULL,
  `ORDER_ID` int(10) DEFAULT NULL,
  `IS_MANUAL` int(1) DEFAULT 0,
  `QTY_MARK` int(11) DEFAULT 0,
  `AMOUNT_MARK` int(11) DEFAULT 0,
  `TOTAL_BEST_SELL_VARIANT` int(11) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `SHOP_NAME` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=58 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_BEST_SELL_VARIANT_DETAIL` */

DROP TABLE IF EXISTS `PRD_BEST_SELL_VARIANT_DETAIL`;

CREATE TABLE `PRD_BEST_SELL_VARIANT_DETAIL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BEST_SELL_MASTER_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(10) DEFAULT NULL,
  `VARIANT_NAME` varchar(100) DEFAULT NULL,
  `QTY` int(10) DEFAULT NULL,
  `SELL_AMOUNT` float DEFAULT NULL,
  `ORDER_ID` int(10) DEFAULT NULL,
  `IS_MANUAL` int(1) DEFAULT 0,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `SHOP_NAME` varchar(155) DEFAULT NULL,
  `F_SHOP_NO` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_BRAND` */

DROP TABLE IF EXISTS `PRD_BRAND`;

CREATE TABLE `PRD_BRAND` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(100) DEFAULT NULL,
  `NAME` varchar(20) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_FEATURE` int(1) DEFAULT 0,
  `BRAND_LOGO` varchar(100) DEFAULT NULL,
  `SLUG` varchar(100) DEFAULT NULL,
  `ORDER_ID` int(5) DEFAULT NULL,
  `BANNER` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_brand_name` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=140 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='Brand Master Setup Table';

/*Table structure for table `PRD_CATEGORY` */

DROP TABLE IF EXISTS `PRD_CATEGORY`;

CREATE TABLE `PRD_CATEGORY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `BN_NAME` varchar(255) DEFAULT NULL,
  `HS_PREFIX` varchar(20) DEFAULT NULL,
  `COMMENTS` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `URL_SLUG` varchar(255) DEFAULT NULL,
  `THUMBNAIL_PATH` varchar(255) DEFAULT NULL,
  `BANNER_PATH` varchar(255) DEFAULT NULL,
  `ICON` varchar(255) DEFAULT NULL,
  `PARENT_ID` int(11) DEFAULT 0,
  `META_TITLE` varchar(50) DEFAULT NULL,
  `META_KEYWARDS` varchar(100) DEFAULT NULL,
  `META_DESCRIPTION` longtext DEFAULT NULL,
  `IS_FEATURE` tinyint(4) DEFAULT 0,
  `IS_POPULAR` int(1) DEFAULT 0,
  `ORDER_ID` int(3) DEFAULT NULL,
  `TOTAL_VARIANT` int(11) NOT NULL DEFAULT 0,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `IS_ADMIN_CREATED` int(1) DEFAULT 1,
  `F_SHOP_USER_NO` int(10) DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  `DELETED_BY` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `CODE` (`CODE`),
  UNIQUE KEY `u_prd_category_name` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=157 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='CATEGORY Master Setup Table';

/*Table structure for table `PRD_FEATURE_CHILD` */

DROP TABLE IF EXISTS `PRD_FEATURE_CHILD`;

CREATE TABLE `PRD_FEATURE_CHILD` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) DEFAULT NULL,
  `VALUE` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_FEATURE_MASTER` int(11) DEFAULT NULL,
  `ORDER_NO` int(11) DEFAULT NULL,
  `F_SS_CREATED_BY` int(1) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(1) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_feature_child_prd_master` (`F_FEATURE_MASTER`,`VALUE`),
  CONSTRAINT `fk_PRD_FEATURE_CHILD_PRD_FEATURE_MASTER` FOREIGN KEY (`F_FEATURE_MASTER`) REFERENCES `PRD_FEATURE_MASTER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_FEATURE_MASTER` */

DROP TABLE IF EXISTS `PRD_FEATURE_MASTER`;

CREATE TABLE `PRD_FEATURE_MASTER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) DEFAULT NULL,
  `TITLE` varchar(300) DEFAULT NULL,
  `SLUG` varchar(300) DEFAULT NULL,
  `FEATURE_TYPE` int(1) DEFAULT NULL COMMENT '1=dropdown;2=radio options;',
  `F_PARENT_NO` int(11) DEFAULT 0,
  `ORDER_NO` int(11) DEFAULT NULL,
  `DESCRIPTION` varchar(255) DEFAULT NULL,
  `IS_COLOR` int(1) DEFAULT 0,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=264 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_FEATURE_RELATIONS` */

DROP TABLE IF EXISTS `PRD_FEATURE_RELATIONS`;

CREATE TABLE `PRD_FEATURE_RELATIONS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) DEFAULT NULL,
  `F_FEATURE_NO` int(11) DEFAULT NULL,
  `F_CATEGORY_NO` int(11) DEFAULT NULL,
  `F_SUBCATEGORY_NO` int(11) DEFAULT NULL,
  `F_MASTER_NO` int(11) DEFAULT NULL,
  `F_VARIANT_NO` int(11) DEFAULT NULL,
  `TYPE` int(1) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(1) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(1) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_feature_relations` (`PK_NO`),
  KEY `fk_PRD_FEATURE_RELATIONS_PRD_FEATURE_MASTER` (`F_FEATURE_NO`),
  KEY `fk_PRD_FEATURE_RELATIONS_PRD_CATEGORY` (`F_CATEGORY_NO`),
  KEY `fk_PRD_FEATURE_RELATIONS_PRD_MASTER_SETUP` (`F_MASTER_NO`),
  KEY `fk_PRD_FEATURE_RELATIONS_PRD_SUB_CATEGORY` (`F_SUBCATEGORY_NO`),
  KEY `fk_PRD_FEATURE_RELATIONS_PRD_VARIANT_SETUP` (`F_VARIANT_NO`),
  CONSTRAINT `fk_PRD_FEATURE_RELATIONS_PRD_FEATURE_MASTER` FOREIGN KEY (`F_FEATURE_NO`) REFERENCES `PRD_FEATURE_MASTER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_PRD_FEATURE_RELATIONS_PRD_SUB_CATEGORY` FOREIGN KEY (`F_SUBCATEGORY_NO`) REFERENCES `PRD_SUB_CATEGORY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=207 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_IMG_LIBRARY` */

DROP TABLE IF EXISTS `PRD_IMG_LIBRARY`;

CREATE TABLE `PRD_IMG_LIBRARY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `IS_MASTER` int(11) DEFAULT NULL,
  `F_FILE_TYPE` int(11) DEFAULT NULL,
  `FILE_EXT` varchar(20) DEFAULT NULL,
  `THUMB_PATH` varchar(200) DEFAULT NULL,
  `RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `SERIAL_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_PRD_IMG_LIBRARY_PRD_MASTER_SETUP` (`F_PRD_MASTER_SETUP_NO`),
  KEY `fk_PRD_IMG_LIBRARY_PRD_VARIANT_SETUP` (`F_PRD_VARIANT_NO`),
  KEY `fk_PRD_IMG_LIBRARY_SS_IMG_FILE_TYPE` (`F_FILE_TYPE`),
  CONSTRAINT `fk_PRD_IMG_LIBRARY_SS_IMG_FILE_TYPE` FOREIGN KEY (`F_FILE_TYPE`) REFERENCES `SS_IMG_FILE_TYPE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3148 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_MASTER_ATTRIBUTE_RELATIONS` */

DROP TABLE IF EXISTS `PRD_MASTER_ATTRIBUTE_RELATIONS`;

CREATE TABLE `PRD_MASTER_ATTRIBUTE_RELATIONS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_ATTRIBUTE_CHILD` varchar(255) DEFAULT NULL,
  `F_ATTRIBUTE_MASTER` int(11) DEFAULT NULL,
  `ATTRIBUTE_TYPE` int(1) DEFAULT NULL COMMENT '1=Text;2=Dropdown;3=Multiselect;4=Number',
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(1) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(1) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_PRD_MASTER_ATTRIBUTE_RELATIONS_PRD_MASTER_SETUP` (`F_PRD_MASTER_SETUP_NO`),
  KEY `fk_PRD_MASTER_ATTRIBUTE_RELATIONS_PRD_ATTRIBUTE_MASTER` (`F_ATTRIBUTE_MASTER`),
  CONSTRAINT `fk_PRD_MASTER_ATTRIBUTE_RELATIONS_PRD_ATTRIBUTE_MASTER` FOREIGN KEY (`F_ATTRIBUTE_MASTER`) REFERENCES `PRD_ATTRIBUTE_MASTER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=810 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_MASTER_CATEGORY_MAP` */

DROP TABLE IF EXISTS `PRD_MASTER_CATEGORY_MAP`;

CREATE TABLE `PRD_MASTER_CATEGORY_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_CATEGORY_ID` int(100) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `GROUP_ID` int(11) DEFAULT 0,
  `IS_SELECTED` tinyint(1) DEFAULT NULL,
  `F_SS_CREATED_BY` int(1) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(1) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `DELETED_BY` int(11) DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=1861 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_MASTER_SETUP` */

DROP TABLE IF EXISTS `PRD_MASTER_SETUP`;

CREATE TABLE `PRD_MASTER_SETUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_SUB_CATEGORY_ID` int(11) DEFAULT NULL,
  `F_PRD_CATEGORY_ID` int(3) DEFAULT NULL,
  `CODE` int(11) DEFAULT NULL,
  `COMPOSITE_CODE` varchar(100) DEFAULT NULL,
  `DEFAULT_NAME` varchar(200) DEFAULT NULL,
  `DEFAULT_NAME_BN` varchar(250) DEFAULT NULL,
  `DEFAULT_CUSTOMS_NAME` varchar(200) DEFAULT NULL,
  `DEFAULT_HS_CODE` varchar(20) DEFAULT NULL,
  `F_BRAND` int(11) DEFAULT NULL,
  `BRAND_NAME` varchar(100) DEFAULT NULL,
  `F_MODEL` int(11) DEFAULT NULL,
  `MODEL_NAME` varchar(100) DEFAULT NULL,
  `F_COLOR_PARENT` int(11) DEFAULT NULL,
  `F_COLOR_PARENT_NAME` varchar(200) DEFAULT NULL,
  `F_SIZE_PARENT` int(11) DEFAULT NULL,
  `F_SIZE_PARENT_NAME` varchar(200) DEFAULT NULL,
  `MKT_CODE` int(4) DEFAULT NULL,
  `MKT_ID_COMPOSITE_CODE_PREFIX` varchar(80) DEFAULT NULL,
  `DEFAULT_PRICE` float DEFAULT NULL,
  `DEFAULT_INSTALLMENT_PRICE` float DEFAULT NULL,
  `IS_BARCODE_BY_MFG` int(11) DEFAULT NULL,
  `PRIMARY_IMG_RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `DEFAULT_NARRATION` varchar(2000) DEFAULT NULL,
  `F_DEFAULT_VAT_CLASS` int(11) DEFAULT NULL,
  `DEFAULT_VAT_AMOUNT_PERCENT` float DEFAULT NULL,
  `DEFAULT_SEA_FREIGHT_CHARGE` float DEFAULT NULL,
  `DEFAULT_AIR_FREIGHT_CHARGE` float DEFAULT NULL,
  `DEFAULT_PREFERRED_SHIPPING_METHOD` enum('AIR','SEA') DEFAULT NULL,
  `DEFAULT_LOCAL_POSTAGE` float DEFAULT NULL,
  `DEFAULT_INTERDISTRICT_POSTAGE` float DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `TOTAL_VARIANT` int(4) DEFAULT 0,
  `IS_APPROVED` int(1) DEFAULT 1,
  `APPROVED_BY` int(4) DEFAULT NULL,
  `APPROVED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `URL_SLUG` varchar(50) DEFAULT NULL,
  `IS_FEATURE` int(1) DEFAULT 0,
  `SEARCH_KEYWORD` varchar(2000) DEFAULT NULL,
  `NEW_ARRIVAL` int(1) DEFAULT NULL,
  `META_TITLE` varchar(200) DEFAULT NULL,
  `META_KEYWARDS` varchar(200) DEFAULT NULL,
  `META_DESCRIPTION` varchar(200) DEFAULT NULL,
  `MAX_ORDER` int(3) DEFAULT NULL,
  `NEED_APPROVAL` text DEFAULT NULL,
  `SHORT_DESCRIPTION_EN` varchar(2000) DEFAULT NULL,
  `SHORT_DESCRIPTION_BN` varchar(2000) DEFAULT NULL,
  `LONG_DESCRIPTION_EN` varchar(2000) DEFAULT NULL,
  `LONG_DESCRIPTION_BN` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_PRD_MASTER_SETUP_cc` (`CODE`,`F_PRD_SUB_CATEGORY_ID`),
  UNIQUE KEY `u_PRD_MASTER_SETUP` (`COMPOSITE_CODE`),
  UNIQUE KEY `u_prd_master_setup_brand_model_code` (`MKT_CODE`,`F_BRAND`,`F_MODEL`),
  UNIQUE KEY `u_prd_master_setup_brand_model` (`F_BRAND`,`F_MODEL`,`DEFAULT_NAME`),
  UNIQUE KEY `u_prd_master_setup_name` (`F_PRD_SUB_CATEGORY_ID`,`DEFAULT_NAME`,`F_BRAND`,`F_MODEL`),
  UNIQUE KEY `u_prd_master_setup_url_slug` (`URL_SLUG`),
  KEY `fk_PRD_MASTER_SETUP_PRD_SUB_CATEGORY` (`F_PRD_SUB_CATEGORY_ID`),
  KEY `fk_PRD_MASTER_SETUP_PRD_BRAND` (`F_BRAND`),
  KEY `fk_PRD_MASTER_SETUP_PRD_MODEL` (`F_MODEL`),
  KEY `fk_PRD_MASTER_SETUP_ACC_VAT_CLASS` (`F_DEFAULT_VAT_CLASS`),
  KEY `master_name` (`DEFAULT_NAME`),
  KEY `W_PRIMARY_IMG_RELATIVE_PATH` (`PRIMARY_IMG_RELATIVE_PATH`),
  KEY `W_URL_SLUG` (`URL_SLUG`),
  KEY `W_MASTER_PRD_SUB_CATEGORY_ID` (`F_PRD_SUB_CATEGORY_ID`),
  KEY `W_MASTER_PRD_CATEGORY_ID` (`F_PRD_CATEGORY_ID`),
  CONSTRAINT `fk_PRD_MASTER_SETUP_ACC_VAT_CLASS` FOREIGN KEY (`F_DEFAULT_VAT_CLASS`) REFERENCES `ACC_VAT_CLASS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_MASTER_SETUP_PRD_BRAND` FOREIGN KEY (`F_BRAND`) REFERENCES `PRD_BRAND` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_MASTER_SETUP_PRD_MODEL` FOREIGN KEY (`F_MODEL`) REFERENCES `PRD_MODEL` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_MASTER_SETUP_PRD_SUB_CATEGORY` FOREIGN KEY (`F_PRD_SUB_CATEGORY_ID`) REFERENCES `PRD_SUB_CATEGORY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=545 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_MODEL` */

DROP TABLE IF EXISTS `PRD_MODEL`;

CREATE TABLE `PRD_MODEL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=512 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='Model Master Setup Table';

/*Table structure for table `PRD_NA_MASTER` */

DROP TABLE IF EXISTS `PRD_NA_MASTER`;

CREATE TABLE `PRD_NA_MASTER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `FROM_DATE` date DEFAULT NULL,
  `TO_DATE` date DEFAULT NULL,
  `PDF_PATH` varchar(50) DEFAULT NULL,
  `MAX_VARIANT` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `HAS_CHILD` int(1) DEFAULT 1,
  `F_SHOP_NO` int(5) DEFAULT NULL,
  `SHOP_NAME` varchar(150) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='PRD_NEW_ARIVAL_MASTER';

/*Table structure for table `PRD_NA_MASTER_DETAIL` */

DROP TABLE IF EXISTS `PRD_NA_MASTER_DETAIL`;

CREATE TABLE `PRD_NA_MASTER_DETAIL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_NA_MASTER_NO` int(11) DEFAULT NULL,
  `F_PRD_MASTER_SETUP_NO` int(10) DEFAULT NULL,
  `QTY` int(10) DEFAULT NULL,
  `SELL_AMOUNT` float DEFAULT NULL,
  `ORDER_ID` int(10) DEFAULT NULL,
  `IS_MANUAL` int(1) DEFAULT 0,
  `QTY_MARK` int(11) DEFAULT 0,
  `AMOUNT_MARK` int(11) DEFAULT 0,
  `TOTAL_NA_VARIANT` int(11) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `SHOP_NAME` varchar(155) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='PRD_NEW_ARIVAL_MASTER_DETAIL';

/*Table structure for table `PRD_NA_VARIANT_DETAIL` */

DROP TABLE IF EXISTS `PRD_NA_VARIANT_DETAIL`;

CREATE TABLE `PRD_NA_VARIANT_DETAIL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_NA_MASTER_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(10) DEFAULT NULL,
  `VARIANT_NAME` varchar(100) DEFAULT NULL,
  `QTY` int(10) DEFAULT NULL,
  `SELL_AMOUNT` float DEFAULT NULL,
  `ORDER_ID` int(10) DEFAULT NULL,
  `IS_MANUAL` int(1) DEFAULT 0,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `VARIANT_CREATED_ON` datetime DEFAULT NULL,
  `F_SHOP_NO` int(10) DEFAULT NULL,
  `SHOP_NAME` varchar(155) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='PRD_NEW_ARIVAL_VARIANT_DETAIL';

/*Table structure for table `PRD_SHOP_CATEGORY_MAP` */

DROP TABLE IF EXISTS `PRD_SHOP_CATEGORY_MAP`;

CREATE TABLE `PRD_SHOP_CATEGORY_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_CATEGORY_NO` int(10) DEFAULT NULL,
  `F_SHOP_NO` int(10) DEFAULT NULL,
  `PARENT_ID` int(11) DEFAULT 0,
  `IS_ADMIN_CREATED` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `ORDER_ID` int(10) DEFAULT 1,
  `IS_FEATURE` int(1) DEFAULT 0,
  `IS_POPULAR` int(1) DEFAULT 0,
  `DELETED_AT` datetime DEFAULT NULL,
  `DELETED_BY` int(11) DEFAULT NULL,
  `IS_ACTIVE` int(2) DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_shop_category_map` (`F_SHOP_NO`,`F_CATEGORY_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='THIS TABLE IS USED FOR MAPING SHOP WITH PRD_CATEGORY';

/*Table structure for table `PRD_SHOP_MASTER_MAP` */

DROP TABLE IF EXISTS `PRD_SHOP_MASTER_MAP`;

CREATE TABLE `PRD_SHOP_MASTER_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_SETUP_NO` int(10) DEFAULT NULL,
  `F_SHOP_NO` int(10) DEFAULT NULL,
  `IS_ADMIN_CREATED` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_master_shop` (`F_PRD_MASTER_SETUP_NO`,`F_SHOP_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=471 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='THIS TABLE IS USED FOR MAPING SHOP WITH PRD_VARIANT_SETUP';

/*Table structure for table `PRD_SHOP_VARIANT_MAP` */

DROP TABLE IF EXISTS `PRD_SHOP_VARIANT_MAP`;

CREATE TABLE `PRD_SHOP_VARIANT_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_SETUP_NO` int(10) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(10) DEFAULT NULL,
  `F_SHOP_NO` int(10) DEFAULT NULL,
  `IS_ADMIN_CREATED` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_variant_shop` (`F_PRD_VARIANT_NO`,`F_SHOP_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=584 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_SPECIAL_CATEGORY` */

DROP TABLE IF EXISTS `PRD_SPECIAL_CATEGORY`;

CREATE TABLE `PRD_SPECIAL_CATEGORY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) DEFAULT NULL,
  `BN_NAME` varchar(200) DEFAULT NULL,
  `URL_SLUG` varchar(200) DEFAULT NULL,
  `THUMBNAIL_PATH` varchar(255) DEFAULT NULL,
  `BANNER_PATH` varchar(255) DEFAULT NULL,
  `ICON` varchar(255) DEFAULT NULL,
  `META_TITLE` varchar(255) DEFAULT NULL,
  `META_KEYWARDS` varchar(500) DEFAULT NULL,
  `META_DESCRIPTION` varchar(500) DEFAULT NULL,
  `DESCRIPTION` varchar(500) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `IS_SLUG_UPDATED` tinyint(1) DEFAULT 0,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `ORDER_ID` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_SUB_CATEGORY` */

DROP TABLE IF EXISTS `PRD_SUB_CATEGORY`;

CREATE TABLE `PRD_SUB_CATEGORY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=82 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='SUB_CATEGORY Master Setup Table';

/*Table structure for table `PRD_VARIANT_SETUP` */

DROP TABLE IF EXISTS `PRD_VARIANT_SETUP`;

CREATE TABLE `PRD_VARIANT_SETUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `CODE` int(4) DEFAULT NULL,
  `BARCODE` varchar(100) DEFAULT NULL,
  `COMPOSITE_CODE` varchar(160) DEFAULT NULL,
  `MRK_ID_COMPOSITE_CODE` varchar(124) DEFAULT NULL,
  `MKT_CODE` int(4) DEFAULT NULL,
  `URL_SLUG` varchar(255) DEFAULT NULL,
  `VARIANT_NAME` varchar(200) DEFAULT NULL,
  `VARIANT_NAME_BN` varchar(200) DEFAULT NULL,
  `VARIANT_CUSTOMS_NAME` varchar(200) DEFAULT NULL,
  `F_SIZE_PARENT` int(11) DEFAULT NULL,
  `F_SIZE_PARENT_NAME` varchar(200) DEFAULT NULL,
  `F_SIZE_NO` int(16) DEFAULT NULL,
  `SIZE_NAME` varchar(100) DEFAULT NULL,
  `F_COLOR_PARENT` int(11) DEFAULT NULL,
  `F_COLOR_PARENT_NAME` varchar(200) DEFAULT NULL,
  `F_COLOR_NO` int(11) DEFAULT NULL,
  `COLOR_NAME` varchar(100) DEFAULT NULL,
  `QTY` int(11) DEFAULT NULL,
  `IS_BARCODE_BY_MFG` int(11) DEFAULT NULL,
  `F_PRIMARY_IMG_VARIANT_ID` int(11) DEFAULT NULL,
  `THUMB_PATH` varchar(255) DEFAULT NULL,
  `PRIMARY_IMG_RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `REGULAR_PRICE` float DEFAULT NULL,
  `SPECIAL_PRICE` float DEFAULT NULL,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `WHOLESALE_PRICE` float DEFAULT NULL,
  `F_VAT_CLASS` int(11) DEFAULT NULL,
  `VAT_AMOUNT_PERCENT` float DEFAULT NULL,
  `IS_SELLER_PROGRAM_ENABLED` int(11) DEFAULT NULL,
  `NARRATION` text DEFAULT NULL,
  `NARRATION_BN` text DEFAULT NULL,
  `SHORT_NARRATION` text DEFAULT NULL,
  `SHORT_NARRATION_BN` text DEFAULT NULL,
  `KEYWORD_SEARCH` varchar(4000) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `META_TITLE` varchar(255) DEFAULT NULL,
  `META_KEYWARDS` varchar(255) DEFAULT NULL,
  `META_DESCRIPTION` varchar(255) DEFAULT NULL,
  `PROMOTIONAL_MESSAGE` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `IS_FEATURE` enum('1','0') DEFAULT NULL,
  `NEW_ARRIVAL` enum('1','0') DEFAULT NULL,
  `IS_APPROVED` int(4) DEFAULT 1,
  `NEED_APPROVAL` text DEFAULT NULL,
  `APPROVED_BY` int(4) DEFAULT NULL,
  `APPROVED_ON` datetime DEFAULT NULL,
  `ORDER_ID` int(5) DEFAULT NULL,
  `MAX_ORDER` int(3) DEFAULT 0,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_PRD_VARIANT_SETUP` (`COMPOSITE_CODE`),
  UNIQUE KEY `u_prd_variant_setup_01` (`F_PRD_MASTER_SETUP_NO`,`CODE`),
  UNIQUE KEY `u_prd_variant_setup_mkt_id` (`MRK_ID_COMPOSITE_CODE`),
  UNIQUE KEY `u_prd_variant_setup_mkt_code` (`MKT_CODE`,`F_PRD_MASTER_SETUP_NO`),
  UNIQUE KEY `u_prd_variant_setup_bc` (`BARCODE`),
  UNIQUE KEY `u_prd_variant_setup_color_size` (`F_PRD_MASTER_SETUP_NO`,`F_SIZE_NO`,`F_COLOR_NO`,`MRK_ID_COMPOSITE_CODE`),
  KEY `fk_PRD_VARIANT_SETUP_PRD_SIZE` (`F_SIZE_NO`),
  KEY `fk_PRD_VARIANT_SETUP_PRD_COLOR` (`F_COLOR_NO`),
  KEY `fk_PRD_VARIANT_SETUP_ACC_VAT_CLASS` (`F_VAT_CLASS`),
  KEY `fk_PRD_VARIANT_SETUP_PRD_MASTER_SETUP` (`F_PRD_MASTER_SETUP_NO`),
  KEY `W_VARIANT_NAME` (`VARIANT_NAME`),
  KEY `W_REGULAR_PRICE` (`REGULAR_PRICE`),
  KEY `W_PRD_URL_SLUG` (`URL_SLUG`),
  KEY `W_PRD_PRIMARY_IMG_RELATIVE_PATH` (`PRIMARY_IMG_RELATIVE_PATH`),
  KEY `W_PRD_THUMB_PATH` (`THUMB_PATH`),
  KEY `W_PRD_INSTALLMENT_PRICE` (`INSTALLMENT_PRICE`),
  KEY `W_PRD_F_SIZE_NO` (`F_SIZE_NO`),
  KEY `W_PRD_F_COLOR_NO` (`F_COLOR_NO`),
  CONSTRAINT `fk_PRD_VARIANT_SETUP_ACC_VAT_CLASS` FOREIGN KEY (`F_VAT_CLASS`) REFERENCES `ACC_VAT_CLASS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=647 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_VARIANT_SPCATEGORY_MAP` */

DROP TABLE IF EXISTS `PRD_VARIANT_SPCATEGORY_MAP`;

CREATE TABLE `PRD_VARIANT_SPCATEGORY_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_SPCATEGORY` int(100) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT` int(11) DEFAULT NULL,
  `F_SS_CREATED_BY` int(1) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(1) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_variant_prd_special_category` (`F_PRD_SPCATEGORY`,`F_PRD_VARIANT`),
  KEY `fk_PRD_VARIANT_SPCATEGORY_MAP_PRD_MASTER_SETUP` (`F_PRD_MASTER_SETUP_NO`),
  KEY `fk_PRD_VARIANT_SPCATEGORY_MAP_PRD_VARIANT_SETUP` (`F_PRD_VARIANT`),
  CONSTRAINT `fk_PRD_VARIANT_SPCATEGORY_MAP_PRD_MASTER_SETUP` FOREIGN KEY (`F_PRD_MASTER_SETUP_NO`) REFERENCES `PRD_MASTER_SETUP` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_PRD_VARIANT_SPCATEGORY_MAP_PRD_SPECIAL_CATEGORY` FOREIGN KEY (`F_PRD_SPCATEGORY`) REFERENCES `PRD_SPECIAL_CATEGORY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_PRD_VARIANT_SPCATEGORY_MAP_PRD_VARIANT_SETUP` FOREIGN KEY (`F_PRD_VARIANT`) REFERENCES `PRD_VARIANT_SETUP` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;

/*Table structure for table `PRD_VARIANT_STOCK_QTY` */

DROP TABLE IF EXISTS `PRD_VARIANT_STOCK_QTY`;

CREATE TABLE `PRD_VARIANT_STOCK_QTY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `TOTAL_FREE_STOCK` int(5) DEFAULT 0,
  `TOTAL_STOCK` int(11) NOT NULL DEFAULT 0,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_variant_no_shop_no` (`F_PRD_VARIANT_NO`,`F_SHOP_NO`),
  KEY `W_VST_PRD_VARIANT_NO` (`F_PRD_VARIANT_NO`),
  KEY `W_VST_TOTAL_FREE_STOCK` (`TOTAL_FREE_STOCK`)
) ENGINE=InnoDB AUTO_INCREMENT=1167 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `R` */

DROP TABLE IF EXISTS `R`;

CREATE TABLE `R` (
  `R` varchar(200) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `S` */

DROP TABLE IF EXISTS `S`;

CREATE TABLE `S` (
  `S` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_LOGIN_LOG` */

DROP TABLE IF EXISTS `SA_LOGIN_LOG`;

CREATE TABLE `SA_LOGIN_LOG` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_USER_NO` int(11) NOT NULL,
  `TOKEN` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `CLIENT` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `IP_ADDRESS` varchar(20) DEFAULT NULL,
  `COUNTRY` varchar(20) DEFAULT NULL,
  `TIMEZONE` varchar(100) DEFAULT NULL,
  `OS` varchar(50) DEFAULT NULL,
  `SESSION_ID` varchar(255) DEFAULT NULL,
  `CITY` varchar(20) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT current_timestamp(),
  `USER_TYPE` tinyint(1) DEFAULT 1 COMMENT '1=admin;2=seller',
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=365 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_PERMISSION_GROUP` */

DROP TABLE IF EXISTS `SA_PERMISSION_GROUP`;

CREATE TABLE `SA_PERMISSION_GROUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `STATUS` tinyint(4) NOT NULL DEFAULT 0,
  `GROUP_FOR` int(1) DEFAULT 1,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  `ORDER_ID` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=108 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_PERMISSION_GROUP_DTL` */

DROP TABLE IF EXISTS `SA_PERMISSION_GROUP_DTL`;

CREATE TABLE `SA_PERMISSION_GROUP_DTL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `DISPLAY_NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `F_PERMISSION_GROUP_NO` int(11) NOT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=236 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_ROLE` */

DROP TABLE IF EXISTS `SA_ROLE`;

CREATE TABLE `SA_ROLE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `GROUP_FOR` int(1) DEFAULT 1,
  `USER_TYPE` int(1) DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_ROLE_DTL` */

DROP TABLE IF EXISTS `SA_ROLE_DTL`;

CREATE TABLE `SA_ROLE_DTL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `PERMISSIONS` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `F_ROLE_NO` int(11) NOT NULL,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_TOKEN` */

DROP TABLE IF EXISTS `SA_TOKEN`;

CREATE TABLE `SA_TOKEN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_USER_NO` int(11) NOT NULL,
  `TOKEN` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `CLIENT` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `IP_ADDRESS` varchar(20) DEFAULT NULL,
  `IS_EXPIRE` int(11) NOT NULL DEFAULT 0,
  `STARTED_AT` datetime NOT NULL,
  `EXPIRE_AT` datetime NOT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_USER` */

DROP TABLE IF EXISTS `SA_USER`;

CREATE TABLE `SA_USER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `DESIGNATION` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `EMAIL` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `MOBILE_NO` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `PASSWORD` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `GENDER` int(11) DEFAULT 1,
  `DOB` date DEFAULT NULL,
  `FACEBOOK_ID` int(20) DEFAULT NULL,
  `GOOGLE_ID` int(20) DEFAULT NULL,
  `PROFILE_PIC` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `PROFILE_PIC_URL` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `PIC_MIME_TYPE` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `ACTIVATION_CODE` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `ACTIVATION_CODE_EXPIRE` datetime DEFAULT NULL,
  `IS_FIRST_LOGIN` int(11) NOT NULL DEFAULT 1,
  `USER_TYPE` int(2) NOT NULL DEFAULT 0 COMMENT '1 = admin 10=shop user, 20 = delivery man',
  `CAN_LOGIN` int(11) NOT NULL DEFAULT 1,
  `REMEMBER_TOKEN` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 1,
  `F_PARENT_USER_ID` int(11) DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `IS_ACTIVE` int(1) NOT NULL DEFAULT 1,
  `SHOP_NAME` varchar(155) DEFAULT NULL,
  `SHOP_ID` int(11) DEFAULT 0,
  `MIN_ORDER_AMOUNT` float DEFAULT 200,
  `MAX_ORDER_AMOUNT` float DEFAULT 1000000,
  `ADDRESS` varchar(255) DEFAULT NULL,
  `MONTHLY_SALARY` float DEFAULT NULL,
  `PER_DELIVERY_COMM` float DEFAULT NULL,
  `JOINING_DATE` date DEFAULT NULL,
  `ACCESS_TOKEN` text DEFAULT NULL,
  `TOKEN_EXPIRES_AT` datetime DEFAULT NULL,
  `TOKEN_TYPE` varchar(20) DEFAULT NULL,
  `PLATFORM` varchar(30) DEFAULT NULL,
  `IP_ADDRESS` varchar(20) DEFAULT NULL,
  `BROWSER` varchar(15) DEFAULT NULL,
  `IS_TOKEN_ACTIVE` tinyint(1) DEFAULT NULL,
  `BIRTH_DATE` date DEFAULT NULL,
  `FCM_USER_TOKEN` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=109 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_USER_GROUP` */

DROP TABLE IF EXISTS `SA_USER_GROUP`;

CREATE TABLE `SA_USER_GROUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `GROUP_NAME` varchar(255) CHARACTER SET utf8mb3 NOT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  `GROUP_FOR` int(1) DEFAULT 1 COMMENT '1=ADMIN;2=SELLER',
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_USER_GROUP_ROLE` */

DROP TABLE IF EXISTS `SA_USER_GROUP_ROLE`;

CREATE TABLE `SA_USER_GROUP_ROLE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_USER_GROUP_NO` int(11) NOT NULL,
  `F_ROLE_NO` int(11) NOT NULL,
  `GRP_CUSTOM_PERMISSION` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_USER_GROUP_USERS` */

DROP TABLE IF EXISTS `SA_USER_GROUP_USERS`;

CREATE TABLE `SA_USER_GROUP_USERS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_GROUP_NO` int(11) DEFAULT 0,
  `F_USER_NO` int(11) DEFAULT 0,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_USER_NOTIFICATION` */

DROP TABLE IF EXISTS `SA_USER_NOTIFICATION`;

CREATE TABLE `SA_USER_NOTIFICATION` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(200) DEFAULT NULL,
  `BODY` text DEFAULT NULL,
  `IMAGE` varchar(200) DEFAULT NULL,
  `NOTIFICATION_TYPE` varchar(20) DEFAULT NULL,
  `MESSAGE_ID` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_USER_NO` int(11) DEFAULT NULL,
  `STATUS` int(2) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='user & delivery man firebase notification';

/*Table structure for table `SC_BOX` */

DROP TABLE IF EXISTS `SC_BOX`;

CREATE TABLE `SC_BOX` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) NOT NULL,
  `BOX_NO` int(11) NOT NULL,
  `F_BOX_USER_NO` int(11) DEFAULT NULL,
  `USER_NAME` varchar(45) DEFAULT NULL,
  `BOX_STATUS` int(11) DEFAULT NULL,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `ITEM_COUNT` int(11) DEFAULT 0,
  `WIDTH_CM` int(11) DEFAULT NULL,
  `LENGTH_CM` int(11) DEFAULT NULL,
  `HEIGHT_CM` int(11) DEFAULT NULL,
  `WEIGHT_KG` float DEFAULT NULL,
  `F_MERCHANT_NO` int(11) DEFAULT 0,
  `PREFEX` varchar(3) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_box` (`CODE`),
  UNIQUE KEY `u_sc_box_no` (`BOX_NO`),
  KEY `fk_SC_BOX_INV_WAREHOUSE` (`F_INV_WAREHOUSE_NO`),
  CONSTRAINT `fk_SC_BOX_INV_WAREHOUSE` FOREIGN KEY (`F_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=989 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_BOX_INV_STOCK` */

DROP TABLE IF EXISTS `SC_BOX_INV_STOCK`;

CREATE TABLE `SC_BOX_INV_STOCK` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BOX_NO` int(11) NOT NULL,
  `F_INV_STOCK_NO` int(11) NOT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_box_inv_stock` (`F_BOX_NO`,`F_INV_STOCK_NO`),
  KEY `fk_SC_BOX_INV_STOCK_INV_STOCK` (`F_INV_STOCK_NO`),
  CONSTRAINT `fk_SC_BOX_INV_STOCK_INV_STOCK` FOREIGN KEY (`F_INV_STOCK_NO`) REFERENCES `INV_STOCK` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_BOX_INV_STOCK_SC_BOX` FOREIGN KEY (`F_BOX_NO`) REFERENCES `SC_BOX` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=16669 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_BOX_TYPE` */

DROP TABLE IF EXISTS `SC_BOX_TYPE`;

CREATE TABLE `SC_BOX_TYPE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `TYPE` varchar(2) DEFAULT NULL,
  `WIDTH_CM` int(11) DEFAULT NULL,
  `LENGTH_CM` int(11) DEFAULT NULL,
  `HEIGHT_CM` int(11) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=4138 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_CARRIER` */

DROP TABLE IF EXISTS `SC_CARRIER`;

CREATE TABLE `SC_CARRIER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(100) DEFAULT NULL,
  `URL` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_carrier` (`CODE`),
  UNIQUE KEY `u_sc_carrier_nm` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_COURIER` */

DROP TABLE IF EXISTS `SC_COURIER`;

CREATE TABLE `SC_COURIER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `COURIER_NAME` varchar(100) DEFAULT NULL,
  `COURIER_DUE` float DEFAULT NULL,
  `URLS` varchar(100) DEFAULT NULL,
  `ORDER_ID` int(2) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_courier` (`COURIER_NAME`),
  UNIQUE KEY `u_sc_courier_code` (`CODE`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_MERCHANT_BILL` */

DROP TABLE IF EXISTS `SC_MERCHANT_BILL`;

CREATE TABLE `SC_MERCHANT_BILL` (
  `PK_NO` int(10) NOT NULL AUTO_INCREMENT,
  `F_SHIPMENT_NO` varchar(50) DEFAULT NULL,
  `SHIPMENT_NO` int(11) DEFAULT NULL,
  `CODE` int(10) DEFAULT NULL,
  `GENERATE_DATE` datetime DEFAULT NULL,
  `BILL_DATE` date DEFAULT NULL,
  `AMOUNT` double DEFAULT NULL,
  `DISCOUNT` double DEFAULT NULL,
  `NET_AMOUNT` double DEFAULT NULL,
  `F_MERCHANT_NO` int(11) DEFAULT NULL,
  `SUBMIT_DATE` int(11) DEFAULT NULL,
  `DUE_AMOUNT` double DEFAULT NULL,
  `PAID_AMOUNT` double DEFAULT NULL,
  `STATUS` int(11) DEFAULT NULL,
  `F_SS_CREATED_BY` int(11) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(11) DEFAULT NULL,
  `TO_DATE` date DEFAULT NULL,
  `FROM_DATE` date DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_MERCHANT_BILL_DETAILS` */

DROP TABLE IF EXISTS `SC_MERCHANT_BILL_DETAILS`;

CREATE TABLE `SC_MERCHANT_BILL_DETAILS` (
  `PK_NO` int(10) NOT NULL AUTO_INCREMENT,
  `F_MERCHANT_BILL_NO` int(10) DEFAULT NULL,
  `F_MERCHANT_NO` int(11) DEFAULT NULL,
  `F_MER_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_SS_CREATED_BY` int(11) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_ORDER_CONSIGNMENT` */

DROP TABLE IF EXISTS `SC_ORDER_CONSIGNMENT`;

CREATE TABLE `SC_ORDER_CONSIGNMENT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_ORDER_DISPATCH_NO` int(11) DEFAULT NULL,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `COURIER_TRACKING_NO` varchar(30) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `POSTAGE_COST` float DEFAULT NULL,
  `IS_POSTAGE_USED` int(11) DEFAULT NULL,
  `F_COURIER_BILL_NO` int(11) DEFAULT NULL,
  `SHIPMENT_KEY` varchar(255) DEFAULT NULL,
  `CONSIGNMENT_LINK` varchar(255) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_COURIER_NO` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `COURIER_TRACKING_NO` (`COURIER_TRACKING_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=1003 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_ORDER_DISPATCH` */

DROP TABLE IF EXISTS `SC_ORDER_DISPATCH`;

CREATE TABLE `SC_ORDER_DISPATCH` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `DISPATCH_NO` varchar(40) DEFAULT NULL,
  `F_COURIER_NO` int(11) DEFAULT NULL,
  `COURIER_NAME` varchar(200) DEFAULT NULL,
  `F_DISPATCH_BY_USER_NO` int(11) DEFAULT NULL,
  `DISPATCH_USER_NAME` varchar(40) DEFAULT NULL,
  `DISPATCH_DATE` datetime DEFAULT NULL,
  `DISPATCH_ACK_STATUS` int(11) DEFAULT NULL,
  `ACK_TIME` datetime DEFAULT NULL,
  `POSTAGE_COST` float DEFAULT NULL,
  `FROM_ADDRESS_NO` int(11) DEFAULT NULL,
  `TO_ADDRESS_NO` int(11) DEFAULT NULL,
  `FROM_NAME` varchar(200) DEFAULT NULL,
  `FROM_TEL_NO` varchar(20) DEFAULT NULL,
  `FROM_ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `FROM_ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `FROM_ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `FROM_ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `FROM_STATE` varchar(50) DEFAULT NULL,
  `FROM_CITY` varchar(50) DEFAULT NULL,
  `FROM_POST_CODE` varchar(20) DEFAULT NULL,
  `FROM_F_COUNTRY_NO` int(11) DEFAULT NULL,
  `FROM_COUNTRY` varchar(50) DEFAULT NULL,
  `TO_NAME` varchar(200) DEFAULT NULL,
  `TO_TEL_NO` varchar(20) DEFAULT NULL,
  `TO_ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `TO_ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `TO_ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `TO_ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `TO_STATE` varchar(50) DEFAULT NULL,
  `TO_CITY` varchar(50) DEFAULT NULL,
  `TO_POST_CODE` varchar(20) DEFAULT NULL,
  `TO_F_COUNTRY_NO` int(11) DEFAULT NULL,
  `TO_COUNTRY` varchar(50) DEFAULT NULL,
  `COURIER_TRACKING_NO` varchar(50) DEFAULT NULL,
  `COLLECTED_BY` varchar(50) DEFAULT NULL,
  `CREATED_AT` datetime DEFAULT NULL,
  `IS_DISPATHED` int(2) DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_order_dispatch` (`CODE`),
  UNIQUE KEY `u_sc_order_dispatch_dis` (`DISPATCH_NO`),
  UNIQUE KEY `u_sc_order_tracking_no` (`F_ORDER_NO`,`COURIER_TRACKING_NO`),
  KEY `fk_SC_ORDER_DISPATCH_SLS_ORDER` (`F_ORDER_NO`),
  KEY `fk_SC_ORDER_DISPATCH_SC_COURIER` (`F_COURIER_NO`),
  CONSTRAINT `fk_SC_ORDER_DISPATCH_SC_COURIER` FOREIGN KEY (`F_COURIER_NO`) REFERENCES `SC_COURIER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_ORDER_DISPATCH_SLS_ORDER` FOREIGN KEY (`F_ORDER_NO`) REFERENCES `SLS_ORDER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1111 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_ORDER_DISPATCH_DETAILS` */

DROP TABLE IF EXISTS `SC_ORDER_DISPATCH_DETAILS`;

CREATE TABLE `SC_ORDER_DISPATCH_DETAILS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SC_ORDER_DISPATCH_NO` int(11) DEFAULT NULL,
  `F_BOOKING_DETAILS_NO` int(11) DEFAULT NULL,
  `COURIER_TRACKING_NO` varchar(20) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `POSTAGE_COST` float DEFAULT NULL,
  `IS_POSTAGE_USED` int(11) DEFAULT NULL,
  `F_AC_COURIER_BILL_NO` int(11) DEFAULT NULL,
  `SHIPMENT_KEY` varchar(255) DEFAULT NULL,
  `CONSIGNMENT_LINK` varchar(255) DEFAULT NULL,
  `SHIPMENT_CREATED_AT` datetime DEFAULT NULL,
  `F_ORDER_CONSIGNMENT_NO` int(11) DEFAULT NULL,
  `IS_DISPATHED` int(2) DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_order_dispatch_details` (`CODE`),
  UNIQUE KEY `u_f_booking_details_no_courier_track_no` (`F_BOOKING_DETAILS_NO`,`COURIER_TRACKING_NO`),
  KEY `fk_SC_ORDER_DISPATCH_DETAILS_SC_ORDER_DISPATCH` (`F_SC_ORDER_DISPATCH_NO`),
  CONSTRAINT `fk_SC_ORDER_DISPATCH_DETAILS_SC_ORDER_DISPATCH` FOREIGN KEY (`F_SC_ORDER_DISPATCH_NO`) REFERENCES `SC_ORDER_DISPATCH` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1309 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_ORDER_ITEM_RETURN` */

DROP TABLE IF EXISTS `SC_ORDER_ITEM_RETURN`;

CREATE TABLE `SC_ORDER_ITEM_RETURN` (
  `PK_NO` int(10) NOT NULL AUTO_INCREMENT,
  `F_BOOKING_NO` int(10) DEFAULT NULL,
  `F_BOOKING_DETAILS_NO` int(10) DEFAULT NULL,
  `F_REQUEST_BY` int(11) DEFAULT NULL,
  `REQUEST_AT` datetime DEFAULT NULL,
  `RETURN_DATE` date DEFAULT NULL,
  `F_APPROVED_BY` int(11) DEFAULT NULL,
  `STATUS` int(11) DEFAULT 0 COMMENT '0=pending,1=approved,2=pending',
  `APPROVED_AT` datetime DEFAULT NULL,
  `APPROVED_BY` int(11) DEFAULT NULL,
  `REFUND_AMT` float DEFAULT NULL,
  `POSTAGE_AMT` float DEFAULT NULL,
  `PENALTY_AMT` float DEFAULT NULL,
  `CREDIT_AMT` float DEFAULT NULL,
  `RETURN_NOTE` varchar(500) DEFAULT NULL,
  `PHOTO_PATH` varchar(100) DEFAULT NULL,
  `PHOTO_EXT` varchar(50) DEFAULT NULL,
  `RETURN_CONDITION` int(1) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(11) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `DENYED_AT` datetime DEFAULT NULL,
  `DENYED_BY` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `SHOP_NAME` varchar(50) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4;

/*Table structure for table `SC_PACKAGING_LIST` */

DROP TABLE IF EXISTS `SC_PACKAGING_LIST`;

CREATE TABLE `SC_PACKAGING_LIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SHIPMENT_NO` int(11) DEFAULT NULL,
  `SHIPMENT_NAME` varchar(200) DEFAULT NULL,
  `BOX_SERIAL_NO` int(11) DEFAULT NULL,
  `F_BOX_NO` int(11) DEFAULT NULL,
  `WIDTH_CM` int(11) DEFAULT NULL,
  `LENGTH_CM` int(11) DEFAULT NULL,
  `HEIGHT_CM` int(11) DEFAULT NULL,
  `WEIGHT_KG` float DEFAULT NULL,
  `INVOICE_DETAILS` text DEFAULT NULL,
  `INVOICE_NO` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_packaging_list` (`F_SHIPMENT_NO`,`BOX_SERIAL_NO`),
  UNIQUE KEY `u_sc_packaging_list_b` (`F_BOX_NO`),
  CONSTRAINT `fk_SC_PACKAGING_LIST_SC_BOX` FOREIGN KEY (`F_BOX_NO`) REFERENCES `SC_BOX` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_PACKAGING_LIST_SC_SHIPMENT` FOREIGN KEY (`F_SHIPMENT_NO`) REFERENCES `SC_SHIPMENT` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4155 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_PACKING_LIST` */

DROP TABLE IF EXISTS `SC_PACKING_LIST`;

CREATE TABLE `SC_PACKING_LIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SHIPMENT_NO` int(11) DEFAULT NULL,
  `SHIPMENT_NAME` varchar(200) DEFAULT NULL,
  `BOX_SERIAL_NO` int(11) DEFAULT NULL,
  `F_BOX_NO` int(11) DEFAULT NULL,
  `PRD_VARINAT_NO` int(11) DEFAULT NULL,
  `HS_CODE` varchar(40) DEFAULT NULL,
  `SKU_ID` varchar(20) DEFAULT NULL,
  `IG_CODE` varchar(20) DEFAULT NULL,
  `SUBCATEGORY_NAME` varchar(40) DEFAULT NULL,
  `PRC_INV_NAME` varchar(200) DEFAULT NULL,
  `QTY` int(11) DEFAULT NULL,
  `UNIT_PRICE` double DEFAULT NULL,
  `TOTAL_PRICE` double DEFAULT NULL,
  `MER_UNIT_PRICE` double DEFAULT NULL,
  `MER_TOTAL_PRICE` double DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=11206 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SHIPING_ADDRESS` */

DROP TABLE IF EXISTS `SC_SHIPING_ADDRESS`;

CREATE TABLE `SC_SHIPING_ADDRESS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `ADDRESS_TYPE` varchar(20) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `TEL_NO` varchar(20) DEFAULT NULL,
  `ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `STATE` varchar(50) DEFAULT NULL,
  `CITY` varchar(50) DEFAULT NULL,
  `POST_CODE` varchar(20) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  `COUNTRY` varchar(50) DEFAULT NULL,
  `LOCATION` varchar(500) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `ATTENTION` varchar(50) DEFAULT NULL,
  `VAT_EORI_NO` varchar(40) DEFAULT NULL,
  `F_MERCHANT_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_shiping_address` (`CODE`),
  KEY `fk_SC_SHIPING_ADDRESS_SS_COUNTRY` (`F_COUNTRY_NO`),
  CONSTRAINT `fk_SC_SHIPING_ADDRESS_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SHIPING_ADDRESS_SET` */

DROP TABLE IF EXISTS `SC_SHIPING_ADDRESS_SET`;

CREATE TABLE `SC_SHIPING_ADDRESS_SET` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `ADDRESS_TYPE` varchar(20) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `TEL_NO` varchar(20) DEFAULT NULL,
  `ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `STATE` varchar(50) DEFAULT NULL,
  `CITY` varchar(50) DEFAULT NULL,
  `POST_CODE` varchar(20) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  `COUNTRY` varchar(50) DEFAULT NULL,
  `LOCATION` varchar(500) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `ATTENTION` varchar(50) DEFAULT NULL,
  `VAT_EORI_NO` varchar(40) DEFAULT NULL,
  `F_SHIPPMENT_NO` int(10) DEFAULT NULL,
  `F_ADDRESS_NO` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_shiping_address_set` (`CODE`),
  KEY `fk_SC_SHIPING_ADDRESS_SET_SS_COUNTRY` (`F_COUNTRY_NO`),
  KEY `fk_SC_SHIPING_ADDRESS_SET_SC_SHIPMENT` (`F_SHIPPMENT_NO`),
  KEY `fk_SC_SHIPING_ADDRESS_SET_SC_SHIPING_ADDRESS` (`F_ADDRESS_NO`),
  CONSTRAINT `fk_SC_SHIPING_ADDRESS_SET_SC_SHIPING_ADDRESS` FOREIGN KEY (`F_ADDRESS_NO`) REFERENCES `SC_SHIPING_ADDRESS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPING_ADDRESS_SET_SC_SHIPMENT` FOREIGN KEY (`F_SHIPPMENT_NO`) REFERENCES `SC_SHIPMENT` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPING_ADDRESS_SET_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=120 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SHIPMENT` */

DROP TABLE IF EXISTS `SC_SHIPMENT`;

CREATE TABLE `SC_SHIPMENT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `WAYBILL` varchar(200) DEFAULT NULL,
  `SHIPMENT_FOR` int(1) DEFAULT 1,
  `F_MERCHANT_NO` int(11) DEFAULT 0,
  `F_FROM_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `F_TO_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `FREIGHT_GBP` float DEFAULT NULL,
  `FREIGHT_RM` float DEFAULT NULL,
  `SCH_DEPARTING_DATE` date DEFAULT NULL,
  `ACT_DEPARTING_DATE` date DEFAULT NULL,
  `SCH_ARRIVAL_DATE` date DEFAULT NULL,
  `ACT_ARRIAVAL_DATE` date DEFAULT NULL,
  `PACKING_PROCESS_DATE` date DEFAULT NULL,
  `SENDER_BOX_COUNT` int(11) DEFAULT 0,
  `RECIVER_BOX_COUNT` int(11) DEFAULT NULL,
  `IS_AIR_SHIPMENT` int(11) DEFAULT NULL,
  `SHIPMENT_STATUS` int(11) DEFAULT NULL,
  `F_RECIEVING_AGENT` int(10) DEFAULT NULL,
  `F_SHIPPING_AGENT` int(2) DEFAULT NULL,
  `F_FROM_ADDRESS` int(2) DEFAULT NULL,
  `F_SHIP_TO_ADDRESS` int(2) DEFAULT NULL,
  `F_BILL_TO_ADDRESS` int(2) DEFAULT NULL,
  `F_SIGNATURE` int(2) DEFAULT NULL,
  `SIGNATURE_PATH` varchar(100) DEFAULT NULL,
  `LOGISTICS_CARRIER` varchar(20) DEFAULT NULL,
  `F_RECEVIED_BY` int(11) DEFAULT NULL,
  `F_SENT_BY` int(11) DEFAULT NULL,
  `F_LOGISTICS_CARRIER` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_shipment` (`CODE`),
  KEY `fk_SC_SHIPMENT_INV_WAREHOUSE` (`F_FROM_INV_WAREHOUSE_NO`),
  KEY `fk_SC_SHIPMENT_INV_WAREHOUSE_T` (`F_TO_INV_WAREHOUSE_NO`),
  KEY `fk_SC_SHIPMENT_SC_SHIPING_ADDRESS` (`F_RECIEVING_AGENT`),
  KEY `fk_SC_SHIPMENT_SC_SHIPMENT` (`F_SHIPPING_AGENT`),
  KEY `fk_SC_SHIPMENT_SC_CARRIER` (`F_LOGISTICS_CARRIER`),
  KEY `fk_SC_SHIPMENT_SC_SIGNATURE` (`F_SIGNATURE`),
  CONSTRAINT `fk_SC_SHIPMENT_INV_WAREHOUSE` FOREIGN KEY (`F_FROM_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPMENT_INV_WAREHOUSE_T` FOREIGN KEY (`F_TO_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPMENT_SC_CARRIER` FOREIGN KEY (`F_LOGISTICS_CARRIER`) REFERENCES `SC_CARRIER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPMENT_SC_SHIPING_ADDRESS` FOREIGN KEY (`F_RECIEVING_AGENT`) REFERENCES `SC_SHIPING_ADDRESS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPMENT_SC_SIGNATURE` FOREIGN KEY (`F_SIGNATURE`) REFERENCES `SC_SIGNATURE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SHIPMENT_BOX` */

DROP TABLE IF EXISTS `SC_SHIPMENT_BOX`;

CREATE TABLE `SC_SHIPMENT_BOX` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `F_SHIPMENT_NO` int(11) DEFAULT NULL,
  `BOX_SERIAL` int(11) DEFAULT NULL,
  `F_BOX_NO` int(11) DEFAULT NULL,
  `PRODUCT_COUNT` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_shipment_box` (`CODE`),
  UNIQUE KEY `u_sc_shipment_box_b` (`F_SHIPMENT_NO`,`BOX_SERIAL`),
  UNIQUE KEY `u_sc_shipment_box_c` (`F_BOX_NO`),
  CONSTRAINT `fk_SC_SHIPMENT_BOX_SC_BOX` FOREIGN KEY (`F_BOX_NO`) REFERENCES `SC_BOX` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=556 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SIGNATURE` */

DROP TABLE IF EXISTS `SC_SIGNATURE`;

CREATE TABLE `SC_SIGNATURE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) DEFAULT NULL,
  `IMG_PATH` varchar(50) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_signature` (`NAME`,`IS_ACTIVE`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SELLER_BANK_INFO` */

DROP TABLE IF EXISTS `SELLER_BANK_INFO`;

CREATE TABLE `SELLER_BANK_INFO` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `SELLER_NO` int(10) DEFAULT NULL,
  `ACC_TITLE` varchar(255) DEFAULT NULL,
  `ACC_NO` varchar(100) DEFAULT NULL,
  `BANK_NAME` varchar(200) DEFAULT NULL,
  `BRANCH_NAME` varchar(200) DEFAULT NULL,
  `ROUTING_NO` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SELLER_BUSINESS_DOC` */

DROP TABLE IF EXISTS `SELLER_BUSINESS_DOC`;

CREATE TABLE `SELLER_BUSINESS_DOC` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `SELLER_NO` int(10) DEFAULT NULL,
  `DOC_TYPE` varchar(255) DEFAULT NULL,
  `NAME` varchar(100) DEFAULT NULL,
  `PATH` varchar(200) DEFAULT NULL,
  `EXT` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SELLER_BUSINESS_INFO` */

DROP TABLE IF EXISTS `SELLER_BUSINESS_INFO`;

CREATE TABLE `SELLER_BUSINESS_INFO` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `SELLER_NO` int(10) DEFAULT NULL,
  `OWNER_NAME` varchar(255) DEFAULT NULL,
  `LAST_NAME` varchar(100) DEFAULT NULL,
  `ADDRESS1` varchar(200) DEFAULT NULL,
  `ADDRESS2` varchar(200) DEFAULT NULL,
  `INCHARGE_NAME` varchar(200) DEFAULT NULL,
  `BUSINESS_REGI_NO` varchar(50) DEFAULT NULL,
  `TIN_NO` varchar(200) DEFAULT NULL,
  `COUNTRY_NO` int(10) DEFAULT NULL,
  `DIVISION_NO` int(10) DEFAULT NULL,
  `CITY_NO` int(10) DEFAULT NULL,
  `POST_CODE` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `SHOP_NAME` varchar(150) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SELLER_WAREHOUSE_INFO` */

DROP TABLE IF EXISTS `SELLER_WAREHOUSE_INFO`;

CREATE TABLE `SELLER_WAREHOUSE_INFO` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `SELLER_NO` int(10) DEFAULT NULL,
  `OWNER_NAME` varchar(255) DEFAULT NULL,
  `LAST_NAME` varchar(100) DEFAULT NULL,
  `ADDRESS1` varchar(200) DEFAULT NULL,
  `ADDRESS2` varchar(200) DEFAULT NULL,
  `INCHARGE_NAME` varchar(200) DEFAULT NULL,
  `BUSINESS_REGI_NO` varchar(50) DEFAULT NULL,
  `TIN_NO` varchar(200) DEFAULT NULL,
  `COUNTRY_NO` int(10) DEFAULT NULL,
  `DIVISION_NO` int(10) DEFAULT NULL,
  `CITY_NO` int(10) DEFAULT NULL,
  `POST_CODE` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `WAREHOUSE_NAME` varchar(155) DEFAULT NULL,
  `PHONE_NO` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_AGENTS` */

DROP TABLE IF EXISTS `SLS_AGENTS`;

CREATE TABLE `SLS_AGENTS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL,
  `ALTERNATE_NO` varchar(200) DEFAULT NULL,
  `EMAIL` varchar(200) DEFAULT NULL,
  `FB_ID` varchar(200) DEFAULT NULL,
  `IG_ID` varchar(200) DEFAULT NULL,
  `UKSHOP_ID` varchar(50) DEFAULT NULL,
  `UKSHOP_PASS` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `CUM_ORDERS_QTY` int(50) DEFAULT NULL,
  `CUM_ORDERS_VAL` float DEFAULT NULL,
  `CUM_BALANCE` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_agents` (`CODE`),
  UNIQUE KEY `u_sls_agents_id` (`UKSHOP_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BATCH_LIST` */

DROP TABLE IF EXISTS `SLS_BATCH_LIST`;

CREATE TABLE `SLS_BATCH_LIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `RTS_BATCH_NO` int(11) NOT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING` */

DROP TABLE IF EXISTS `SLS_BOOKING`;

CREATE TABLE `SLS_BOOKING` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `SHOP_NAME` varchar(200) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `BOOKING_NO` int(11) DEFAULT NULL,
  `BOOKING_TIME` datetime DEFAULT NULL,
  `BOOKING_STATUS` int(11) DEFAULT NULL,
  `CONFIRM_TIME` datetime DEFAULT NULL,
  `BOOKING_NOTES` varchar(500) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `POSTAGE_COST` double DEFAULT NULL,
  `SUB_TOTAL` double DEFAULT NULL,
  `TOTAL_PRICE` double DEFAULT NULL,
  `TOTAL_PRICE_BEFORE_RETURN` float DEFAULT 0,
  `DISCOUNT` double DEFAULT 0,
  `TOTAL_ITEM_QTY` int(3) DEFAULT 0,
  `FROM_ADDRESS` varchar(50) DEFAULT NULL,
  `FROM_NAME` varchar(50) DEFAULT NULL,
  `FROM_MOBILE` varchar(11) DEFAULT NULL,
  `FROM_ADDRESS_LINE_1` varchar(150) DEFAULT NULL,
  `FROM_CITY` varchar(50) DEFAULT NULL,
  `FROM_POSTCODE` int(10) DEFAULT NULL,
  `FROM_STATE` varchar(20) DEFAULT NULL,
  `F_DELIVERY_ADDRESS` int(10) DEFAULT NULL,
  `DELIVERY_NAME` varchar(100) DEFAULT NULL,
  `DELIVERY_MOBILE` varchar(11) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_1` varchar(150) DEFAULT NULL,
  `DELIVERY_CITY` varchar(50) DEFAULT NULL,
  `DELIVERY_POSTCODE` varchar(10) DEFAULT NULL,
  `DELIVERY_STATE` varchar(20) DEFAULT NULL,
  `DELIVERY_AREA_NAME` varchar(100) DEFAULT NULL,
  `DELIVERY_SUB_AREA_NAME` varchar(100) DEFAULT NULL,
  `REQUEST_FOR` varchar(20) DEFAULT NULL,
  `COUPON_CODE` varchar(10) DEFAULT NULL,
  `COUPON_DISCOUNT` double DEFAULT NULL,
  `DISPATCH_STATUS` int(10) DEFAULT 0,
  `ORDER_ACTUAL_TOPUP` float DEFAULT 0,
  `IS_SYSTEM_HOLD` int(1) DEFAULT 0,
  `IS_ADMIN_HOLD` int(1) DEFAULT 0,
  `IS_SELF_PICKUP` int(1) NOT NULL DEFAULT 0,
  `IS_ADMIN_APPROVAL` int(1) DEFAULT 0,
  `CANCEL_REQUEST_FROM` enum('WEB','ADMIN') DEFAULT NULL,
  `CANCEL_REQUEST_BY` int(10) DEFAULT NULL,
  `CANCEL_REQUEST_AT` datetime DEFAULT NULL,
  `CANCELED_AT` datetime DEFAULT NULL,
  `CANCEL_NOTE` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SS_CREATED_ON` datetime DEFAULT current_timestamp(),
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `PAYMENT_METHOD` varchar(50) DEFAULT NULL,
  `PAYMENT_STATUS` varchar(20) DEFAULT NULL,
  `DELIVERY_SLOT` varchar(50) DEFAULT NULL,
  `DELIVERY_SLOT_ID` int(10) DEFAULT NULL,
  `TRANSACTION_ID` varchar(100) DEFAULT NULL,
  `DELIVERY_DATE` date DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=1971 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING_DETAILS` */

DROP TABLE IF EXISTS `SLS_BOOKING_DETAILS`;

CREATE TABLE `SLS_BOOKING_DETAILS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(10) DEFAULT NULL,
  `DISPATCH_STATUS` int(4) DEFAULT 0 COMMENT '0 - Not Dispatched\r\n10 - Partially Dispatched\r\n40 - Fully Dispatched',
  `REGULAR_PRICE` float NOT NULL,
  `SPECIAL_PRICE` float DEFAULT NULL,
  `WHOLESALE_PRICE` float DEFAULT NULL,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `BOOKING_STATUS` int(11) DEFAULT NULL COMMENT '10 - Ordered, \r\n50 - Confirmed\r\n70 - Ready to Dispatch\r\n80 - Dispatched\r\n100 - Customer Acknowladged\r\n110 - Customer Returned',
  `ARRIVAL_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 0,
  `DISPATCH_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 1,
  `COMISSION` float DEFAULT NULL,
  `F_BUNDLE_NO` int(2) DEFAULT NULL,
  `BUNDLE_SEQUENC` int(2) DEFAULT NULL,
  `LINE_PRICE` float DEFAULT 0,
  `LINE_QTY` int(4) DEFAULT NULL,
  `F_SHOP_NO` int(1) DEFAULT NULL,
  `F_BOX_NO` int(11) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ADMIN_APPROVAL` int(4) DEFAULT 0,
  `IS_SELF_PICKUP` int(4) DEFAULT 0,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `IS_READY` int(1) NOT NULL DEFAULT 0,
  `IS_ADMIN_HOLD` int(4) DEFAULT 0,
  `IS_SYSTEM_HOLD` int(4) DEFAULT 1,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `PRICE_USED` enum('REGULAR_PRICE','SPECIAL_PRICE','WHOLESALE_PRICE','INSTALLMENT_PRICE') DEFAULT NULL,
  `COUPON_DISCOUNT` float DEFAULT 0,
  `IS_RETURN` int(2) DEFAULT NULL,
  `RETURN_REASON` int(10) DEFAULT NULL,
  `PRODUCT_PRICE` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING_DETAILS_AUD` */

DROP TABLE IF EXISTS `SLS_BOOKING_DETAILS_AUD`;

CREATE TABLE `SLS_BOOKING_DETAILS_AUD` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `PK_NO` int(11) NOT NULL,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_INV_STOCK_NO` int(11) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_SYSTEM_HOLD` int(4) DEFAULT 1,
  `IS_ADMIN_HOLD` int(4) DEFAULT 0,
  `DISPATCH_STATUS` int(4) DEFAULT 0,
  `AIR_FREIGHT` float DEFAULT NULL,
  `SEA_FREIGHT` float DEFAULT NULL,
  `IS_FREIGHT` int(4) DEFAULT NULL,
  `SS_COST` float DEFAULT NULL,
  `SM_COST` float DEFAULT NULL,
  `IS_SM` int(4) DEFAULT NULL,
  `REGULAR_PRICE` float NOT NULL,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `IS_REGULAR` int(4) DEFAULT NULL,
  `CURRENT_AIR_FREIGHT` float DEFAULT NULL,
  `CURRENT_SEA_FREIGHT` float DEFAULT NULL,
  `CURRENT_IS_FREIGHT` int(4) DEFAULT NULL,
  `CURRENT_SS_COST` float DEFAULT NULL,
  `CURRENT_SM_COST` float DEFAULT NULL,
  `CURRENT_IS_SM` int(4) DEFAULT NULL,
  `CURRENT_REGULAR_PRICE` float DEFAULT NULL,
  `CURRENT_INSTALLMENT_PRICE` float DEFAULT NULL,
  `CURRENT_IS_REGULAR` int(4) DEFAULT NULL,
  `CURRENT_F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `ORDER_STATUS` int(11) DEFAULT NULL,
  `IS_SELF_PICKUP` int(4) DEFAULT NULL,
  `IS_ADMIN_APPROVAL` int(4) DEFAULT 0,
  `IS_READY` int(1) NOT NULL DEFAULT 0,
  `ARRIVAL_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 0,
  `DISPATCH_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 1,
  `IS_COD_SHELVE_TRANSFER` int(1) DEFAULT 0,
  `COMISSION` float DEFAULT NULL,
  `RTS_COLLECTION_USER_ID` int(11) DEFAULT 0,
  `IS_COLLECTED_FOR_RTS` int(1) DEFAULT 0,
  `F_BUNDLE_NO` int(2) DEFAULT NULL,
  `BUNDLE_SEQUENC` int(2) DEFAULT NULL,
  `COD_RTC_ACK` int(1) DEFAULT 0,
  `LINE_PRICE` float DEFAULT 0,
  `CHANGE_TYPE` varchar(100) DEFAULT NULL,
  `RETURN_TYPE` int(2) DEFAULT NULL,
  `RETURN_DATE` date DEFAULT NULL,
  `CUSTOMER_POSTAGE` float DEFAULT 0,
  `REFUND_AMOUNT` float DEFAULT 0,
  `F_PAYMENT_NO` int(11) DEFAULT 0,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING_DETAILS_TEMP` */

DROP TABLE IF EXISTS `SLS_BOOKING_DETAILS_TEMP`;

CREATE TABLE `SLS_BOOKING_DETAILS_TEMP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_INV_STOCK_NO` int(11) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_SYSTEM_HOLD` int(4) DEFAULT 1,
  `IS_ADMIN_HOLD` int(4) DEFAULT 0,
  `DISPATCH_STATUS` int(4) DEFAULT 0,
  `AIR_FREIGHT` float DEFAULT NULL,
  `SEA_FREIGHT` float DEFAULT NULL,
  `IS_FREIGHT` int(4) DEFAULT NULL,
  `SS_COST` float DEFAULT NULL,
  `SM_COST` float DEFAULT NULL,
  `IS_SM` int(4) DEFAULT NULL,
  `REGULAR_PRICE` float NOT NULL,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `IS_REGULAR` int(4) DEFAULT NULL,
  `CURRENT_AIR_FREIGHT` float DEFAULT NULL,
  `CURRENT_SEA_FREIGHT` float DEFAULT NULL,
  `CURRENT_IS_FREIGHT` int(4) DEFAULT NULL,
  `CURRENT_SS_COST` float DEFAULT NULL,
  `CURRENT_SM_COST` float DEFAULT NULL,
  `CURRENT_IS_SM` int(4) DEFAULT NULL,
  `CURRENT_REGULAR_PRICE` float DEFAULT NULL,
  `CURRENT_INSTALLMENT_PRICE` float DEFAULT NULL,
  `CURRENT_IS_REGULAR` int(4) DEFAULT NULL,
  `CURRENT_F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `ORDER_STATUS` int(11) DEFAULT NULL,
  `IS_SELF_PICKUP` int(4) DEFAULT NULL,
  `IS_ADMIN_APPROVAL` int(4) DEFAULT 0,
  `IS_READY` int(1) NOT NULL DEFAULT 0,
  `ARRIVAL_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 0,
  `DISPATCH_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 1,
  `IS_COD_SHELVE_TRANSFER` int(1) DEFAULT 0,
  `COMISSION` float DEFAULT NULL,
  `RTS_COLLECTION_USER_ID` int(11) DEFAULT 0,
  `IS_COLLECTED_FOR_RTS` int(1) DEFAULT 0,
  `F_BUNDLE_NO` int(2) DEFAULT NULL,
  `BUNDLE_SEQUENC` int(2) DEFAULT NULL,
  `COD_RTC_ACK` int(1) DEFAULT 0,
  `LINE_PRICE` float DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SLS_BOOKING_TEMP_DETAILS_SLS_BOOKING_TEMP` (`F_BOOKING_NO`),
  CONSTRAINT `fk_SLS_BOOKING_TEMP_DETAILS_SLS_BOOKING_TEMP` FOREIGN KEY (`F_BOOKING_NO`) REFERENCES `SLS_BOOKING_TEMP` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='TEMPORARY TABLE';

/*Table structure for table `SLS_BOOKING_LIFECYCLE` */

DROP TABLE IF EXISTS `SLS_BOOKING_LIFECYCLE`;

CREATE TABLE `SLS_BOOKING_LIFECYCLE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `BOOKING_STATUS` int(11) DEFAULT NULL,
  `F_SHOP_NO` int(1) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `F_USER_NO` int(10) DEFAULT NULL,
  `F_CUSTOMER_NO` int(10) DEFAULT NULL,
  `REQUEST_FROM` varchar(10) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING_RETURN_REASON` */

DROP TABLE IF EXISTS `SLS_BOOKING_RETURN_REASON`;

CREATE TABLE `SLS_BOOKING_RETURN_REASON` (
  `PK_NO` int(2) NOT NULL AUTO_INCREMENT,
  `CODE` int(10) DEFAULT NULL,
  `DESCRIPTION` varchar(255) DEFAULT NULL,
  `STATUS` int(1) DEFAULT 1,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING_TEMP` */

DROP TABLE IF EXISTS `SLS_BOOKING_TEMP`;

CREATE TABLE `SLS_BOOKING_TEMP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `BOOKING_NO` int(11) DEFAULT NULL,
  `REBOOKING_TIME` datetime DEFAULT NULL,
  `BOOKING_TIME` datetime DEFAULT NULL,
  `EXPIERY_DATE_TIME` datetime DEFAULT NULL,
  `CONFIRM_TIME` datetime DEFAULT NULL,
  `RECONFIRM_TIME` datetime DEFAULT NULL,
  `F_BOOKING_SALES_AGENT_NO` int(11) DEFAULT NULL,
  `BOOKING_SALES_AGENT_NAME` varchar(200) DEFAULT NULL,
  `BOOKING_STATUS` int(11) DEFAULT NULL,
  `BOOKING_NOTES` varchar(500) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `IS_SELLER` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `SELLER_NAME` varchar(200) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime NOT NULL,
  `F_SS_COMPANY_NO` float DEFAULT NULL,
  `FREIGHT_COST` double DEFAULT NULL,
  `POSTAGE_COST` double DEFAULT NULL,
  `TOTAL_PRICE` double DEFAULT NULL,
  `DISCOUNT` double DEFAULT 0,
  `TOTAL_COMISSION` float DEFAULT 0,
  `TOTAL_ITEM_QTY` int(3) DEFAULT 0,
  `IS_BUNDLE_MATCHED` tinyint(4) DEFAULT 0,
  `IS_READ_BOOKING_NOTES` tinyint(4) DEFAULT 0,
  `READ_BY_BOOKING_NOTES` int(3) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=4041 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='TEMPORARY TABLE';

/*Table structure for table `SLS_BUNDLE` */

DROP TABLE IF EXISTS `SLS_BUNDLE`;

CREATE TABLE `SLS_BUNDLE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `COUPON_CODE` varchar(20) DEFAULT NULL,
  `BUNDLE_NAME` varchar(200) DEFAULT NULL,
  `BUNDLE_NAME_PUBLIC` varchar(200) DEFAULT NULL,
  `URL_SLUG` varchar(250) DEFAULT NULL,
  `VALIDITY_FROM` date DEFAULT NULL,
  `VALIDITY_TO` date DEFAULT NULL,
  `F_A_LIST_NO` int(11) DEFAULT NULL,
  `F_B_LIST_NO` int(11) DEFAULT NULL,
  `F_BUNDLE_TYPE` int(11) DEFAULT NULL,
  `P_AMOUNT` float DEFAULT 0,
  `P2_AMOUNT` float DEFAULT 0,
  `P_SS` float DEFAULT 0,
  `P_SM` float DEFAULT 0,
  `P_AIR` float DEFAULT 0,
  `P_SEA` float DEFAULT 0,
  `X1_QTY` int(11) DEFAULT 0,
  `X2_QTY` int(11) DEFAULT 0,
  `ZA1` float DEFAULT 0,
  `ZA2` float DEFAULT 0,
  `ZA3` float DEFAULT 0,
  `R_AMOUNT` float DEFAULT 0,
  `R2_AMOUNT` float DEFAULT 0,
  `R_SS` float DEFAULT 0,
  `R_SM` float DEFAULT 0,
  `R_AIR` float DEFAULT 0,
  `R_SEA` float DEFAULT 0,
  `Y1_QTY` int(11) DEFAULT 0,
  `Y2_QTY` int(11) DEFAULT 0,
  `ZB1` float DEFAULT NULL,
  `ZB2` float DEFAULT NULL,
  `ZB3` float DEFAULT NULL,
  `STATUS` int(2) DEFAULT 1,
  `IMAGE` varchar(100) DEFAULT NULL,
  `BANNER_IMAGE` varchar(100) DEFAULT NULL,
  `DESCRIPTION` text DEFAULT NULL,
  `F_BUNDLE_GROUP_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_bundle_url` (`URL_SLUG`),
  KEY `W_BUNDLE_NAME_PUBLIC` (`BUNDLE_NAME_PUBLIC`),
  KEY `W_BUNDLE_IMAGE` (`IMAGE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_GROUP` */

DROP TABLE IF EXISTS `SLS_BUNDLE_GROUP`;

CREATE TABLE `SLS_BUNDLE_GROUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `BUNDLE_NAME` varchar(200) DEFAULT NULL,
  `BUNDLE_NAME_PUBLIC` varchar(200) DEFAULT NULL,
  `URL_SLUG` varchar(250) DEFAULT NULL,
  `STATUS` int(2) DEFAULT 1,
  `IMAGE` varchar(100) DEFAULT NULL,
  `ORDER_ID` int(5) DEFAULT NULL,
  `BANNER_IMAGE` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_bundle_url` (`URL_SLUG`),
  KEY `W_GRP_BUNDLE_NAME_PUBLIC` (`BUNDLE_NAME_PUBLIC`),
  KEY `W_GRP_URL_SLUG` (`URL_SLUG`),
  KEY `W_GRP_IMAGE` (`IMAGE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_PRIMARY_SET` */

DROP TABLE IF EXISTS `SLS_BUNDLE_PRIMARY_SET`;

CREATE TABLE `SLS_BUNDLE_PRIMARY_SET` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(50) DEFAULT NULL,
  `PRIMARY_SET_NAME` varchar(200) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_PRIMARY_SET_DTL` */

DROP TABLE IF EXISTS `SLS_BUNDLE_PRIMARY_SET_DTL`;

CREATE TABLE `SLS_BUNDLE_PRIMARY_SET_DTL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SLS_BUNDLE_PRIMARY_SET_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARIANT_NAME` varchar(200) DEFAULT NULL,
  `SKUID` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_SECONDARY_SET` */

DROP TABLE IF EXISTS `SLS_BUNDLE_SECONDARY_SET`;

CREATE TABLE `SLS_BUNDLE_SECONDARY_SET` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `SECONDARY_SET_NAME` varchar(125) DEFAULT NULL,
  `COMMENTS` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_SECONDARY_SET_DTL` */

DROP TABLE IF EXISTS `SLS_BUNDLE_SECONDARY_SET_DTL`;

CREATE TABLE `SLS_BUNDLE_SECONDARY_SET_DTL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SLS_BUNDLE_SECONDARY_SET_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARIANT_NAME` varchar(200) DEFAULT NULL,
  `SKUID` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_TYPE` */

DROP TABLE IF EXISTS `SLS_BUNDLE_TYPE`;

CREATE TABLE `SLS_BUNDLE_TYPE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `PUBLIC_NAME` varchar(200) DEFAULT NULL,
  `P_AMOUNT` float DEFAULT 0,
  `P2_AMOUNT` float DEFAULT NULL,
  `P_SS` float DEFAULT NULL,
  `P_SM` float DEFAULT NULL,
  `P_SEA` float DEFAULT NULL,
  `P_AIR` float DEFAULT NULL,
  `X1_QTY` int(11) DEFAULT 0,
  `X2_QTY` int(11) DEFAULT 0,
  `ZA1` float DEFAULT 0,
  `ZA2` float DEFAULT 0,
  `ZA3` float DEFAULT 0,
  `R_AMOUNT` float DEFAULT 0,
  `R2_AMOUNT` float DEFAULT 0,
  `R_SS` float DEFAULT 0,
  `R_SM` float DEFAULT 0,
  `R_SEA` float DEFAULT 0,
  `R_AIR` float DEFAULT 0,
  `Y1_QTY` int(11) DEFAULT 0,
  `Y2_QTY` int(11) DEFAULT 0,
  `ZB1` float DEFAULT 0,
  `ZB2` float DEFAULT 0,
  `ZB3` float DEFAULT 0,
  `T_AMOUNT` float DEFAULT 0,
  `T2_AMOUNT` float DEFAULT 0,
  `Z1_QTY` int(11) DEFAULT 0,
  `Z2_QTY` int(11) DEFAULT 0,
  `ZC1` float DEFAULT 0,
  `ZC2` float DEFAULT 0,
  `ZC3` float DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_CHECK_OFFER` */

DROP TABLE IF EXISTS `SLS_CHECK_OFFER`;

CREATE TABLE `SLS_CHECK_OFFER` (
  `PK_NO` bigint(20) NOT NULL AUTO_INCREMENT,
  `F_BOOKING_NO` int(10) DEFAULT NULL,
  `F_BUNDLE_NO` int(3) DEFAULT NULL,
  `F_LIST_NO` int(10) DEFAULT NULL,
  `F_LIST_CHILD_NO` int(11) DEFAULT NULL,
  `IS_A_LIST` tinyint(4) DEFAULT 0,
  `F_VARIANT_NO` int(10) DEFAULT NULL,
  `REGULAR_PRICE` double DEFAULT 0,
  `INSTALLMENT_PRICE` double DEFAULT NULL,
  `F_INV_STOCK_NO` int(11) DEFAULT NULL,
  `LIST_TYPE` varchar(20) DEFAULT NULL,
  `REGULAR_BUNDLE_PRICE` double DEFAULT NULL,
  `INSTALLMENT_BUNDLE_PRICE` double DEFAULT NULL,
  `IS_PROCESSED` int(11) DEFAULT 0,
  `SEQUENC` int(2) DEFAULT NULL,
  `CON` int(2) DEFAULT NULL,
  `IS_TEMP` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_COMMISION` */

DROP TABLE IF EXISTS `SLS_COMMISION`;

CREATE TABLE `SLS_COMMISION` (
  `PK_NO` int(2) NOT NULL AUTO_INCREMENT,
  `FROM_PRICE` decimal(13,2) DEFAULT NULL,
  `TO_PRICE` decimal(13,2) DEFAULT NULL,
  `AMOUNT` decimal(13,2) DEFAULT NULL,
  `FROM_DATE` date DEFAULT NULL,
  `TO_DATE` date DEFAULT NULL,
  `STATUS` decimal(13,2) DEFAULT NULL,
  `PLAN_NO` int(2) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` decimal(13,2) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` decimal(13,2) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;

/*Table structure for table `SLS_COUPON_CHILD` */

DROP TABLE IF EXISTS `SLS_COUPON_CHILD`;

CREATE TABLE `SLS_COUPON_CHILD` (
  `PK_NO` int(11) NOT NULL,
  `CODE` int(11) DEFAULT NULL,
  `COUPON_CODE` varchar(50) DEFAULT NULL,
  `F_COUPON_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `DISCOUNT` float DEFAULT NULL,
  `TO_SHOW` int(1) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SHOP_NO` int(10) DEFAULT NULL,
  `SHOP_NAME` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_COUPON_MASTER` */

DROP TABLE IF EXISTS `SLS_COUPON_MASTER`;

CREATE TABLE `SLS_COUPON_MASTER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `COUPON_CODE` varchar(50) DEFAULT NULL,
  `VALIDITY_FROM` datetime DEFAULT NULL,
  `VALIDITY_TO` datetime DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `DISCOUNT` float DEFAULT NULL,
  `COUPON_ON` int(1) DEFAULT NULL,
  `COUPON_TYPE` int(1) DEFAULT NULL,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `ORDER_MIN_VALUE` float DEFAULT NULL,
  `COUPON_IMAGE` varchar(255) DEFAULT NULL,
  `DESCRIPTION` text DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SHOP_NAME` varchar(100) DEFAULT NULL,
  `F_SHOP_NO` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_coupon_master` (`PK_NO`),
  KEY `fk_SLS_COUPON_MASTER_PRD_MASTER_SETUP` (`F_PRD_MASTER_SETUP_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_CUSTOMERS` */

DROP TABLE IF EXISTS `SLS_CUSTOMERS`;

CREATE TABLE `SLS_CUSTOMERS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CUSTOMER_NO` int(11) DEFAULT NULL,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `LAST_NAME` varchar(100) DEFAULT NULL,
  `EMAIL` varchar(200) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL,
  `MOBILE_VERIFIED` int(1) DEFAULT NULL,
  `ALTERNATE_NO` varchar(200) DEFAULT NULL,
  `PASSWORD` varchar(255) DEFAULT NULL,
  `FB_ID` varchar(200) DEFAULT NULL,
  `GOOGLE_ID` varchar(200) DEFAULT NULL,
  `PROVIDER` varchar(20) DEFAULT NULL,
  `PROFILE_PIC_URL` varchar(255) DEFAULT NULL,
  `CUM_ORDERS_QTY` int(50) DEFAULT NULL,
  `CUM_ORDERS_VAL` float DEFAULT NULL,
  `CUM_BALANCE` float DEFAULT 0,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_BALANCE_BUFFER` float DEFAULT 0,
  `CUSTOMER_BALANCE_ACTUAL` float DEFAULT 0,
  `ACCESS_TOKEN` varchar(500) DEFAULT NULL,
  `TOKEN_EXPIRES_AT` datetime DEFAULT NULL,
  `EMAIL_VERIFIED` tinyint(4) DEFAULT 0,
  `TOKEN_TYPE` varchar(10) DEFAULT NULL,
  `IS_TOKEN_ACTIVE` int(1) DEFAULT 0,
  `OTP` int(4) DEFAULT NULL,
  `OTP_EXPIRES_AT` datetime DEFAULT NULL,
  `OTP_SENT_AT` datetime DEFAULT NULL,
  `OTP_COUNT` tinyint(1) DEFAULT 0,
  `IS_OTP_ACTIVE` tinyint(1) DEFAULT 1,
  `BIRTH_DATE` date DEFAULT NULL,
  `GENDER` int(1) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `GET_PROMOTION_SMS` tinyint(1) DEFAULT 0,
  `IS_ACTIVE` int(11) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `EASYBAZAR_ID` varchar(50) DEFAULT NULL,
  `EMAIL_VERIFICIATION_CODE` varchar(100) DEFAULT NULL,
  `EMAIL_VERIFIED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_customers_mobile` (`MOBILE_NO`),
  UNIQUE KEY `u_sls_customers_cn` (`CUSTOMER_NO`,`EMAIL`),
  UNIQUE KEY `u_sls_customers` (`EMAIL`),
  KEY `fk_SLS_CUSTOMERS_SLS_SELLERS` (`F_SELLER_NO`),
  CONSTRAINT `fk_SLS_CUSTOMERS_SLS_SELLERS` FOREIGN KEY (`F_SELLER_NO`) REFERENCES `SLS_SELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1521 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_CUSTOMERS_ADDRESS` */

DROP TABLE IF EXISTS `SLS_CUSTOMERS_ADDRESS`;

CREATE TABLE `SLS_CUSTOMERS_ADDRESS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `LAST_NAME` varchar(200) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL,
  `ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `F_STATE_NO` int(10) DEFAULT NULL,
  `STATE_NAME` varchar(100) DEFAULT NULL,
  `F_CITY_NO` int(10) DEFAULT NULL,
  `CITY_NAME` varchar(100) DEFAULT NULL,
  `F_AREA_NO` int(10) DEFAULT NULL,
  `AREA_NAME` varchar(20) DEFAULT NULL,
  `POST_CODE` varchar(20) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  `COUNTRY` varchar(50) DEFAULT NULL,
  `ADDRESS_TYPE` varchar(20) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT 0,
  `ADDRESS_LABEL` int(1) DEFAULT 0,
  `IS_DEFAULT` int(1) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 0,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `F_SUBAREA_NO` int(10) DEFAULT NULL,
  `SUB_AREA_NAME` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SLS_CUSTOMERS_ADDRESS_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  KEY `fk_SLS_CUSTOMERS_ADDRESS_SS_COUNTRY` (`F_COUNTRY_NO`),
  CONSTRAINT `fk_SLS_CUSTOMERS_ADDRESS_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_CUSTOMERS_ADDRESS_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_CUSTOMERS_LOG` */

DROP TABLE IF EXISTS `SLS_CUSTOMERS_LOG`;

CREATE TABLE `SLS_CUSTOMERS_LOG` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_CUSTOMER_NO` int(11) NOT NULL,
  `ACCESS_TOKEN` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `PLATFORM` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `BROWSER` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `IP_ADDRESS` varchar(20) DEFAULT NULL,
  `SESSION_ID` varchar(255) DEFAULT NULL,
  `COUNTRY` varchar(20) DEFAULT NULL,
  `STATE_NAME` varchar(50) DEFAULT NULL,
  `CITY_NAME` varchar(20) DEFAULT NULL,
  `ZIP_CODE` varchar(10) DEFAULT NULL,
  `TIMEZONE` varchar(100) DEFAULT NULL,
  `LATITUDE` varchar(10) DEFAULT NULL,
  `LONGITUDE` varchar(10) DEFAULT NULL,
  `LOG_TYPE` varchar(200) DEFAULT NULL,
  `IS_TOKEN_ACTIVE` int(1) NOT NULL DEFAULT 0,
  `TOKEN_EXPIRES_AT` datetime NOT NULL DEFAULT current_timestamp(),
  `ACTION_SUCCESS` tinyint(1) DEFAULT 0,
  `SS_CREATED_ON` datetime DEFAULT current_timestamp(),
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=83 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_CUSTOMER_OTP` */

DROP TABLE IF EXISTS `SLS_CUSTOMER_OTP`;

CREATE TABLE `SLS_CUSTOMER_OTP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `OTP` varchar(100) DEFAULT NULL,
  `OTP_EXPIRES_AT` datetime DEFAULT NULL,
  `IS_OTP_ACTIVE` int(1) DEFAULT 1,
  `IS_VERIFIED` int(1) NOT NULL DEFAULT 0,
  `VERIFIED_AT` datetime DEFAULT NULL,
  `SECRET` varchar(250) DEFAULT NULL,
  `IS_CUSTOMER` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SLS_CUSTOMERS_SLS_SELLERS` (`F_SELLER_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=103 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_CUSTOMER_SELLER_MAP` */

DROP TABLE IF EXISTS `SLS_CUSTOMER_SELLER_MAP`;

CREATE TABLE `SLS_CUSTOMER_SELLER_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `CUM_ORDERS_QTY` int(50) DEFAULT NULL,
  `CUM_ORDERS_VAL` float DEFAULT NULL,
  `CUM_PAYMENT` float DEFAULT 0,
  `CUM_BALANCE` float DEFAULT 0,
  `CUSTOMER_BALANCE` float DEFAULT 0,
  `IS_ACTIVE` int(11) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_DELIVERY_BOY` */

DROP TABLE IF EXISTS `SLS_DELIVERY_BOY`;

CREATE TABLE `SLS_DELIVERY_BOY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(255) DEFAULT NULL,
  `LAST_NAME` varchar(100) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL,
  `ALTERNATE_NO` varchar(200) DEFAULT NULL,
  `EMAIL` varchar(200) DEFAULT NULL,
  `PASSWORD` varchar(255) DEFAULT NULL,
  `RIDE_TYPE` varchar(20) DEFAULT NULL,
  `ADDRESS1` varchar(100) DEFAULT NULL,
  `ADDRESS2` varchar(100) DEFAULT NULL,
  `COMMISSION` float DEFAULT NULL,
  `MONTHLY_SALARY` float DEFAULT NULL,
  `CUM_BALANCE` float DEFAULT NULL,
  `DISCOUNT_PERCENTAGE` float DEFAULT 0,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `PROFILE_PIC_URL` varchar(255) DEFAULT NULL,
  `PROVIDER` varchar(20) DEFAULT NULL,
  `GOOGLE_ID` varchar(200) DEFAULT NULL,
  `FACEBOOK_ID` varchar(20) DEFAULT NULL,
  `SHOP_NAME` varchar(200) DEFAULT NULL,
  `SHOP_ID` int(11) DEFAULT 0,
  `COUNTRY` varchar(50) DEFAULT NULL,
  `F_AREA_NO` int(11) DEFAULT NULL,
  `F_CITY_NO` int(11) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `F_COUNTRY_NO` int(1) DEFAULT NULL,
  `ACCESS_TOKEN` varchar(150) DEFAULT NULL,
  `TOKEN_TYPE` varchar(50) DEFAULT NULL,
  `IS_TOKEN_ACTIVE` int(1) DEFAULT 0,
  `TOKEN_EXPIRES_AT` datetime DEFAULT NULL,
  `DOCUMENT` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `PLATFORM` varchar(255) DEFAULT NULL,
  `IP_ADDRESS` varchar(20) DEFAULT NULL,
  `BROWSER` varchar(50) DEFAULT NULL,
  `GENDER` int(2) DEFAULT NULL,
  `BIRTH_DATE` date DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_delivery_boy` (`EMAIL`,`MOBILE_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_DELIVERY_HISTORY` */

DROP TABLE IF EXISTS `SLS_DELIVERY_HISTORY`;

CREATE TABLE `SLS_DELIVERY_HISTORY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_DELIVERY_BOY_NO` int(11) DEFAULT NULL,
  `PAYMENT_TYPE` varchar(20) DEFAULT NULL,
  `PAYMENT_AMOUNT` float DEFAULT NULL,
  `DELIVERY_STATUS` varchar(50) DEFAULT NULL,
  `DELIVERED_AT` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `PAYMENT_STATUS` varchar(20) DEFAULT NULL,
  `PAYMENT_METHOD` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_DELIVERY_SCHEDULE` */

DROP TABLE IF EXISTS `SLS_DELIVERY_SCHEDULE`;

CREATE TABLE `SLS_DELIVERY_SCHEDULE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `SLOT_TITLE` varchar(50) DEFAULT NULL,
  `SLOT_FROM` time DEFAULT NULL,
  `SLOT_TO` time DEFAULT NULL,
  `SLOT_TYPE` varchar(20) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=203 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='for order delivery';

/*Table structure for table `SLS_MERCHANT` */

DROP TABLE IF EXISTS `SLS_MERCHANT`;

CREATE TABLE `SLS_MERCHANT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `MERCHANT_NO` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `LAST_NAME` varchar(100) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL,
  `ALTERNATE_NO` varchar(200) DEFAULT NULL,
  `EMAIL` varchar(200) DEFAULT NULL,
  `FB_ID` varchar(200) DEFAULT NULL,
  `IG_ID` varchar(200) DEFAULT NULL,
  `UKSHOP_ID` varchar(50) DEFAULT NULL,
  `UKSHOP_PASS` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT 1,
  `CUM_ORDERS_QTY` int(50) DEFAULT NULL,
  `CUM_ORDERS_VAL` float DEFAULT NULL,
  `MER_CUM_ORDERS_VAL` double DEFAULT 0,
  `CUM_BALANCE` float DEFAULT 0,
  `CUSTOMER_BALANCE_BUFFER` float DEFAULT 0,
  `CUSTOMER_BALANCE_ACTUAL` float DEFAULT 0,
  `F_COUNTRY_NO` int(3) DEFAULT 2,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `TOKEN` varchar(100) DEFAULT NULL,
  `TOKEN_EXPIRES_AT` datetime DEFAULT NULL,
  `IS_TOKEN_ACTIVE` int(1) DEFAULT 0,
  `GOOGLE_ID` varchar(200) DEFAULT NULL,
  `PROFILE_PIC_URL` varchar(255) DEFAULT NULL,
  `PROVIDER` varchar(20) DEFAULT NULL,
  `SHORT_NAME` varchar(3) DEFAULT NULL,
  `CUM_BALANCE_USED` double DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_customers_cn` (`MERCHANT_NO`),
  UNIQUE KEY `u_sls_customers_id` (`UKSHOP_ID`),
  UNIQUE KEY `u_sls_customers_mobile` (`MOBILE_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_NOTIFICATION` */

DROP TABLE IF EXISTS `SLS_NOTIFICATION`;

CREATE TABLE `SLS_NOTIFICATION` (
  `PK_NO` int(10) NOT NULL AUTO_INCREMENT,
  `TYPE` varchar(20) DEFAULT NULL,
  `F_BOOKING_NO` int(10) DEFAULT NULL,
  `F_BOOKING_DETAIL_NO` int(10) DEFAULT NULL,
  `SEND_AT` datetime DEFAULT NULL,
  `IS_SEND` int(1) DEFAULT 0,
  `BODY` text DEFAULT NULL,
  `MOBILE_NO` varchar(40) DEFAULT NULL,
  `CUSTOMER_NO` int(10) DEFAULT NULL,
  `SELLER_NO` int(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_SELLER` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=2594 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_NOTIFICATION_EMAIL` */

DROP TABLE IF EXISTS `SLS_NOTIFICATION_EMAIL`;

CREATE TABLE `SLS_NOTIFICATION_EMAIL` (
  `PK_NO` int(10) NOT NULL AUTO_INCREMENT,
  `TYPE` varchar(20) DEFAULT NULL,
  `F_BOOKING_NO` int(10) DEFAULT NULL,
  `F_BOOKING_DETAIL_NO` int(10) DEFAULT NULL,
  `SEND_AT` datetime DEFAULT NULL,
  `IS_SEND` int(1) DEFAULT 0,
  `BODY` text DEFAULT NULL,
  `MOBILE_NO` varchar(40) DEFAULT NULL,
  `EMAIL` varchar(45) DEFAULT NULL,
  `CUSTOMER_NO` int(10) DEFAULT NULL,
  `SELLER_NO` int(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_SELLER` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=2636 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_ORDER` */

DROP TABLE IF EXISTS `SLS_ORDER`;

CREATE TABLE `SLS_ORDER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_BOOKING_NO` int(20) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `IS_SELLER` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `SELLER_NAME` varchar(200) DEFAULT NULL,
  `DISPATCH_STATUS` int(4) DEFAULT 0,
  `F_FROM_ADDRESS` int(11) DEFAULT 1,
  `F_TO_ADDRESS` int(11) DEFAULT NULL,
  `F_BILLING_ADDRESS` int(10) DEFAULT NULL,
  `F_ORDER_TYPE_NO` int(11) DEFAULT NULL,
  `ORDER_TYPE_NAME` varchar(20) DEFAULT NULL,
  `ORDER_ACTUAL_TOPUP` float DEFAULT 0,
  `ORDER_BUFFER_TOPUP` float DEFAULT 0,
  `ORDER_BALANCE_USED` float DEFAULT 0,
  `ORDER_BALANCE_RETURN` float DEFAULT 0,
  `IS_ADMIN_HOLD` int(4) DEFAULT 0,
  `IS_SYSTEM_HOLD` int(4) DEFAULT 1,
  `IS_CANCEL` int(2) DEFAULT 0,
  `IS_DEFAULT` int(1) DEFAULT 0,
  `IS_SELF_PICKUP` tinyint(4) DEFAULT 0,
  `IS_ADMIN_APPROVAL` int(4) DEFAULT 0,
  `FROM_NAME` varchar(100) DEFAULT NULL,
  `FROM_MOBILE` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_1` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_2` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_3` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_4` varchar(100) DEFAULT NULL,
  `FROM_CITY` varchar(100) DEFAULT NULL,
  `FROM_POSTCODE` varchar(100) DEFAULT NULL,
  `FROM_STATE` varchar(100) DEFAULT NULL,
  `FROM_COUNTRY` varchar(100) DEFAULT NULL,
  `FROM_F_COUNTRY_NO` int(4) DEFAULT NULL,
  `DELIVERY_NAME` varchar(100) DEFAULT NULL,
  `DELIVERY_LAST_NAME` varchar(200) DEFAULT NULL,
  `DELIVERY_MOBILE` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_1` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_2` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_3` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_4` varchar(100) DEFAULT NULL,
  `DELIVERY_CITY` varchar(100) DEFAULT NULL,
  `DELIVERY_POSTCODE` varchar(100) DEFAULT NULL,
  `DELIVERY_STATE` varchar(100) DEFAULT NULL,
  `DELIVERY_COUNTRY` varchar(100) DEFAULT NULL,
  `DELIVERY_F_COUNTRY_NO` int(4) DEFAULT NULL,
  `DELIVERY_EMAIL` varchar(50) DEFAULT NULL,
  `IS_READY` int(1) NOT NULL DEFAULT 0,
  `COM_TEST` varchar(100) DEFAULT NULL,
  `PICKUP_ID` int(11) DEFAULT 0,
  `UPDATED_BY` int(4) DEFAULT 0,
  `PREV_DELIVERY_NAME` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_MOBILE` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_ADDRESS_LINE_1` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_ADDRESS_LINE_2` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_ADDRESS_LINE_3` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_ADDRESS_LINE_4` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_CITY` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_POSTCODE` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_STATE` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_COUNTRY` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_F_COUNTRY_NO` int(4) DEFAULT NULL,
  `DEFAULT_AT` datetime DEFAULT NULL,
  `DEFAULT_TYPE` int(1) DEFAULT 0,
  `GRACE_TIME` datetime DEFAULT NULL,
  `ORDER_GROUP_ID` int(11) DEFAULT 0,
  `ADMIN_PAID` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SLS_ORDER_failed_jobs` (`F_BOOKING_NO`),
  KEY `fk_SLS_ORDER_S` (`F_SELLER_NO`),
  KEY `fk_SLS_ORDER_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  CONSTRAINT `fk_SLS_ORDER_S` FOREIGN KEY (`F_SELLER_NO`) REFERENCES `SLS_SELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_ORDER_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_ORDER_failed_jobs` FOREIGN KEY (`F_BOOKING_NO`) REFERENCES `SLS_BOOKING` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1753 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_ORDER_ADDRESS_HISTORY` */

DROP TABLE IF EXISTS `SLS_ORDER_ADDRESS_HISTORY`;

CREATE TABLE `SLS_ORDER_ADDRESS_HISTORY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `ORDER_PK_NO` int(4) DEFAULT NULL,
  `F_BOOKING_NO` int(20) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `IS_SELLER` int(11) DEFAULT NULL,
  `F_SELLER_NO` int(11) DEFAULT NULL,
  `SELLER_NAME` varchar(200) DEFAULT NULL,
  `F_FROM_ADDRESS` int(11) DEFAULT 1,
  `F_TO_ADDRESS` int(11) DEFAULT NULL,
  `F_BILLING_ADDRESS` int(10) DEFAULT NULL,
  `F_ORDER_TYPE_NO` int(11) DEFAULT NULL,
  `FROM_NAME` varchar(100) DEFAULT NULL,
  `FROM_MOBILE` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_1` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_2` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_3` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_4` varchar(100) DEFAULT NULL,
  `FROM_CITY` varchar(100) DEFAULT NULL,
  `FROM_POSTCODE` varchar(100) DEFAULT NULL,
  `FROM_STATE` varchar(100) DEFAULT NULL,
  `FROM_COUNTRY` varchar(100) DEFAULT NULL,
  `FROM_F_COUNTRY_NO` int(4) DEFAULT NULL,
  `DELIVERY_NAME` varchar(100) DEFAULT NULL,
  `DELIVERY_LAST_NAME` varchar(200) DEFAULT NULL,
  `DELIVERY_MOBILE` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_1` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_2` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_3` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_4` varchar(100) DEFAULT NULL,
  `DELIVERY_CITY` varchar(100) DEFAULT NULL,
  `DELIVERY_POSTCODE` varchar(100) DEFAULT NULL,
  `DELIVERY_STATE` varchar(100) DEFAULT NULL,
  `DELIVERY_COUNTRY` varchar(100) DEFAULT NULL,
  `DELIVERY_F_COUNTRY_NO` int(4) DEFAULT NULL,
  `DELIVERY_EMAIL` varchar(50) DEFAULT NULL,
  `UPDATED_BY` int(4) DEFAULT 0,
  `UPDATED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=1484 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_ORDER_COMMENTS` */

DROP TABLE IF EXISTS `SLS_ORDER_COMMENTS`;

CREATE TABLE `SLS_ORDER_COMMENTS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `COMMENTS_TEXT` varchar(200) DEFAULT NULL,
  `COMMENTS_TIME` datetime DEFAULT NULL,
  `F_COMMENTS_BY_USER_NO` int(11) DEFAULT NULL,
  `COMMENTS_BY_USER_NAME` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_order_comments` (`CODE`),
  KEY `fk_SLS_ORDER_COMMENTS_SLS_ORDER` (`F_ORDER_NO`),
  CONSTRAINT `fk_SLS_ORDER_COMMENTS_SLS_ORDER` FOREIGN KEY (`F_ORDER_NO`) REFERENCES `SLS_ORDER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_ORDER_GROUP` */

DROP TABLE IF EXISTS `SLS_ORDER_GROUP`;

CREATE TABLE `SLS_ORDER_GROUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `ORDER_GROUP_ID` int(11) NOT NULL DEFAULT 0,
  `TOTAL_PRICE` float DEFAULT NULL,
  `TOTAL_PAID` float DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=1650 DEFAULT CHARSET=latin1 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_ORDER_RTC` */

DROP TABLE IF EXISTS `SLS_ORDER_RTC`;

CREATE TABLE `SLS_ORDER_RTC` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_ACC_PAYMENT_BANK_NO` varchar(200) DEFAULT NULL,
  `BANK_NAME` varchar(50) CHARACTER SET utf8mb3 DEFAULT NULL,
  `BANK_ACC_NAME` varchar(50) DEFAULT NULL,
  `F_USER_NO` int(4) DEFAULT NULL,
  `IS_CONFIRM_HOLDER` int(11) DEFAULT NULL,
  `CONFIRM_TIME` datetime DEFAULT NULL,
  `ADMIN_COMMENT` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_REQUEST_PENDING` int(1) DEFAULT 1,
  `REQUEST_TIME` datetime DEFAULT NULL,
  `REQUEST_APPROVED_TIME` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SLS_ORDER_RTC_S` (`F_ORDER_NO`),
  CONSTRAINT `fk_SLS_ORDER_RTC_S` FOREIGN KEY (`F_ORDER_NO`) REFERENCES `SLS_ORDER` (`PK_NO`) ON DELETE CASCADE ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_POSTAGE_COST` */

DROP TABLE IF EXISTS `SLS_POSTAGE_COST`;

CREATE TABLE `SLS_POSTAGE_COST` (
  `PK_NO` int(2) NOT NULL AUTO_INCREMENT,
  `F_SHOP_NO` int(10) DEFAULT NULL,
  `AMOUNT` decimal(13,2) DEFAULT NULL,
  `FROM_PRICE` decimal(13,2) DEFAULT NULL,
  `TO_PRICE` decimal(13,2) DEFAULT NULL,
  `STATUS` int(1) DEFAULT 1 COMMENT '1=ACTIVE,0=INACTIVE',
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` decimal(13,2) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` decimal(13,2) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb3;

/*Table structure for table `SLS_SELLERS` */

DROP TABLE IF EXISTS `SLS_SELLERS`;

CREATE TABLE `SLS_SELLERS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `SELLER_NO` int(10) DEFAULT NULL,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(255) DEFAULT NULL COMMENT 'Seller name',
  `LAST_NAME` varchar(100) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL COMMENT 'seller mobile no',
  `ALTERNATE_NO` varchar(200) DEFAULT NULL,
  `EMAIL` varchar(200) DEFAULT NULL COMMENT 'seller email',
  `PASSWORD` varchar(255) DEFAULT NULL,
  `ADDRESS1` varchar(100) DEFAULT NULL,
  `ADDRESS2` varchar(100) DEFAULT NULL,
  `SHOP_NAME` varchar(200) DEFAULT NULL,
  `CUM_ORDERS_QTY` int(50) DEFAULT NULL,
  `CUM_ORDERS_VAL` float DEFAULT NULL,
  `CUM_BALANCE_ACTUAL` float DEFAULT 0,
  `CUM_BALANCE_BUFFER` float DEFAULT 0,
  `CUM_BALANCE` float DEFAULT NULL,
  `DISCOUNT_PERCENTAGE` float DEFAULT 0,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `F_PREFERRED_AGENT_NO` int(11) DEFAULT NULL,
  `TOKEN` varchar(100) DEFAULT NULL,
  `TOKEN_EXPIRES_AT` datetime DEFAULT NULL,
  `IS_TOKEN_ACTIVE` int(1) DEFAULT 0,
  `PROFILE_PIC_URL` varchar(255) DEFAULT NULL,
  `PROVIDER` varchar(20) DEFAULT NULL,
  `GOOGLE_ID` varchar(200) DEFAULT NULL,
  `F_COUNTRY_NO` int(1) DEFAULT NULL,
  `COUNTRY` varchar(50) DEFAULT NULL,
  `USER_TYPE` int(1) DEFAULT 10 COMMENT '10=seller',
  `FK_PARENT_USER_NO` int(10) DEFAULT NULL COMMENT ' SHOP USER PK NO',
  `SHOP_ID` int(11) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_sellers` (`CODE`),
  UNIQUE KEY `u_sls_sellers_c` (`SELLER_NO`),
  UNIQUE KEY `u_sls_sellers_id` (`ADDRESS1`),
  UNIQUE KEY `u_sls_sellers_mobile` (`MOBILE_NO`),
  KEY `fk_SLS_SELLERS_SLS_AGENTS` (`F_PREFERRED_AGENT_NO`),
  CONSTRAINT `fk_SLS_SELLERS_SLS_AGENTS` FOREIGN KEY (`F_PREFERRED_AGENT_NO`) REFERENCES `SLS_AGENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_STOCK_OUT` */

DROP TABLE IF EXISTS `SLS_STOCK_OUT`;

CREATE TABLE `SLS_STOCK_OUT` (
  `PK_NO` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Table structure for table `SLS_STOCK_OUT_DETAILS` */

DROP TABLE IF EXISTS `SLS_STOCK_OUT_DETAILS`;

CREATE TABLE `SLS_STOCK_OUT_DETAILS` (
  `PK_NO` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Table structure for table `SS_API_LIST` */

DROP TABLE IF EXISTS `SS_API_LIST`;

CREATE TABLE `SS_API_LIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `API_NO` int(10) DEFAULT 1,
  `NAME` varchar(100) DEFAULT NULL,
  `COMPANY_NAME` varchar(100) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `WEIGHT` float DEFAULT NULL,
  `LENGTH` float DEFAULT NULL,
  `WIDTH` float DEFAULT NULL,
  `HEIGHT` float DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `API_TYPE` varchar(10) DEFAULT NULL,
  `API_TOKEN` varchar(40) DEFAULT NULL,
  `TOKEN_CREATE_DATE` date DEFAULT NULL,
  `TOKEN_EXPIRE_DATE` date DEFAULT NULL,
  `ACCOUNT_NO` varchar(20) DEFAULT NULL,
  `METER_NO` varchar(20) DEFAULT NULL,
  `COMPANY_CODE` varchar(10) DEFAULT NULL,
  `TRANSACTION_IDENTIFIRE` varchar(40) DEFAULT NULL,
  `ORDER_ID` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='API_LIST';

/*Table structure for table `SS_AREA` */

DROP TABLE IF EXISTS `SS_AREA`;

CREATE TABLE `SS_AREA` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `AREA_CODE` varchar(20) DEFAULT NULL,
  `AREA_NAME` varchar(200) DEFAULT NULL,
  `AREA_NAME_BN` varchar(200) DEFAULT NULL,
  `F_CITY_NO` int(11) DEFAULT NULL,
  `CITY_NAME` varchar(200) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `STATE_NAME` varchar(20) DEFAULT NULL,
  `F_COUNTRY_NO` int(4) DEFAULT NULL,
  `LATITUDE` varchar(50) DEFAULT NULL,
  `LONGITUDE` varchar(50) DEFAULT NULL,
  `MIN_LAT` varchar(20) DEFAULT NULL,
  `MIN_LON` varchar(20) DEFAULT NULL,
  `MAX_LAT` varchar(20) DEFAULT NULL,
  `MAX_LON` varchar(20) DEFAULT NULL,
  `NW_LAT` varchar(20) DEFAULT NULL,
  `NW_LON` varchar(20) DEFAULT NULL,
  `SW_LAT` varchar(20) DEFAULT NULL,
  `SW_LON` varchar(20) DEFAULT NULL,
  `SE_LAT` varchar(20) DEFAULT NULL,
  `SE_LON` varchar(20) DEFAULT NULL,
  `NE_LAT` varchar(20) DEFAULT NULL,
  `NE_LON` varchar(20) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=112 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_CITY` */

DROP TABLE IF EXISTS `SS_CITY`;

CREATE TABLE `SS_CITY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `CITY_CODE` varchar(20) DEFAULT NULL,
  `CITY_NAME` varchar(200) DEFAULT NULL,
  `CITY_NAME_BN` varchar(200) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `F_COUNTRY_NO` int(4) DEFAULT NULL,
  `LATITUDE` varchar(50) DEFAULT NULL,
  `LONGITUDE` varchar(50) DEFAULT NULL,
  `MIN_LAT` varchar(20) DEFAULT NULL,
  `MIN_LON` varchar(20) DEFAULT NULL,
  `MAX_LAT` varchar(20) DEFAULT NULL,
  `MAX_LON` varchar(20) DEFAULT NULL,
  `NW_LAT` varchar(20) DEFAULT NULL,
  `NW_LON` varchar(20) DEFAULT NULL,
  `SW_LAT` varchar(20) DEFAULT NULL,
  `SW_LON` varchar(20) DEFAULT NULL,
  `SE_LAT` varchar(20) DEFAULT NULL,
  `SE_LON` varchar(20) DEFAULT NULL,
  `NE_LAT` varchar(20) DEFAULT NULL,
  `NE_LON` varchar(20) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=533 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_COUNTRY` */

DROP TABLE IF EXISTS `SS_COUNTRY`;

CREATE TABLE `SS_COUNTRY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(3) DEFAULT NULL,
  `NAME` varchar(100) DEFAULT NULL,
  `DIAL_CODE` varchar(10) DEFAULT NULL,
  `IS_ACTIVE` int(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_country` (`CODE`),
  UNIQUE KEY `u_ss_country_name` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_CURRENCY` */

DROP TABLE IF EXISTS `SS_CURRENCY`;

CREATE TABLE `SS_CURRENCY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(4) DEFAULT NULL,
  `NAME` varchar(10) DEFAULT NULL,
  `EXCHANGE_RATE_GB` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_currency` (`CODE`),
  UNIQUE KEY `u_ss_currency_n` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_DELIVERYBOY_AREA_COVERAGE` */

DROP TABLE IF EXISTS `SS_DELIVERYBOY_AREA_COVERAGE`;

CREATE TABLE `SS_DELIVERYBOY_AREA_COVERAGE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_COUNTRY_NO` int(4) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `STATE_NAME` varchar(50) DEFAULT NULL,
  `F_CITY_NO` int(11) DEFAULT NULL,
  `CITY_NAME` varchar(50) DEFAULT NULL,
  `F_AREA_NO` int(11) DEFAULT NULL,
  `AREA_NAME` varchar(100) DEFAULT NULL,
  `F_SUB_AREA_NO` int(11) DEFAULT NULL,
  `SUB_AREA_NAME` varchar(100) DEFAULT NULL,
  `F_USER_NO` int(11) DEFAULT NULL,
  `USER_NAME` varchar(255) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_IMG_FILE_TYPE` */

DROP TABLE IF EXISTS `SS_IMG_FILE_TYPE`;

CREATE TABLE `SS_IMG_FILE_TYPE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) DEFAULT NULL,
  `EXT` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_SS_IMG_FILE_TYPE` (`EXT`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_INV_USER_MAP` */

DROP TABLE IF EXISTS `SS_INV_USER_MAP`;

CREATE TABLE `SS_INV_USER_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `F_USER_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_inv_user_map` (`F_USER_NO`),
  KEY `fk_SS_INV_USER_MAP_INV_WAREHOUSE` (`F_INV_WAREHOUSE_NO`),
  CONSTRAINT `fk_SS_INV_USER_MAP_INV_WAREHOUSE` FOREIGN KEY (`F_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_PO_CODE` */

DROP TABLE IF EXISTS `SS_PO_CODE`;

CREATE TABLE `SS_PO_CODE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `PO_CODE` varchar(8) DEFAULT NULL,
  `F_CITY_NO` int(11) DEFAULT NULL,
  `CITY_NAME` varchar(200) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  `CREATED_BY` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_po_code` (`CODE`),
  UNIQUE KEY `u_ss_po_code_cc` (`F_STATE_NO`,`F_CITY_NO`,`PO_CODE`),
  KEY `fk_SS_PO_CODE_SS_CITY` (`F_CITY_NO`),
  CONSTRAINT `fk_SS_PO_CODE_SS_CITY` FOREIGN KEY (`F_CITY_NO`) REFERENCES `SS_CITY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SS_PO_CODE_SS_STATE` FOREIGN KEY (`F_STATE_NO`) REFERENCES `SS_STATE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2865 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_SHOP_AREA_COVERAGE` */

DROP TABLE IF EXISTS `SS_SHOP_AREA_COVERAGE`;

CREATE TABLE `SS_SHOP_AREA_COVERAGE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_COUNTRY_NO` int(4) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `STATE_NAME` varchar(50) DEFAULT NULL,
  `F_CITY_NO` int(11) DEFAULT NULL,
  `CITY_NAME` varchar(50) DEFAULT NULL,
  `F_AREA_NO` int(11) DEFAULT NULL,
  `AREA_NAME` varchar(100) DEFAULT NULL,
  `F_SUB_AREA_NO` int(11) DEFAULT NULL,
  `SUB_AREA_NAME` varchar(100) DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `SHOP_NAME` varchar(255) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=47 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_STATE` */

DROP TABLE IF EXISTS `SS_STATE`;

CREATE TABLE `SS_STATE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `STATE_CODE` varchar(20) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `STATE_NAME_BN` varchar(200) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  `LATITUDE` varchar(50) DEFAULT NULL,
  `LONGITUDE` varchar(50) DEFAULT NULL,
  `MIN_LAT` varchar(20) DEFAULT NULL,
  `MIN_LON` varchar(20) DEFAULT NULL,
  `MAX_LAT` varchar(20) DEFAULT NULL,
  `MAX_LON` varchar(20) DEFAULT NULL,
  `NW_LAT` varchar(20) DEFAULT NULL,
  `NW_LON` varchar(20) DEFAULT NULL,
  `SW_LAT` varchar(20) DEFAULT NULL,
  `SW_LON` varchar(20) DEFAULT NULL,
  `SE_LAT` varchar(20) DEFAULT NULL,
  `SE_LON` varchar(20) DEFAULT NULL,
  `NE_LAT` varchar(20) DEFAULT NULL,
  `NE_LON` varchar(20) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT 0,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT current_timestamp(),
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_state` (`CODE`),
  UNIQUE KEY `u_ss_state_cc` (`F_COUNTRY_NO`,`STATE_NAME`),
  UNIQUE KEY `u_ss_state_sc` (`F_COUNTRY_NO`,`STATE_CODE`),
  CONSTRAINT `fk_SS_STATE_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_STICKY_NOTE` */

DROP TABLE IF EXISTS `SS_STICKY_NOTE`;

CREATE TABLE `SS_STICKY_NOTE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NOTE` mediumtext DEFAULT NULL,
  `MERCHANT_NOTE` mediumtext DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_SUB_AREA` */

DROP TABLE IF EXISTS `SS_SUB_AREA`;

CREATE TABLE `SS_SUB_AREA` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `ZONE_NO` int(5) DEFAULT NULL,
  `SUB_AREA_NAME` varchar(100) DEFAULT NULL,
  `SUB_AREA_NAME_BN` varchar(100) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `STATE_NAME` varchar(50) DEFAULT NULL,
  `F_CITY_NO` int(11) DEFAULT NULL,
  `CITY_NAME` varchar(50) DEFAULT NULL,
  `F_AREA_NO` int(11) DEFAULT NULL,
  `AREA_NAME` varchar(100) DEFAULT NULL,
  `F_COUNTRY_NO` int(4) DEFAULT NULL,
  `MIN_LAT` varchar(20) DEFAULT NULL,
  `MIN_LON` varchar(20) DEFAULT NULL,
  `MAX_LAT` varchar(20) DEFAULT NULL,
  `MAX_LON` varchar(20) DEFAULT NULL,
  `TOTAL_NODE` int(11) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `COORDINATE_XML` longtext DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SS_SUB_AREA_SS_AREA` (`F_AREA_NO`),
  CONSTRAINT `fk_SS_SUB_AREA_SS_AREA` FOREIGN KEY (`F_AREA_NO`) REFERENCES `SS_AREA` (`PK_NO`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_SUB_AREA_POLYGON` */

DROP TABLE IF EXISTS `SS_SUB_AREA_POLYGON`;

CREATE TABLE `SS_SUB_AREA_POLYGON` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NODE_NO` int(5) DEFAULT NULL,
  `F_SUB_AREA_NO` int(11) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `STATE_NAME` varchar(50) DEFAULT NULL,
  `F_CITY_NO` int(11) DEFAULT NULL,
  `CITY_NAME` varchar(50) DEFAULT NULL,
  `F_AREA_NO` int(11) DEFAULT NULL,
  `AREA_NAME` varchar(100) DEFAULT NULL,
  `F_COUNTRY_NO` int(4) DEFAULT NULL,
  `LAT` varchar(20) DEFAULT NULL,
  `LON` varchar(20) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SS_SUB_AREA_POLYGON_SS_SUB_AREA` (`F_SUB_AREA_NO`),
  CONSTRAINT `fk_SS_SUB_AREA_POLYGON_SS_SUB_AREA` FOREIGN KEY (`F_SUB_AREA_NO`) REFERENCES `SS_SUB_AREA` (`PK_NO`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=422 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `USERS_TOKEN` */

DROP TABLE IF EXISTS `USERS_TOKEN`;

CREATE TABLE `USERS_TOKEN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_USER_NO` int(11) NOT NULL,
  `TOKEN` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `CLIENT` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `IP_ADDRESS` varchar(20) DEFAULT NULL,
  `IS_EXPIRE` int(11) NOT NULL DEFAULT 0,
  `STARTED_AT` datetime NOT NULL,
  `EXPIRE_AT` datetime NOT NULL,
  `IS_SELLER` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=133 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_ABOUT` */

DROP TABLE IF EXISTS `WEB_ABOUT`;

CREATE TABLE `WEB_ABOUT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(200) DEFAULT NULL,
  `SUB_TITLE` varchar(255) DEFAULT NULL,
  `BANNER` varchar(255) DEFAULT NULL,
  `VISION_TITLE` varchar(255) DEFAULT NULL,
  `VISION_DESCRIPTION` text DEFAULT NULL,
  `MISSION_TITLE` varchar(255) DEFAULT NULL,
  `MISSION_DESCRIPTION` text DEFAULT NULL,
  `INTRO_TITLE` varchar(255) DEFAULT NULL,
  `INTRO_SUBTITLE` varchar(255) DEFAULT NULL,
  `INTRO_DESCRIPTION` text DEFAULT NULL,
  `INTRO_IMG_1` varchar(255) DEFAULT NULL,
  `INTRO_IMG_2` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_ARTICLE` */

DROP TABLE IF EXISTS `WEB_ARTICLE`;

CREATE TABLE `WEB_ARTICLE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(50) NOT NULL,
  `URL_SLUG` varchar(50) DEFAULT NULL,
  `FEATURE_IMAGE` varchar(255) DEFAULT NULL,
  `THUMBNAIL_IMAGE` varchar(255) DEFAULT NULL,
  `SUMMARY` text DEFAULT NULL,
  `BODY` longtext DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `TAGS` varchar(255) DEFAULT NULL,
  `META_KEYWARDS` text DEFAULT NULL,
  `META_DESCRIPTION` text DEFAULT NULL,
  `ORDER_ID` int(5) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `IS_FEATURE` tinyint(1) DEFAULT 0,
  `ARTICLE_CATEGORY` int(5) DEFAULT NULL,
  `AUTHOR_NAME` varchar(100) DEFAULT NULL,
  `TOTAL_HIT` int(11) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_ARTICLE_CATEGORY` */

DROP TABLE IF EXISTS `WEB_ARTICLE_CATEGORY`;

CREATE TABLE `WEB_ARTICLE_CATEGORY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `URL_SLUG` varchar(50) DEFAULT NULL,
  `BANNER` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `META_KEYWARDS` text DEFAULT NULL,
  `META_DESCRIPTION` text DEFAULT NULL,
  `ORDER_ID` int(5) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_CART` */

DROP TABLE IF EXISTS `WEB_CART`;

CREATE TABLE `WEB_CART` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) NOT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_WAREHOUSE_NO` int(2) DEFAULT NULL,
  `TOTAL_ITEM_QTY` int(5) DEFAULT 0,
  `REGULAR_PRICE` float DEFAULT 0,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `SESSION_ID` varchar(255) DEFAULT NULL,
  `IS_BOOKING` int(5) DEFAULT 0,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SPECIAL_PRICE` float DEFAULT NULL,
  `F_SHOP_NO` int(11) DEFAULT NULL,
  `REQUEST_FOR` varchar(5) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `W_CART_PRD_MASTER_NO` (`F_PRD_MASTER_SETUP_NO`),
  KEY `W_CART_PRD_VARIANT_NO` (`F_PRD_VARIANT_NO`),
  KEY `W_CART_F_CUSTOMER_NO` (`F_CUSTOMER_NO`),
  KEY `W_CART_F_WAREHOUSE_NO` (`F_WAREHOUSE_NO`),
  KEY `W_CART_REGULAR_PRICE` (`REGULAR_PRICE`)
) ENGINE=InnoDB AUTO_INCREMENT=85 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_CONTACT_MESSAGE` */

DROP TABLE IF EXISTS `WEB_CONTACT_MESSAGE`;

CREATE TABLE `WEB_CONTACT_MESSAGE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) DEFAULT NULL,
  `EMAIL` varchar(255) NOT NULL,
  `PHONE_NUMBER` varchar(15) DEFAULT NULL,
  `SUBJECT` varchar(255) DEFAULT NULL,
  `MESSAGE_TEXT` text DEFAULT NULL,
  `SUBSCRIBER_NO` int(11) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_CUSTOM_LINK_HIGHLIGHTER` */

DROP TABLE IF EXISTS `WEB_CUSTOM_LINK_HIGHLIGHTER`;

CREATE TABLE `WEB_CUSTOM_LINK_HIGHLIGHTER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(200) DEFAULT NULL,
  `IMAGE_NAME` varchar(255) DEFAULT NULL,
  `URL_LINK` varchar(500) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `CREATED_BY` int(11) DEFAULT NULL,
  `CREATED_ON` datetime DEFAULT NULL,
  `MODIFIED_BY` int(4) DEFAULT NULL,
  `MODIFIED_ON` datetime DEFAULT NULL,
  `START_DATE` datetime DEFAULT NULL,
  `END_DATE` datetime DEFAULT NULL,
  `TITLE_SOURCE` int(1) DEFAULT NULL COMMENT '0=category,1=brand,2=custom',
  `F_TITLE_NO` int(11) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_DOCUMENTATION` */

DROP TABLE IF EXISTS `WEB_DOCUMENTATION`;

CREATE TABLE `WEB_DOCUMENTATION` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `DESCRIPTION` longtext DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_FAQ` */

DROP TABLE IF EXISTS `WEB_FAQ`;

CREATE TABLE `WEB_FAQ` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `QUESTION` varchar(255) DEFAULT NULL,
  `ANSWER` text DEFAULT NULL,
  `ORDER_ID` tinyint(4) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_HOME_PAGE_SETTING` */

DROP TABLE IF EXISTS `WEB_HOME_PAGE_SETTING`;

CREATE TABLE `WEB_HOME_PAGE_SETTING` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `SECTION_TITLE` varchar(255) NOT NULL,
  `SECTION_TYPE` varchar(50) NOT NULL DEFAULT '1',
  `SECTION_POSITION` varchar(10) DEFAULT NULL,
  `VALUE` longtext DEFAULT NULL,
  `ORDER_ID` tinyint(5) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SECTION_TITLE_BN` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_NOTIFICATION` */

DROP TABLE IF EXISTS `WEB_NOTIFICATION`;

CREATE TABLE `WEB_NOTIFICATION` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(200) DEFAULT NULL,
  `BODY` text DEFAULT NULL,
  `IMAGE` varchar(200) DEFAULT NULL,
  `NOTIFICATION_TYPE` varchar(20) DEFAULT NULL,
  `MESSAGE_ID` varchar(255) DEFAULT NULL,
  `STATUS` tinyint(1) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `TOTAL_SUCCESS` int(10) DEFAULT 0,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=74 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='WEB_NOTIFICATION';

/*Table structure for table `WEB_NOTIFICATION_DEVICE` */

DROP TABLE IF EXISTS `WEB_NOTIFICATION_DEVICE`;

CREATE TABLE `WEB_NOTIFICATION_DEVICE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `FCM_USER_TOKEN` varchar(200) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='WEB_NOTIFICATION_DEVICE';

/*Table structure for table `WEB_PAGES` */

DROP TABLE IF EXISTS `WEB_PAGES`;

CREATE TABLE `WEB_PAGES` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(255) NOT NULL,
  `SUB_TITLE` varchar(255) DEFAULT NULL,
  `URL_SLUG` varchar(255) NOT NULL,
  `POSITION` varchar(10) DEFAULT NULL,
  `BODY` longtext DEFAULT NULL,
  `FEATURE_IMAGE` varchar(255) DEFAULT NULL,
  `BANNER` varchar(255) DEFAULT NULL,
  `ORDER_ID` tinyint(5) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `META_KEYWARDS` varchar(255) DEFAULT NULL,
  `META_DESCRIPTION` text DEFAULT NULL,
  `FOR_APP` int(1) NOT NULL DEFAULT 0,
  `SECTION` int(1) NOT NULL DEFAULT 1 COMMENT '1=page_section, 2= customer service',
  `ICON` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_PRD_REVIEWS` */

DROP TABLE IF EXISTS `WEB_PRD_REVIEWS`;

CREATE TABLE `WEB_PRD_REVIEWS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(255) DEFAULT NULL,
  `RATING` int(4) DEFAULT NULL,
  `REVIEW_TEXT` text DEFAULT NULL,
  `LANGUAGE_ID` int(1) DEFAULT 1,
  `IS_FEATURE` int(1) DEFAULT 0,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `CITY_NAME` varchar(50) DEFAULT NULL,
  `F_BOOKING_NO` int(10) DEFAULT NULL,
  `F_SHOP_NO` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_SEARCH` */

DROP TABLE IF EXISTS `WEB_SEARCH`;

CREATE TABLE `WEB_SEARCH` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `QUERY` varchar(255) NOT NULL,
  `TOTAL_HIT` int(10) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=87 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_SETTINGS` */

DROP TABLE IF EXISTS `WEB_SETTINGS`;

CREATE TABLE `WEB_SETTINGS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(50) NOT NULL,
  `DESCRIPTION` text DEFAULT NULL,
  `HEADER_LOGO` varchar(255) DEFAULT NULL,
  `FOOTER_LOGO` varchar(255) DEFAULT NULL,
  `APP_LOGO` varchar(255) DEFAULT NULL,
  `EMAIL_HEADER_LOGO` varchar(200) DEFAULT NULL,
  `EMAIL_FOOTER_LOGO` varchar(200) DEFAULT NULL,
  `LOGIN_LOGO` varchar(100) DEFAULT NULL,
  `META_IMAGE` varchar(255) DEFAULT NULL,
  `FAVICON_APPLE` varchar(100) DEFAULT NULL,
  `FAVICON` varchar(200) DEFAULT NULL,
  `FOOTER_PAYMENT_ICON` varchar(255) DEFAULT NULL,
  `PLAYSTORE_ICON` varchar(100) DEFAULT NULL,
  `APPSTORE_ICON` varchar(100) DEFAULT NULL,
  `PHONE_1` varchar(15) DEFAULT NULL,
  `PHONE_2` varchar(15) DEFAULT NULL,
  `EMAIL_1` varchar(100) DEFAULT NULL,
  `EMAIL_2` varchar(100) DEFAULT NULL,
  `HQ_ADDRESS` text DEFAULT NULL,
  `URL` varchar(255) DEFAULT NULL,
  `FACEBOOK_URL` varchar(150) DEFAULT NULL,
  `TWITTER_URL` varchar(150) DEFAULT NULL,
  `INSTAGRAM_URL` varchar(150) DEFAULT NULL,
  `YOUTUBE_URL` varchar(150) DEFAULT NULL,
  `PINTEREST_URL` varchar(150) DEFAULT NULL,
  `WHATS_APP` varchar(150) DEFAULT NULL,
  `FB_APP_ID` varchar(150) DEFAULT NULL,
  `FACEBOOK_SECRET_ID` varchar(150) DEFAULT NULL,
  `GOOGLE_MAP` text DEFAULT NULL,
  `GOOGLE_APP_ID` varchar(100) DEFAULT NULL,
  `GOOGLE_CLIENT_ID` varchar(150) DEFAULT NULL,
  `GOOGLE_CLIENT_SECRET` varchar(150) DEFAULT NULL,
  `ANDROID_APP_LINK` varchar(255) DEFAULT NULL,
  `ANDROID_APP_VERSION` varchar(200) DEFAULT NULL,
  `META_TITLE` varchar(255) DEFAULT NULL,
  `META_KEYWARDS` text DEFAULT NULL,
  `META_DESCRIPTION` text DEFAULT NULL,
  `ANALYTIC_ID` varchar(50) DEFAULT NULL,
  `LANGUAGE_ID` tinyint(1) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `IPHONE_APP_LINK` varchar(200) DEFAULT NULL,
  `IPHONE_APP_VERSION` varchar(10) DEFAULT NULL,
  `COPYRIGHT_LINK` varchar(100) DEFAULT NULL,
  `COPYRIGHT_TEXT` varchar(255) DEFAULT NULL,
  `LATITUDE` varchar(20) DEFAULT NULL,
  `LONGITUDE` varchar(20) DEFAULT NULL,
  `SHIPPING_RETURN` longtext DEFAULT NULL,
  `INSTA_USERNAME_1` varchar(50) DEFAULT NULL,
  `INSTA_TOKEN_1` varchar(255) DEFAULT NULL,
  `INSTA_USERNAME_2` varchar(50) DEFAULT NULL,
  `INSTA_TOKEN_2` varchar(255) DEFAULT NULL,
  `INSTA_USERNAME_3` varchar(50) DEFAULT NULL,
  `INSTA_TOKEN_3` varchar(255) DEFAULT NULL,
  `DEFAULT_BANNER` varchar(255) DEFAULT NULL,
  `CTA_BANNER` varchar(255) DEFAULT NULL,
  `BRAND_BANNER` varchar(200) DEFAULT NULL,
  `OFFER_BANNER` varchar(200) DEFAULT NULL,
  `AZURA_PAYPLAN_1` varchar(200) DEFAULT NULL,
  `AZURA_PAYPLAN_2` varchar(200) DEFAULT NULL,
  `HOOLAH_PAYPLAN` varchar(200) DEFAULT NULL,
  `GRAB_PAYPLAN` varchar(200) DEFAULT NULL,
  `STYLE` text DEFAULT NULL,
  `INIT_STYLE` text DEFAULT NULL,
  `BILLPLZ_PAYPLAN` varchar(200) DEFAULT NULL,
  `ANDROID_VERSION_NAME` varchar(10) DEFAULT NULL,
  `APP_UPDATE_MANDATORY` enum('0','1') DEFAULT NULL,
  `IPHONE_VERSION_NAME` varchar(10) DEFAULT NULL,
  `SITE_NAME` varchar(100) DEFAULT NULL,
  `MAX_LOGIN_ATTEMPT` tinyint(1) DEFAULT 5,
  PRIMARY KEY (`PK_NO`),
  KEY `W_HEADER_LOGO` (`HEADER_LOGO`),
  KEY `W_FOOTER_LOGO` (`FOOTER_LOGO`),
  KEY `W_INSTA_TOKEN_1` (`INSTA_TOKEN_1`),
  KEY `W_INSTA_TOKEN_2` (`INSTA_TOKEN_2`),
  KEY `W_INSTA_TOKEN_3` (`INSTA_TOKEN_3`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_SLIDER` */

DROP TABLE IF EXISTS `WEB_SLIDER`;

CREATE TABLE `WEB_SLIDER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(200) DEFAULT NULL,
  `URL_SLUG` varchar(20) DEFAULT NULL,
  `ORDER_BY` int(11) DEFAULT NULL,
  `SLIDER_POSITION` varchar(20) DEFAULT NULL,
  `IS_SLIDER` tinyint(1) DEFAULT 0,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `CREATED_BY` int(4) DEFAULT NULL,
  `CREATED_ON` datetime DEFAULT NULL,
  `MODIFIED_BY` int(4) DEFAULT NULL,
  `MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='WEB_WHATSAPP';

/*Table structure for table `WEB_SLIDER_PHOTO` */

DROP TABLE IF EXISTS `WEB_SLIDER_PHOTO`;

CREATE TABLE `WEB_SLIDER_PHOTO` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `SLIDER_ID` int(11) DEFAULT NULL,
  `TITLE` varchar(200) DEFAULT NULL,
  `RELATIVE_PATH` varchar(255) DEFAULT NULL,
  `MOBILE_BANNER` varchar(150) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `CUSTOM_LINK` varchar(200) DEFAULT NULL,
  `CAPTION` varchar(255) DEFAULT NULL,
  `F_PRD_CATEGORY_ID` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_SUBSCRIBER` */

DROP TABLE IF EXISTS `WEB_SUBSCRIBER`;

CREATE TABLE `WEB_SUBSCRIBER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) DEFAULT NULL,
  `EMAIL` varchar(255) NOT NULL,
  `PHONE_NUMBER` varchar(15) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_web_subscriber` (`EMAIL`)
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_TRANSLATION` */

DROP TABLE IF EXISTS `WEB_TRANSLATION`;

CREATE TABLE `WEB_TRANSLATION` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `LANGUAGE` varchar(2) DEFAULT NULL,
  `KEY` varchar(255) DEFAULT NULL,
  `VALUE` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `migrations` */

DROP TABLE IF EXISTS `migrations`;

CREATE TABLE `migrations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `t` */

DROP TABLE IF EXISTS `t`;

CREATE TABLE `t` (
  `t` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/* Trigger structure for table `ACC_BANK_ACC` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_BANK_ACC_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_BANK_ACC_INSERT` BEFORE INSERT ON `ACC_BANK_ACC` FOR EACH ROW BEGIN
			declare PKCODE int(4) default 0 ;


			select IFNULL(MAX(CODE),100) into PKCODE
				from ACC_BANK_ACC
				where F_ACCOUNT_SOURCE_NO = NEW.F_ACCOUNT_SOURCE_NO;
			SET NEW.CODE = PKCODE+1 ;


END */$$


DELIMITER ;

/* Trigger structure for table `ACC_BANK_TXN` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_BANK_TXN_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_BANK_TXN_INSERT` BEFORE INSERT ON `ACC_BANK_TXN` FOR EACH ROW BEGIN
declare VAR_CODE int(20) default 0;
select IFNULL(max(CODE),20000) into VAR_CODE
        from ACC_BANK_TXN;
        SET NEW.CODE = VAR_CODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_BANK_TXN` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_BANK_TXN_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_BANK_TXN_INSERT` AFTER INSERT ON `ACC_BANK_TXN` FOR EACH ROW BEGIN

DECLARE VAR_BALANCE_ACTUAL FLOAT default 0 ;
   

SELECT SUM(AMOUNT_ACTUAL) INTO VAR_BALANCE_ACTUAL FROM ACC_BANK_TXN WHERE F_PAYMENT_ACC_NO = NEW.F_PAYMENT_ACC_NO;
UPDATE ACC_PAYMENT_BANK_ACC SET BALANCE_ACTUAL = VAR_BALANCE_ACTUAL WHERE PK_NO = NEW.F_PAYMENT_ACC_NO;




END */$$


DELIMITER ;

/* Trigger structure for table `ACC_CUSTOMER_PAYMENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_CUSTOMER_PAYMENTS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_CUSTOMER_PAYMENTS_INSERT` BEFORE INSERT ON `ACC_CUSTOMER_PAYMENTS` FOR EACH ROW BEGIN
    declare VAR_NAME VARCHAR(200) default NULL;
    declare VAR_MOBILE_NO VARCHAR(200) default NULL;
    declare VAR_CUSTOMER_NO INT(11) default 0;

    declare VAR_CNAME VARCHAR(200) default NULL;
    declare VAR_EXCHANGE_RATE_GB Float default 0;

    declare VAR_PAYMENT_BANK_NAME VARCHAR(200) default NULL;
    declare VAR_PAYMENT_ACCOUNT_NAME VARCHAR(200) default NULL;
    declare VAR_BANK_ACC_NO VARCHAR(200) default NULL;


    SELECT
        CUSTOMER_NO
        ,NAME
        ,MOBILE_NO
        INTO
        VAR_CUSTOMER_NO
        ,VAR_NAME
        ,VAR_MOBILE_NO
    FROM SLS_CUSTOMERS
    WHERE SLS_CUSTOMERS.PK_NO = NEW.F_CUSTOMER_NO
    ;

    SET NEW.CUSTOMER_NO = VAR_CUSTOMER_NO;
    SET NEW.CUSTOMER_NAME = VAR_NAME;
    SET NEW.CUSTOMER_MOBILE_NO = VAR_MOBILE_NO;

    SELECT
        NAME
        INTO
        VAR_CNAME
        FROM SS_CURRENCY
    WHERE SS_CURRENCY.PK_NO = NEW.F_PAYMENT_CURRENCY_NO;

    SET NEW.CURRENCY_NAME = VAR_CNAME;

    SELECT
        ACC_PAYMENT_BANK_ACC.BANK_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NO
        INTO
        VAR_PAYMENT_BANK_NAME
        ,VAR_PAYMENT_ACCOUNT_NAME
        ,VAR_BANK_ACC_NO
        FROM ACC_PAYMENT_BANK_ACC
    WHERE ACC_PAYMENT_BANK_ACC.PK_NO = NEW.F_PAYMENT_ACC_NO
    ;

    SET NEW.PAYMENT_BANK_NAME =  VAR_PAYMENT_BANK_NAME;
    SET NEW.PAYMENT_ACCOUNT_NAME =  VAR_PAYMENT_ACCOUNT_NAME;
    SET NEW.PAYMENT_BANK_ACC_NO =  VAR_BANK_ACC_NO;



END */$$


DELIMITER ;

/* Trigger structure for table `ACC_CUSTOMER_PAYMENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_CUSTOMER_PAYMENTS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_CUSTOMER_PAYMENTS_INSERT` AFTER INSERT ON `ACC_CUSTOMER_PAYMENTS` FOR EACH ROW 

 BEGIN


 INSERT INTO ACC_BANK_TXN
 (
    TXN_REF
    ,TXN_TYPE_IN_OUT
    ,TXN_DATE
    ,AMOUNT_ACTUAL
    ,IS_CUS_SELLER_BANK_RECONCILATION
    ,F_PAYMENT_ACC_NO
    ,F_CUSTOMER_NO
    ,F_SHOP_NO
    ,F_CUSTOMER_PAYMENT_NO
    ,F_SS_CREATED_BY
    ,SS_CREATED_ON
    ,IS_COD
    ,PAYMENT_TYPE
    )
 VALUES (
    NEW.SLIP_NUMBER
    ,'1'
    ,NEW.PAYMENT_DATE
    ,NEW.PAY_AMOUNT
    ,'1'
    , NEW.F_PAYMENT_ACC_NO
    ,NEW.F_CUSTOMER_NO
    ,NEW.F_SHOP_NO
    ,NEW.PK_NO
    ,NEW.F_SS_CREATED_BY
    ,NOW()
    ,NEW.IS_COD
    ,NEW.PAYMENT_TYPE
    );



END */$$


DELIMITER ;

/* Trigger structure for table `ACC_MERCHANT_PAYMENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_MERCHANT_PAYMENTS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_MERCHANT_PAYMENTS_INSERT` BEFORE INSERT ON `ACC_MERCHANT_PAYMENTS` FOR EACH ROW BEGIN
    declare VAR_NAME VARCHAR(200) default NULL;
    declare VAR_MOBILE_NO VARCHAR(200) default NULL;
    declare VAR_CUSTOMER_NO INT(11) default 0;

    declare VAR_CNAME VARCHAR(200) default NULL;
    declare VAR_EXCHANGE_RATE_GB Float default 0;

    declare VAR_PAYMENT_BANK_NAME VARCHAR(200) default NULL;
    declare VAR_PAYMENT_ACCOUNT_NAME VARCHAR(200) default NULL;
    declare VAR_BANK_ACC_NO VARCHAR(200) default NULL;


    SELECT
        MERCHANT_NO
        ,NAME
        ,MOBILE_NO
        INTO
        VAR_CUSTOMER_NO
        ,VAR_NAME
        ,VAR_MOBILE_NO
    FROM SLS_MERCHANT
    WHERE SLS_MERCHANT.PK_NO = NEW.F_MERCHANT_NO
    ;

    SET NEW.MERCHANT_NO = VAR_CUSTOMER_NO;
    SET NEW.MERCHANT_NAME = VAR_NAME;
    SET NEW.MERCHANT_CELL = VAR_MOBILE_NO;

    SELECT
        NAME
        ,EXCHANGE_RATE_GB
        INTO
        VAR_CNAME
        ,VAR_EXCHANGE_RATE_GB
        FROM SS_CURRENCY
    WHERE SS_CURRENCY.PK_NO = NEW.F_PAYMENT_CURRENCY_NO;

    SET NEW.CURRENCY_NAME = VAR_CNAME;
    SET NEW.CONVERSION_RATE_TO_MR = VAR_EXCHANGE_RATE_GB;


    SELECT
        ACC_PAYMENT_BANK_ACC.BANK_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NO
        INTO
        VAR_PAYMENT_BANK_NAME
        ,VAR_PAYMENT_ACCOUNT_NAME
        ,VAR_BANK_ACC_NO
        FROM ACC_PAYMENT_BANK_ACC
    WHERE ACC_PAYMENT_BANK_ACC.PK_NO = NEW.F_PAYMENT_ACC_NO
    ;

    SET NEW.PAYMENT_BANK_NAME =  VAR_PAYMENT_BANK_NAME;
    SET NEW.PAYMENT_ACCOUNT_NAME =  VAR_PAYMENT_ACCOUNT_NAME;
    SET NEW.PAYMENT_BANK_ACC_NO =  VAR_BANK_ACC_NO;



END */$$


DELIMITER ;

/* Trigger structure for table `ACC_MERCHANT_PAYMENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_MERCHANT_PAYMENTS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_MERCHANT_PAYMENTS_INSERT` AFTER INSERT ON `ACC_MERCHANT_PAYMENTS` FOR EACH ROW BEGIN
    declare VAR_CUM_BALANCE FLOAT default 0;
    declare VAR_CUSTOMER_BALANCE_BUFFER FLOAT default 0;

SELECT IFNULL(SUM(PAYMENT_REMAINING_MR),0), IFNULL(SUM(MR_AMOUNT),0) 
INTO VAR_CUM_BALANCE, VAR_CUSTOMER_BALANCE_BUFFER FROM ACC_MERCHANT_PAYMENTS WHERE F_MERCHANT_NO = NEW.F_MERCHANT_NO;

    UPDATE SLS_MERCHANT SET CUM_BALANCE = VAR_CUM_BALANCE, 
    CUSTOMER_BALANCE_BUFFER = VAR_CUSTOMER_BALANCE_BUFFER,
    CUSTOMER_BALANCE_ACTUAL = VAR_CUSTOMER_BALANCE_BUFFER 
    WHERE PK_NO = NEW.F_MERCHANT_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_MERCHANT_PAYMENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_MERCHANT_PAYMENTS_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_MERCHANT_PAYMENTS_UPDATE` AFTER UPDATE ON `ACC_MERCHANT_PAYMENTS` FOR EACH ROW BEGIN
    declare VAR_CUM_BALANCE FLOAT default 0;
    declare VAR_CUSTOMER_BALANCE_BUFFER FLOAT default 0;

SELECT IFNULL(SUM(PAYMENT_REMAINING_MR),0), IFNULL(SUM(MR_AMOUNT),0) 
INTO VAR_CUM_BALANCE, VAR_CUSTOMER_BALANCE_BUFFER FROM ACC_MERCHANT_PAYMENTS WHERE F_MERCHANT_NO = NEW.F_MERCHANT_NO;

    UPDATE SLS_MERCHANT SET CUM_BALANCE = VAR_CUM_BALANCE, 
    CUSTOMER_BALANCE_BUFFER = VAR_CUSTOMER_BALANCE_BUFFER,
    CUSTOMER_BALANCE_ACTUAL = VAR_CUSTOMER_BALANCE_BUFFER 
    WHERE PK_NO = NEW.F_MERCHANT_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_ORDER_PAYMENT` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_ORDER_PAYMENT_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_ORDER_PAYMENT_INSERT` AFTER INSERT ON `ACC_ORDER_PAYMENT` FOR EACH ROW 
BEGIN
DECLARE VAR_PAYMENT_AMOUNT FLOAT default 0 ;
SELECT SUM(PAYMENT_AMOUNT) INTO VAR_PAYMENT_AMOUNT FROM ACC_ORDER_PAYMENT WHERE F_BOOKING_NO = NEW.F_BOOKING_NO;

UPDATE SLS_BOOKING SET ORDER_ACTUAL_TOPUP = VAR_PAYMENT_AMOUNT WHERE PK_NO = NEW.F_BOOKING_NO;





END */$$


DELIMITER ;

/* Trigger structure for table `ACC_ORDER_PAYMENT` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_ORDER_PAYMENT_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_ORDER_PAYMENT_DELETE` AFTER DELETE ON `ACC_ORDER_PAYMENT` FOR EACH ROW BEGIN
    declare VAR_F_BOOKING_NO INT(11) DEFAULT 0;
    declare VAR_PAYMENT_CONFIRMED_STATUS INT(1) DEFAULT 0;
    declare VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
    declare VAR_PAYMENT_AMOUNT FLOAT DEFAULT 0;
    declare VAR_ORDER_BUFFER_TOPUP FLOAT DEFAULT 0;
    declare VAR_ORDER_ACTUAL_TOPUP FLOAT DEFAULT 0;
    declare VAR_PAYMENT_USED FLOAT DEFAULT 0;

    IF OLD.IS_CUSTOMER = 1 THEN
        -- CUSTPMER

            SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
            FROM ACC_CUSTOMER_PAYMENTS
            WHERE PK_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO ;

            IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN
                    SELECT IFNULL(SUM(ACC_ORDER_PAYMENT.PAYMENT_AMOUNT),0) INTO VAR_ORDER_BUFFER_TOPUP FROM ACC_ORDER_PAYMENT
                    JOIN ACC_CUSTOMER_PAYMENTS ON ACC_CUSTOMER_PAYMENTS.PK_NO = ACC_ORDER_PAYMENT.F_ACC_CUSTOMER_PAYMENT_NO
                    WHERE ACC_ORDER_PAYMENT.ORDER_NO = OLD.ORDER_NO AND ACC_CUSTOMER_PAYMENTS.PAYMENT_CONFIRMED_STATUS = 0 GROUP BY ACC_ORDER_PAYMENT.ORDER_NO ;

                    UPDATE SLS_ORDER SET ORDER_BUFFER_TOPUP = VAR_ORDER_BUFFER_TOPUP WHERE PK_NO = OLD.ORDER_NO;

                    SELECT IFNULL(SUM(PAYMENT_AMOUNT),0) INTO VAR_PAYMENT_USED FROM ACC_ORDER_PAYMENT WHERE F_ACC_CUSTOMER_PAYMENT_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO;

                    UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_REMAINING_MR = MR_AMOUNT - VAR_PAYMENT_USED
                    WHERE PK_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO;
            ELSE
                    SELECT IFNULL(SUM(ACC_ORDER_PAYMENT.PAYMENT_AMOUNT),0) INTO VAR_ORDER_BUFFER_TOPUP FROM ACC_ORDER_PAYMENT
                    JOIN ACC_CUSTOMER_PAYMENTS ON ACC_CUSTOMER_PAYMENTS.PK_NO = ACC_ORDER_PAYMENT.F_ACC_CUSTOMER_PAYMENT_NO
                    WHERE ACC_ORDER_PAYMENT.ORDER_NO = OLD.ORDER_NO AND ACC_CUSTOMER_PAYMENTS.PAYMENT_CONFIRMED_STATUS = 0 GROUP BY ACC_ORDER_PAYMENT.ORDER_NO ;

                    SELECT IFNULL(SUM(ACC_ORDER_PAYMENT.PAYMENT_AMOUNT),0) INTO VAR_ORDER_ACTUAL_TOPUP FROM ACC_ORDER_PAYMENT
                    JOIN ACC_CUSTOMER_PAYMENTS ON ACC_CUSTOMER_PAYMENTS.PK_NO = ACC_ORDER_PAYMENT.F_ACC_CUSTOMER_PAYMENT_NO
                    WHERE ACC_ORDER_PAYMENT.ORDER_NO = OLD.ORDER_NO AND ACC_CUSTOMER_PAYMENTS.PAYMENT_CONFIRMED_STATUS = 1 GROUP BY ACC_ORDER_PAYMENT.ORDER_NO ;

                    UPDATE SLS_ORDER SET ORDER_BUFFER_TOPUP  = VAR_ORDER_BUFFER_TOPUP, ORDER_ACTUAL_TOPUP = VAR_ORDER_ACTUAL_TOPUP WHERE PK_NO = OLD.ORDER_NO;


                    SELECT IFNULL(SUM(PAYMENT_AMOUNT),0) INTO VAR_PAYMENT_USED FROM ACC_ORDER_PAYMENT WHERE F_ACC_CUSTOMER_PAYMENT_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO;

                    UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_REMAINING_MR = MR_AMOUNT - VAR_PAYMENT_USED WHERE PK_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO;

                    SELECT IFNULL(SUM(PAYMENT_REMAINING_MR),0) INTO VAR_TOTAL_PAYMENT_REMAINING_MR FROM ACC_CUSTOMER_PAYMENTS WHERE F_CUSTOMER_NO = OLD.F_CUSTOMER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

                    UPDATE SLS_CUSTOMERS SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR WHERE PK_NO = OLD.F_CUSTOMER_NO;


            END IF;

    ELSE

            SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
                FROM ACC_SELLER_PAYMENTS
                WHERE PK_NO = OLD.F_ACC_SELLER_PAYMENT_NO ;


                IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN

                    SELECT IFNULL(SUM(ACC_ORDER_PAYMENT.PAYMENT_AMOUNT),0) INTO VAR_ORDER_BUFFER_TOPUP FROM ACC_ORDER_PAYMENT
                    JOIN ACC_SELLER_PAYMENTS ON ACC_SELLER_PAYMENTS.PK_NO = ACC_ORDER_PAYMENT.F_ACC_SELLER_PAYMENT_NO
                    WHERE ACC_ORDER_PAYMENT.ORDER_NO = OLD.ORDER_NO AND ACC_SELLER_PAYMENTS.PAYMENT_CONFIRMED_STATUS = 0 GROUP BY ACC_ORDER_PAYMENT.ORDER_NO ;

                    UPDATE SLS_ORDER SET ORDER_BUFFER_TOPUP = VAR_ORDER_BUFFER_TOPUP WHERE PK_NO = OLD.ORDER_NO;

                    SELECT IFNULL(SUM(PAYMENT_AMOUNT),0) INTO VAR_PAYMENT_USED FROM ACC_ORDER_PAYMENT WHERE F_ACC_SELLER_PAYMENT_NO = OLD.F_ACC_SELLER_PAYMENT_NO;

                    UPDATE ACC_SELLER_PAYMENTS SET PAYMENT_REMAINING_MR = MR_AMOUNT - VAR_PAYMENT_USED
                    WHERE PK_NO = OLD.F_ACC_SELLER_PAYMENT_NO;


                ELSE

                    SELECT IFNULL(SUM(ACC_ORDER_PAYMENT.PAYMENT_AMOUNT),0) INTO VAR_ORDER_BUFFER_TOPUP FROM ACC_ORDER_PAYMENT
                    JOIN ACC_SELLER_PAYMENTS ON ACC_SELLER_PAYMENTS.PK_NO = ACC_ORDER_PAYMENT.F_ACC_CUSTOMER_PAYMENT_NO
                    WHERE ACC_ORDER_PAYMENT.ORDER_NO = OLD.ORDER_NO AND ACC_SELLER_PAYMENTS.PAYMENT_CONFIRMED_STATUS = 0 GROUP BY ACC_ORDER_PAYMENT.ORDER_NO ;

                    SELECT IFNULL(SUM(ACC_ORDER_PAYMENT.PAYMENT_AMOUNT),0) INTO VAR_ORDER_ACTUAL_TOPUP FROM ACC_ORDER_PAYMENT
                    JOIN ACC_SELLER_PAYMENTS ON ACC_SELLER_PAYMENTS.PK_NO = ACC_ORDER_PAYMENT.F_ACC_SELLER_PAYMENT_NO
                    WHERE ACC_ORDER_PAYMENT.ORDER_NO = OLD.ORDER_NO AND ACC_SELLER_PAYMENTS.PAYMENT_CONFIRMED_STATUS = 1 GROUP BY ACC_ORDER_PAYMENT.ORDER_NO ;

                    UPDATE SLS_ORDER SET ORDER_BUFFER_TOPUP  = VAR_ORDER_BUFFER_TOPUP, ORDER_ACTUAL_TOPUP = VAR_ORDER_ACTUAL_TOPUP WHERE PK_NO = OLD.ORDER_NO;


                    SELECT IFNULL(SUM(PAYMENT_AMOUNT),0) INTO VAR_PAYMENT_USED FROM ACC_ORDER_PAYMENT WHERE F_ACC_SELLER_PAYMENT_NO = OLD.F_ACC_SELLER_PAYMENT_NO;


                    UPDATE ACC_SELLER_PAYMENTS SET PAYMENT_REMAINING_MR = MR_AMOUNT - VAR_PAYMENT_USED WHERE PK_NO = OLD.F_ACC_SELLER_PAYMENT_NO;

                    SELECT IFNULL(SUM(PAYMENT_REMAINING_MR),0) INTO VAR_TOTAL_PAYMENT_REMAINING_MR FROM ACC_SELLER_PAYMENTS WHERE F_SELLER_NO = OLD.SELLER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

                    UPDATE SLS_SELLERS SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR WHERE PK_NO = OLD.SELLER_NO;


                END IF;
    END IF;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_PAYMENT_BANK_ACC` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_PAYMENT_BANK_ACC_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_PAYMENT_BANK_ACC_INSERT` BEFORE INSERT ON `ACC_PAYMENT_BANK_ACC` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;
select IFNULL(max(CODE),100) into PKCODE
from ACC_PAYMENT_BANK_ACC;
SET NEW.CODE = PKCODE+1 ;


END */$$


DELIMITER ;

/* Trigger structure for table `ACC_PAYMENT_METHODS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_PAYMENT_METHODS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_PAYMENT_METHODS_INSERT` BEFORE INSERT ON `ACC_PAYMENT_METHODS` FOR EACH ROW BEGIN
			declare PKCODE int(4) default 0 ;


			select IFNULL(MAX(CODE),100) into PKCODE
				from ACC_PAYMENT_METHODS
				where F_ACC_SOURCE_NO = NEW.F_ACC_SOURCE_NO;
			SET NEW.CODE = PKCODE+1 ;


END */$$


DELIMITER ;

/* Trigger structure for table `ACC_PAYMENT_SOURCE` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_PAYMENT_SOURCE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_PAYMENT_SOURCE` BEFORE INSERT ON `ACC_PAYMENT_SOURCE` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;


select auto_increment into PKCODE
from information_schema.tables
where table_name = 'ACC_PAYMENT_SOURCE'
and table_schema = database();
	SET NEW.CODE = PKCODE+10 ;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_SELLER_CUSTOMER_TX` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_SELLER_CUSTOMER_TX_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_SELLER_CUSTOMER_TX_INSERT` AFTER INSERT ON `ACC_SELLER_CUSTOMER_TX` FOR EACH ROW BEGIN


IF NEW.F_FROM_CUSTOMER_NO IS NOT NULL AND NEW.F_TO_CUSTOMER IS NOT NULL THEN

    UPDATE SLS_CUSTOMERS
    SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0) - NEW.AMOUNT,
     CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0) -  NEW.AMOUNT, 
     CUM_BALANCE = IFNULL(CUM_BALANCE,0) -  NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_CUSTOMER_NO;

    UPDATE ACC_CUSTOMER_PAYMENTS
    SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR - NEW.AMOUNT, 
    MR_AMOUNT = MR_AMOUNT - NEW.AMOUNT,
    IS_TRANSFERRED = 1,
    TRANSFERRED_MR = IFNULL(TRANSFERRED_MR,0) + NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_CUSTOMER_PAYMENT_NO ;

    UPDATE SLS_CUSTOMERS
    SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0) + NEW.AMOUNT,
     CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0) +  NEW.AMOUNT, 
     CUM_BALANCE = IFNULL(CUM_BALANCE,0) +  NEW.AMOUNT
    WHERE PK_NO = NEW.F_TO_CUSTOMER;

END IF;


IF NEW.F_FROM_SELLER_NO IS NOT NULL AND NEW.F_TO_SELLER_NO IS NOT NULL THEN

    UPDATE SLS_SELLERS
    SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0) - NEW.AMOUNT,
     CUM_BALANCE_ACTUAL = IFNULL(CUM_BALANCE_ACTUAL,0) -  NEW.AMOUNT,
     CUM_BALANCE = IFNULL(CUM_BALANCE,0) -  NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_CUSTOMER_NO;

    UPDATE ACC_SELLER_PAYMENTS
    SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR - NEW.AMOUNT,
    MR_AMOUNT = MR_AMOUNT - NEW.AMOUNT,
    IS_TRANSFERRED = 1,
    TRANSFERRED_MR = IFNULL(TRANSFERRED_MR,0) + NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_SELLER_PAYMENT_NO ;

    UPDATE SLS_SELLERS
    SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0) + NEW.AMOUNT,
    CUM_BALANCE_ACTUAL = IFNULL(CUM_BALANCE_ACTUAL,0) +  NEW.AMOUNT,
    CUM_BALANCE = IFNULL(CUM_BALANCE,0) +  NEW.AMOUNT
    WHERE PK_NO = NEW.F_TO_CUSTOMER;

END IF;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_SELLER_PAYMENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_SELLER_PAYMENTS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_SELLER_PAYMENTS_INSERT` BEFORE INSERT ON `ACC_SELLER_PAYMENTS` FOR EACH ROW BEGIN
    declare VAR_NAME VARCHAR(200) default NULL;
    declare VAR_MOBILE_NO VARCHAR(200) default NULL;
    declare VAR_SELLER_NO INT(11) default 0;

    declare VAR_CNAME VARCHAR(200) default NULL;
    declare VAR_EXCHANGE_RATE_GB Float default 0;

    declare VAR_PAYMENT_BANK_NAME VARCHAR(200) default NULL;
    declare VAR_PAYMENT_ACCOUNT_NAME VARCHAR(200) default NULL;
    declare VAR_BANK_ACC_NO VARCHAR(200) default NULL;


    SELECT
        SELLER_NO
        ,NAME
        ,MOBILE_NO
        INTO
        VAR_SELLER_NO
        ,VAR_NAME
        ,VAR_MOBILE_NO
    FROM SLS_SELLERS
    WHERE SLS_SELLERS.PK_NO = NEW.F_SELLER_NO
    ;

    SET NEW.SELLER_NO = VAR_SELLER_NO;
    SET NEW.SELLER_NAME = VAR_NAME;
    SET NEW.SELLER_CELL = VAR_MOBILE_NO;

    SELECT
        NAME
        ,EXCHANGE_RATE_GB
        INTO
        VAR_CNAME
        ,VAR_EXCHANGE_RATE_GB
        FROM SS_CURRENCY
    WHERE SS_CURRENCY.PK_NO = NEW.F_PAYMENT_CURRENCY_NO;

    SET NEW.CURRENCY_NAME = VAR_CNAME;
    SET NEW.CONVERSION_RATE_TO_MR = VAR_EXCHANGE_RATE_GB;


    SELECT
        ACC_PAYMENT_BANK_ACC.BANK_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NO
        INTO
        VAR_PAYMENT_BANK_NAME
        ,VAR_PAYMENT_ACCOUNT_NAME
        ,VAR_BANK_ACC_NO
        FROM ACC_PAYMENT_BANK_ACC
    WHERE ACC_PAYMENT_BANK_ACC.PK_NO = NEW.F_PAYMENT_ACC_NO
    ;

    SET NEW.PAYMENT_BANK_NAME =  VAR_PAYMENT_BANK_NAME;
    SET NEW.PAYMENT_ACCOUNT_NAME =  VAR_PAYMENT_ACCOUNT_NAME;
    SET NEW.PAYMENT_BANK_ACC_NO =  VAR_BANK_ACC_NO;



END */$$


DELIMITER ;

/* Trigger structure for table `INV_STOCK` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_INV_STOCK_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_INV_STOCK_INSERT` AFTER INSERT ON `INV_STOCK` FOR EACH ROW 

    BEGIN


DECLARE VAR_TOTAL_FREE_STOCK INT(8) DEFAULT 0;
DECLARE VAR_TOTAL_STOCK INT(8) DEFAULT 0;
DECLARE VAR_ROWCOUNT INT(8) DEFAULT 0;


SELECT COUNT(*) AS TOTAL_FREE_STOCK INTO VAR_TOTAL_FREE_STOCK FROM INV_STOCK
WHERE F_BOOKING_NO IS NULL AND F_SHOP_NO = NEW.F_SHOP_NO AND F_PRD_VARIANT_NO = NEW.F_PRD_VARIANT_NO;

SELECT COUNT(*) AS TOTAL_FREE_STOCK INTO VAR_TOTAL_STOCK FROM INV_STOCK
WHERE F_SHOP_NO = NEW.F_SHOP_NO AND F_PRD_VARIANT_NO = NEW.F_PRD_VARIANT_NO;


SELECT COUNT(*) INTO VAR_ROWCOUNT FROM PRD_VARIANT_STOCK_QTY WHERE F_PRD_VARIANT_NO = NEW.F_PRD_VARIANT_NO AND F_SHOP_NO = NEW.F_SHOP_NO;
IF VAR_ROWCOUNT > 0 THEN
UPDATE PRD_VARIANT_STOCK_QTY SET TOTAL_STOCK = VAR_TOTAL_STOCK, TOTAL_FREE_STOCK = VAR_TOTAL_FREE_STOCK WHERE F_PRD_VARIANT_NO = NEW.F_PRD_VARIANT_NO AND F_SHOP_NO = NEW.F_SHOP_NO;
ELSE

INSERT INTO PRD_VARIANT_STOCK_QTY (F_PRD_MASTER_SETUP_NO, F_PRD_VARIANT_NO, F_SHOP_NO, TOTAL_FREE_STOCK, TOTAL_STOCK,  IS_ACTIVE)
 VALUES ( NEW.F_PRD_MASTER_SETUP_NO, NEW.F_PRD_VARIANT_NO, NEW.F_SHOP_NO, VAR_TOTAL_FREE_STOCK, VAR_TOTAL_STOCK, 1);
END IF;


END */$$


DELIMITER ;

/* Trigger structure for table `INV_STOCK` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_INV_STOCK_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_INV_STOCK_UPDATE` AFTER UPDATE ON `INV_STOCK` FOR EACH ROW 
    
    BEGIN
    

declare VAR_TOTAL_FREE_STOCK int(8) default 0;
declare VAR_TOTAL_STOCK int(8) default 0;
declare VAR_ROWCOUNT int(8) default 0;


SELECT COUNT(*) AS TOTAL_FREE_STOCK INTO VAR_TOTAL_FREE_STOCK FROM INV_STOCK 
WHERE F_BOOKING_NO IS NULL AND F_SHOP_NO = NEW.F_SHOP_NO AND F_PRD_VARIANT_NO = NEW.F_PRD_VARIANT_NO;

SELECT COUNT(*) AS TOTAL_FREE_STOCK INTO VAR_TOTAL_STOCK FROM INV_STOCK 
WHERE F_SHOP_NO = NEW.F_SHOP_NO AND F_PRD_VARIANT_NO = NEW.F_PRD_VARIANT_NO;


SELECT COUNT(*) INTO VAR_ROWCOUNT FROM PRD_VARIANT_STOCK_QTY WHERE F_PRD_VARIANT_NO = NEW.F_PRD_VARIANT_NO AND F_SHOP_NO = NEW.F_SHOP_NO;
IF VAR_ROWCOUNT > 0 THEN
UPDATE PRD_VARIANT_STOCK_QTY SET TOTAL_STOCK = VAR_TOTAL_STOCK, TOTAL_FREE_STOCK = VAR_TOTAL_FREE_STOCK WHERE F_PRD_VARIANT_NO = NEW.F_PRD_VARIANT_NO AND F_SHOP_NO = NEW.F_SHOP_NO;
ELSE 

INSERT INTO PRD_VARIANT_STOCK_QTY (F_PRD_MASTER_SETUP_NO, F_PRD_VARIANT_NO, F_SHOP_NO, TOTAL_FREE_STOCK, TOTAL_STOCK,  IS_ACTIVE)
 VALUES ( NEW.F_PRD_MASTER_SETUP_NO, NEW.F_PRD_VARIANT_NO, NEW.F_SHOP_NO, VAR_TOTAL_FREE_STOCK, VAR_TOTAL_STOCK, 1);
END IF;


END */$$


DELIMITER ;

/* Trigger structure for table `INV_STOCK_PRC_STOCK_IN_MAP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` BEFORE INSERT ON `INV_STOCK_PRC_STOCK_IN_MAP` FOR EACH ROW BEGIN



                SET NEW.IS_PROCESS_COMPLETE = 0 ;
                SET NEW.PROCESS_START_TIME = NOW() ;

                     


END */$$


DELIMITER ;

/* Trigger structure for table `INV_STOCK_PRC_STOCK_IN_MAP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` AFTER INSERT ON `INV_STOCK_PRC_STOCK_IN_MAP` FOR EACH ROW BEGIN



               

                 CALL  PROC_INV_STOCK_PRC_STOCK_IN_MAP(NEW.PK_NO); 
                
                /*UPDATE INV_STOCK_PRC_STOCK_IN_MAP
                SET PROCESS_COMPLETE_TIME = NOW()
                WHERE PK_NO=NEW.PK_NO;  */
                
                UPDATE PRC_STOCK_IN 
                SET INV_STOCK_RECORD_GENERATED = 1
                WHERE PK_NO = NEW.F_PRC_STOCK_IN_NO;    


END */$$


DELIMITER ;

/* Trigger structure for table `MER_INV_STOCK_PRC_STOCK_IN_MAP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_MER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_MER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` BEFORE INSERT ON `MER_INV_STOCK_PRC_STOCK_IN_MAP` FOR EACH ROW BEGIN

    SET NEW.IS_PROCESS_COMPLETE = 0 ;
    SET NEW.PROCESS_START_TIME = NOW() ;


END */$$


DELIMITER ;

/* Trigger structure for table `MER_INV_STOCK_PRC_STOCK_IN_MAP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_MER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_MER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` AFTER INSERT ON `MER_INV_STOCK_PRC_STOCK_IN_MAP` FOR EACH ROW BEGIN

    CALL  PROC_MER_INV_STOCK_PRC_STOCK_IN_MAP(NEW.PK_NO);

    UPDATE MER_PRC_STOCK_IN
    SET INV_STOCK_RECORD_GENERATED = 1
    WHERE PK_NO = NEW.F_PRC_STOCK_IN_NO;


END */$$


DELIMITER ;

/* Trigger structure for table `MER_PRC_STOCK_IN` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_MER_PRC_STOCK_IN_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_MER_PRC_STOCK_IN_INSERT` BEFORE INSERT ON `MER_PRC_STOCK_IN` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;

select IFNULL(max(CODE),100) into PKCODE
from MER_PRC_STOCK_IN;
SET NEW.CODE = PKCODE+1 ;
END */$$


DELIMITER ;

/* Trigger structure for table `MER_PRC_STOCK_IN` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_MER_PRC_STOCK_IN_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_MER_PRC_STOCK_IN_INSERT` AFTER INSERT ON `MER_PRC_STOCK_IN` FOR EACH ROW BEGIN
    DECLARE VAR_CUM_ORDERS_VAL FLOAT DEFAULT 0;
    DECLARE VAR_MER_CUM_ORDERS_VAL FLOAT DEFAULT 0;

    SELECT SUM(INVOICE_TOTAL_ACTUAL_GBP),  SUM(MER_INVOICE_TOTAL_ACTUAL_GBP) INTO VAR_CUM_ORDERS_VAL, VAR_MER_CUM_ORDERS_VAL FROM MER_PRC_STOCK_IN WHERE F_MERCHANT_NO = NEW.F_MERCHANT_NO;
    
    UPDATE SLS_MERCHANT  SET CUM_ORDERS_VAL = VAR_CUM_ORDERS_VAL, MER_CUM_ORDERS_VAL = VAR_MER_CUM_ORDERS_VAL WHERE PK_NO = NEW.F_MERCHANT_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `MER_PRC_STOCK_IN` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_MER_PRC_STOCK_IN_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_MER_PRC_STOCK_IN_UPDATE` AFTER UPDATE ON `MER_PRC_STOCK_IN` FOR EACH ROW BEGIN
    DECLARE VAR_CUM_ORDERS_VAL FLOAT DEFAULT 0;
    DECLARE VAR_MER_CUM_ORDERS_VAL FLOAT DEFAULT 0;

    SELECT SUM(INVOICE_TOTAL_ACTUAL_GBP),  SUM(MER_INVOICE_TOTAL_ACTUAL_GBP) INTO VAR_CUM_ORDERS_VAL, VAR_MER_CUM_ORDERS_VAL FROM MER_PRC_STOCK_IN WHERE F_MERCHANT_NO = NEW.F_MERCHANT_NO;
  
    UPDATE SLS_MERCHANT  SET CUM_ORDERS_VAL = VAR_CUM_ORDERS_VAL, MER_CUM_ORDERS_VAL = VAR_MER_CUM_ORDERS_VAL WHERE PK_NO = NEW.F_MERCHANT_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `MER_PRC_STOCK_IN_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_MER_PRC_STOCK_IN_DETAILS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_MER_PRC_STOCK_IN_DETAILS_INSERT` BEFORE INSERT ON `MER_PRC_STOCK_IN_DETAILS` FOR EACH ROW BEGIN
	declare PARENT_CODE int(11) default 0;
	declare PKCODE varchar(20) default 0;
	declare VAR_RECIEVED_QTY int(11) default 0;
	declare VAR_TOTAL_QTY int(11) default 0;
	declare VAR_FAULTY_QTY int(11) default 0;
	declare VAR_LINE_TOTAL_VAT_MR FLOAT default 0;
	declare VAR_SUB_TOTAL_MR_EV FLOAT default 0;
	declare VAR_REC_TOTAL_MR_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_MR_ONLY_VAT FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_GBP FLOAT default 0;
	declare VAR_SUB_TOTAL_GBP_EV FLOAT default 0;
	declare VAR_REC_TOTAL_GBP_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_GBP_ONLY_VAT FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_AC FLOAT default 0;
	declare VAR_SUB_TOTAL_AC_EV FLOAT default 0;
	declare VAR_REC_TOTAL_AC_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_AC_ONLY_VAT FLOAT default 0;
    declare MER_VAR_LINE_TOTAL_VAT_MR FLOAT default 0;
    declare MER_VAR_SUB_TOTAL_MR_EV FLOAT default 0;
    declare MER_VAR_LINE_TOTAL_VAT_GBP FLOAT default 0;
    declare MER_VAR_SUB_TOTAL_GBP_EV FLOAT default 0;

	/*-----------FOR CODE---------------*/
	select CODE into PARENT_CODE
	from MER_PRC_STOCK_IN
	where PK_NO = NEW.F_PRC_STOCK_IN ;

	select IFNULL(max(CODE),0) into PKCODE
	from MER_PRC_STOCK_IN_DETAILS
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;

	IF PKCODE = 0 THEN
		SET NEW.CODE = CONCAT(PARENT_CODE*100,PKCODE+1) ;
	ELSE
		SET NEW.CODE = PKCODE+1 ;
	END IF;
	/*-----------END CODE---------------*/

	/*-----------FOR UPDATE PRC_STOCK_IN---------------*/
	select
		IFNULL(SUM(RECIEVED_QTY),0)
		,IFNULL(SUM(QTY),0)
		,IFNULL(SUM(FAULTY_QTY),0)
		,IFNULL(SUM(LINE_TOTAL_VAT_MR),0)
		,IFNULL(SUM(SUB_TOTAL_MR_EV),0)
		,IFNULL(SUM(REC_TOTAL_MR_WITH_VAT),0)
		,IFNULL(SUM(REC_TOTAL_MR_ONLY_VAT),0)
		,IFNULL(SUM(LINE_TOTAL_VAT_GBP),0)
		,IFNULL(SUM(SUB_TOTAL_GBP_EV),0)
		,IFNULL(SUM(REC_TOTAL_GBP_WITH_VAT),0)
		,IFNULL(SUM(REC_TOTAL_GBP_ONLY_VAT),0)
		,IFNULL(SUM(LINE_TOTAL_VAT_AC),0)
		,IFNULL(SUM(SUB_TOTAL_AC_EV),0)
		,IFNULL(SUM(REC_TOTAL_AC_WITH_VAT),0)
		,IFNULL(SUM(REC_TOTAL_AC_ONLY_VAT),0)
        ,IFNULL(SUM(MER_LINE_TOTAL_VAT_MR),0)
        ,IFNULL(SUM(MER_SUB_TOTAL_MR_EV),0)
        ,IFNULL(SUM(MER_LINE_TOTAL_VAT_GBP),0)
        ,IFNULL(SUM(MER_SUB_TOTAL_GBP_EV),0)
	INTO
		VAR_RECIEVED_QTY
		,VAR_TOTAL_QTY
		,VAR_FAULTY_QTY
		,VAR_LINE_TOTAL_VAT_MR
		,VAR_SUB_TOTAL_MR_EV
		,VAR_REC_TOTAL_MR_WITH_VAT
		,VAR_REC_TOTAL_MR_ONLY_VAT
		,VAR_LINE_TOTAL_VAT_GBP
		,VAR_SUB_TOTAL_GBP_EV
		,VAR_REC_TOTAL_GBP_WITH_VAT
		,VAR_REC_TOTAL_GBP_ONLY_VAT
		,VAR_LINE_TOTAL_VAT_AC
		,VAR_SUB_TOTAL_AC_EV
		,VAR_REC_TOTAL_AC_WITH_VAT
		,VAR_REC_TOTAL_AC_ONLY_VAT
        ,MER_VAR_LINE_TOTAL_VAT_MR
        ,MER_VAR_SUB_TOTAL_MR_EV
        ,MER_VAR_LINE_TOTAL_VAT_GBP
        ,MER_VAR_SUB_TOTAL_GBP_EV
	from MER_PRC_STOCK_IN_DETAILS
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;

	UPDATE MER_PRC_STOCK_IN
		SET
			RECIEVED_QTY 					= VAR_RECIEVED_QTY+NEW.RECIEVED_QTY
			,TOTAL_QTY 						= VAR_TOTAL_QTY+NEW.QTY
			,FAULTY_QTY 					= VAR_FAULTY_QTY+NEW.FAULTY_QTY

			,INVOICE_TOTAL_VAT_ACTUAL_MR 	= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR
			,INVOICE_TOTAL_EV_ACTUAL_MR 	= VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			,INVOICE_TOTAL_ACTUAL_MR 		= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR+VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			,INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT 	= VAR_REC_TOTAL_MR_WITH_VAT+NEW.REC_TOTAL_MR_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT 	= VAR_REC_TOTAL_MR_ONLY_VAT+NEW.REC_TOTAL_MR_ONLY_VAT

			,INVOICE_TOTAL_VAT_ACTUAL_GBP 	= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP
			,INVOICE_TOTAL_EV_ACTUAL_GBP 	= VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
			,INVOICE_TOTAL_ACTUAL_GBP 		= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP+VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
			,INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT 		= VAR_REC_TOTAL_GBP_WITH_VAT+NEW.REC_TOTAL_GBP_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT 		= VAR_REC_TOTAL_GBP_ONLY_VAT+NEW.REC_TOTAL_GBP_ONLY_VAT

			,INVOICE_TOTAL_VAT_ACTUAL_AC 	= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC
			,INVOICE_TOTAL_EV_ACTUAL_AC 	= VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
			,INVOICE_TOTAL_ACTUAL_AC 		= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC+VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
			,INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT 		= VAR_REC_TOTAL_AC_WITH_VAT+NEW.REC_TOTAL_AC_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT 		= VAR_REC_TOTAL_AC_ONLY_VAT+NEW.REC_TOTAL_AC_ONLY_VAT
            ,MER_INVOICE_TOTAL_ACTUAL_MR 		= MER_VAR_LINE_TOTAL_VAT_MR+NEW.MER_LINE_TOTAL_VAT_MR+MER_VAR_SUB_TOTAL_MR_EV+NEW.MER_SUB_TOTAL_MR_EV
            ,MER_INVOICE_TOTAL_ACTUAL_GBP 		= MER_VAR_LINE_TOTAL_VAT_GBP+NEW.MER_LINE_TOTAL_VAT_GBP+MER_VAR_SUB_TOTAL_GBP_EV+NEW.MER_SUB_TOTAL_GBP_EV


	WHERE PK_NO = NEW.F_PRC_STOCK_IN;
	/*-----------END UPDATE PRC_STOCK_IN---------------*/


END */$$


DELIMITER ;

/* Trigger structure for table `MER_PRC_STOCK_IN_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_MER_PRC_STOCK_IN_DETAILS_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_MER_PRC_STOCK_IN_DETAILS_DELETE` AFTER DELETE ON `MER_PRC_STOCK_IN_DETAILS` FOR EACH ROW BEGIN

    
    UPDATE MER_PRC_STOCK_IN
        SET 
                RECIEVED_QTY                                         = RECIEVED_QTY-OLD.RECIEVED_QTY 
                ,TOTAL_QTY                                                 = TOTAL_QTY-OLD.QTY
                ,FAULTY_QTY                                         = FAULTY_QTY-OLD.FAULTY_QTY
                
                ,INVOICE_TOTAL_VAT_ACTUAL_MR         = INVOICE_TOTAL_VAT_ACTUAL_MR-OLD.LINE_TOTAL_VAT_MR
                ,INVOICE_TOTAL_EV_ACTUAL_MR         = INVOICE_TOTAL_EV_ACTUAL_MR-OLD.SUB_TOTAL_MR_EV
                ,INVOICE_TOTAL_ACTUAL_MR                 = INVOICE_TOTAL_ACTUAL_MR-(OLD.LINE_TOTAL_VAT_MR+OLD.SUB_TOTAL_MR_EV)
                ,INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT - OLD.REC_TOTAL_MR_WITH_VAT
                ,INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT - OLD.REC_TOTAL_MR_ONLY_VAT 
                
                ,INVOICE_TOTAL_VAT_ACTUAL_GBP         = INVOICE_TOTAL_VAT_ACTUAL_GBP-OLD.LINE_TOTAL_VAT_GBP
                ,INVOICE_TOTAL_EV_ACTUAL_GBP         = INVOICE_TOTAL_EV_ACTUAL_GBP-OLD.SUB_TOTAL_GBP_EV
                ,INVOICE_TOTAL_ACTUAL_GBP                 = INVOICE_TOTAL_ACTUAL_GBP-(OLD.LINE_TOTAL_VAT_GBP+OLD.SUB_TOTAL_GBP_EV)
                ,INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT - OLD.REC_TOTAL_GBP_WITH_VAT
                ,INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT - OLD.REC_TOTAL_GBP_ONLY_VAT
    
                ,INVOICE_TOTAL_VAT_ACTUAL_AC         = INVOICE_TOTAL_VAT_ACTUAL_AC-OLD.LINE_TOTAL_VAT_AC
                ,INVOICE_TOTAL_EV_ACTUAL_AC         = INVOICE_TOTAL_EV_ACTUAL_AC-OLD.SUB_TOTAL_AC_EV
                ,INVOICE_TOTAL_ACTUAL_AC                 = INVOICE_TOTAL_ACTUAL_AC-(OLD.LINE_TOTAL_VAT_AC+OLD.SUB_TOTAL_AC_EV)
                ,INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT - OLD.REC_TOTAL_AC_WITH_VAT
                ,INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT - OLD.REC_TOTAL_AC_ONLY_VAT
                    
                  ,MER_INVOICE_TOTAL_ACTUAL_GBP 		= MER_INVOICE_TOTAL_ACTUAL_GBP-(OLD.MER_LINE_TOTAL_VAT_GBP+OLD.MER_SUB_TOTAL_GBP_EV)
            ,MER_INVOICE_TOTAL_ACTUAL_MR 		= MER_INVOICE_TOTAL_ACTUAL_MR-(OLD.MER_LINE_TOTAL_VAT_MR+OLD.MER_SUB_TOTAL_MR_EV)
            
    WHERE PK_NO = OLD.F_PRC_STOCK_IN;



END */$$


DELIMITER ;

/* Trigger structure for table `MER_SC_BOX_INV_STOCK` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_BOX_INV_STOCK_MER_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_BOX_INV_STOCK_MER_INSERT` AFTER INSERT ON `MER_SC_BOX_INV_STOCK` FOR EACH ROW BEGIN

        UPDATE SC_BOX 
        SET ITEM_COUNT = ITEM_COUNT+1 
        WHERE PK_NO = NEW.F_BOX_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `MER_SC_BOX_INV_STOCK` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_BOX_INV_STOCK_MER_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_BOX_INV_STOCK_MER_DELETE` AFTER DELETE ON `MER_SC_BOX_INV_STOCK` FOR EACH ROW BEGIN

        UPDATE SC_BOX 
        SET ITEM_COUNT = ITEM_COUNT-1 
        WHERE PK_NO = OLD.F_BOX_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `PRC_STOCK_IN` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRC_STOCK_IN_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRC_STOCK_IN_INSERT` BEFORE INSERT ON `PRC_STOCK_IN` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;

select IFNULL(max(CODE),100) into PKCODE
from PRC_STOCK_IN;
SET NEW.CODE = PKCODE+1 ;
END */$$


DELIMITER ;

/* Trigger structure for table `PRC_STOCK_IN_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRC_STOCK_IN_DETAILS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRC_STOCK_IN_DETAILS_INSERT` BEFORE INSERT ON `PRC_STOCK_IN_DETAILS` FOR EACH ROW BEGIN
	declare PARENT_CODE int(11) default 0;
	declare PKCODE varchar(20) default 0;
	declare VAR_RECIEVED_QTY int(11) default 0;
	declare VAR_TOTAL_QTY int(11) default 0;
	declare VAR_FAULTY_QTY int(11) default 0;
	declare VAR_LINE_TOTAL_VAT_MR FLOAT default 0;
	declare VAR_SUB_TOTAL_MR_EV FLOAT default 0;
	declare VAR_REC_TOTAL_MR_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_MR_ONLY_VAT FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_GBP FLOAT default 0;
	declare VAR_SUB_TOTAL_GBP_EV FLOAT default 0;
	declare VAR_REC_TOTAL_GBP_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_GBP_ONLY_VAT FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_AC FLOAT default 0;
	declare VAR_SUB_TOTAL_AC_EV FLOAT default 0;
	declare VAR_REC_TOTAL_AC_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_AC_ONLY_VAT FLOAT default 0;

	/*-----------FOR CODE---------------*/
	select CODE into PARENT_CODE
	from PRC_STOCK_IN
	where PK_NO = NEW.F_PRC_STOCK_IN ;

	select IFNULL(max(CODE),0) into PKCODE
	from PRC_STOCK_IN_DETAILS
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;

	IF PKCODE = 0 THEN
		SET NEW.CODE = CONCAT(PARENT_CODE*100,PKCODE+1) ;
	ELSE
		SET NEW.CODE = PKCODE+1 ;
	END IF;
	/*-----------END CODE---------------*/

	/*-----------FOR UPDATE PRC_STOCK_IN---------------*/
	select 
		IFNULL(SUM(RECIEVED_QTY),0) 
		,IFNULL(SUM(QTY),0) 
		,IFNULL(SUM(FAULTY_QTY),0) 
		,IFNULL(SUM(LINE_TOTAL_VAT_MR),0) 
		,IFNULL(SUM(SUB_TOTAL_MR_EV),0) 
		,IFNULL(SUM(REC_TOTAL_MR_WITH_VAT),0) 
		,IFNULL(SUM(REC_TOTAL_MR_ONLY_VAT),0) 
		,IFNULL(SUM(LINE_TOTAL_VAT_GBP),0) 
		,IFNULL(SUM(SUB_TOTAL_GBP_EV),0) 
		,IFNULL(SUM(REC_TOTAL_GBP_WITH_VAT),0) 
		,IFNULL(SUM(REC_TOTAL_GBP_ONLY_VAT),0) 
		,IFNULL(SUM(LINE_TOTAL_VAT_AC),0) 
		,IFNULL(SUM(SUB_TOTAL_AC_EV),0) 
		,IFNULL(SUM(REC_TOTAL_AC_WITH_VAT),0) 
		,IFNULL(SUM(REC_TOTAL_AC_ONLY_VAT),0) 
	INTO 
		VAR_RECIEVED_QTY 
		,VAR_TOTAL_QTY
		,VAR_FAULTY_QTY
		,VAR_LINE_TOTAL_VAT_MR
		,VAR_SUB_TOTAL_MR_EV
		,VAR_REC_TOTAL_MR_WITH_VAT
		,VAR_REC_TOTAL_MR_ONLY_VAT
		,VAR_LINE_TOTAL_VAT_GBP
		,VAR_SUB_TOTAL_GBP_EV
		,VAR_REC_TOTAL_GBP_WITH_VAT
		,VAR_REC_TOTAL_GBP_ONLY_VAT
		,VAR_LINE_TOTAL_VAT_AC
		,VAR_SUB_TOTAL_AC_EV
		,VAR_REC_TOTAL_AC_WITH_VAT
		,VAR_REC_TOTAL_AC_ONLY_VAT
	from PRC_STOCK_IN_DETAILS 
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;

	UPDATE PRC_STOCK_IN
		SET 
			RECIEVED_QTY 					= VAR_RECIEVED_QTY+NEW.RECIEVED_QTY 
			,TOTAL_QTY 						= VAR_TOTAL_QTY+NEW.QTY
			,FAULTY_QTY 					= VAR_FAULTY_QTY+NEW.FAULTY_QTY
			
			,INVOICE_TOTAL_VAT_ACTUAL_MR 	= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR
			,INVOICE_TOTAL_EV_ACTUAL_MR 	= VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			,INVOICE_TOTAL_ACTUAL_MR 		= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR+VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			,INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT 	= VAR_REC_TOTAL_MR_WITH_VAT+NEW.REC_TOTAL_MR_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT 	= VAR_REC_TOTAL_MR_ONLY_VAT+NEW.REC_TOTAL_MR_ONLY_VAT
			
			,INVOICE_TOTAL_VAT_ACTUAL_GBP 	= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP
			,INVOICE_TOTAL_EV_ACTUAL_GBP 	= VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
			,INVOICE_TOTAL_ACTUAL_GBP 		= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP+VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
			,INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT 		= VAR_REC_TOTAL_GBP_WITH_VAT+NEW.REC_TOTAL_GBP_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT 		= VAR_REC_TOTAL_GBP_ONLY_VAT+NEW.REC_TOTAL_GBP_ONLY_VAT
	
			,INVOICE_TOTAL_VAT_ACTUAL_AC 	= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC
			,INVOICE_TOTAL_EV_ACTUAL_AC 	= VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
			,INVOICE_TOTAL_ACTUAL_AC 		= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC+VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
			,INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT 		= VAR_REC_TOTAL_AC_WITH_VAT+NEW.REC_TOTAL_AC_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT 		= VAR_REC_TOTAL_AC_ONLY_VAT+NEW.REC_TOTAL_AC_ONLY_VAT
	
	
	WHERE PK_NO = NEW.F_PRC_STOCK_IN;
	/*-----------END UPDATE PRC_STOCK_IN---------------*/


END */$$


DELIMITER ;

/* Trigger structure for table `PRC_STOCK_IN_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_PRC_STOCK_IN_DETAILS_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_PRC_STOCK_IN_DETAILS_DELETE` AFTER DELETE ON `PRC_STOCK_IN_DETAILS` FOR EACH ROW BEGIN

	
	/*-----------FOR UPDATE PRC_STOCK_IN---------------*/
	
	UPDATE PRC_STOCK_IN
		SET 
			RECIEVED_QTY 					= RECIEVED_QTY-OLD.RECIEVED_QTY 
			,TOTAL_QTY 						= TOTAL_QTY-OLD.QTY
			,FAULTY_QTY 					= FAULTY_QTY-OLD.FAULTY_QTY
			
			,INVOICE_TOTAL_VAT_ACTUAL_MR 	= INVOICE_TOTAL_VAT_ACTUAL_MR-OLD.LINE_TOTAL_VAT_MR
			,INVOICE_TOTAL_EV_ACTUAL_MR 	= INVOICE_TOTAL_EV_ACTUAL_MR-OLD.SUB_TOTAL_MR_EV
			,INVOICE_TOTAL_ACTUAL_MR 		= INVOICE_TOTAL_ACTUAL_MR-(OLD.LINE_TOTAL_VAT_MR+OLD.SUB_TOTAL_MR_EV)
			,INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT - OLD.REC_TOTAL_MR_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT - OLD.REC_TOTAL_MR_ONLY_VAT 
			
			,INVOICE_TOTAL_VAT_ACTUAL_GBP 	= INVOICE_TOTAL_VAT_ACTUAL_GBP-OLD.LINE_TOTAL_VAT_GBP
			,INVOICE_TOTAL_EV_ACTUAL_GBP 	= INVOICE_TOTAL_EV_ACTUAL_GBP-OLD.SUB_TOTAL_GBP_EV
			,INVOICE_TOTAL_ACTUAL_GBP 		= INVOICE_TOTAL_ACTUAL_GBP-(OLD.LINE_TOTAL_VAT_GBP+OLD.SUB_TOTAL_GBP_EV)
			,INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT - OLD.REC_TOTAL_GBP_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT - OLD.REC_TOTAL_GBP_ONLY_VAT
	
			,INVOICE_TOTAL_VAT_ACTUAL_AC 	= INVOICE_TOTAL_VAT_ACTUAL_AC-OLD.LINE_TOTAL_VAT_AC
			,INVOICE_TOTAL_EV_ACTUAL_AC 	= INVOICE_TOTAL_EV_ACTUAL_AC-OLD.SUB_TOTAL_AC_EV
			,INVOICE_TOTAL_ACTUAL_AC 		= INVOICE_TOTAL_ACTUAL_AC-(OLD.LINE_TOTAL_VAT_AC+OLD.SUB_TOTAL_AC_EV)
			,INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT - OLD.REC_TOTAL_AC_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT - OLD.REC_TOTAL_AC_ONLY_VAT
	
	
	WHERE PK_NO = OLD.F_PRC_STOCK_IN;
	/*-----------END UPDATE PRC_STOCK_IN---------------*/


END */$$


DELIMITER ;

/* Trigger structure for table `PRC_VENDORS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRC_VENDORS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRC_VENDORS_INSERT` BEFORE INSERT ON `PRC_VENDORS` FOR EACH ROW BEGIN
declare PKCODE varchar(20) default 0;

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRC_VENDORS'
and table_schema = database();
SET NEW.CODE = PKCODE ;
END */$$


DELIMITER ;

/* Trigger structure for table `PRD_ATTRIBUTE_CHILD` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_ATTRIBUTE_CHILD_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_ATTRIBUTE_CHILD_INSERT` BEFORE INSERT ON `PRD_ATTRIBUTE_CHILD` FOR EACH ROW BEGIN
    declare PKCODE int(4) default 0 ;
    declare VAR_ORDER_NO int(11) default 0;

                select IFNULL(MAX(CODE),100) into PKCODE
                        from PRD_ATTRIBUTE_CHILD
                        where F_ATTRIBUTE_MASTER = NEW.F_ATTRIBUTE_MASTER;
                SET NEW.CODE = PKCODE+1 ;
                
                select IFNULL(MAX(ORDER_NO),0) into VAR_ORDER_NO
                        from PRD_ATTRIBUTE_CHILD
                        where F_ATTRIBUTE_MASTER = NEW.F_ATTRIBUTE_MASTER;
                SET NEW.ORDER_NO = VAR_ORDER_NO+1 ;
END */$$


DELIMITER ;

/* Trigger structure for table `PRD_ATTRIBUTE_MASTER` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_ATTRIBUTE_MASTER_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_ATTRIBUTE_MASTER_INSERT` BEFORE INSERT ON `PRD_ATTRIBUTE_MASTER` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;

select IFNULL(max(CODE),100) into PKCODE
from PRD_ATTRIBUTE_MASTER;
SET NEW.CODE = PKCODE+1 ;
END */$$


DELIMITER ;

/* Trigger structure for table `PRD_BRAND` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_PRD_BRAND_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_PRD_BRAND_UPDATE` AFTER UPDATE ON `PRD_BRAND` FOR EACH ROW BEGIN
DECLARE VAR_NAME VARCHAR(50) DEFAULT NULL;

UPDATE PRD_MASTER_SETUP SET BRAND_NAME =  NEW.NAME WHERE F_BRAND = NEW.PK_NO;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_CATEGORY` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_CATEGORY_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_CATEGORY_INSERT` BEFORE INSERT ON `PRD_CATEGORY` FOR EACH ROW BEGIN
    declare PKCODE int(4) default 0;
    
    select IFNULL(MAX(CODE),100) from PRD_CATEGORY  into PKCODE;
   
    SET NEW.CODE = PKCODE+1;
END */$$


DELIMITER ;

/* Trigger structure for table `PRD_MASTER_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_MASTER_SETUP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_MASTER_SETUP_INSERT` BEFORE INSERT ON `PRD_MASTER_SETUP` FOR EACH ROW BEGIN
			DECLARE PKCODE INT(5) DEFAULT 0 ;
                DECLARE COMPOSITE_CODE VARCHAR(80) DEFAULT NULL ;
                DECLARE V_MKT_PREFIX VARCHAR(50) DEFAULT NULL;
                DECLARE V_MKT_CODE INT(6) DEFAULT 0;

                SELECT IFNULL(MAX(MKT_CODE),1000) INTO  V_MKT_CODE 
                        FROM PRD_MASTER_SETUP;
                SET NEW.MKT_CODE = V_MKT_CODE+1;
                SET NEW.MKT_ID_COMPOSITE_CODE_PREFIX = CONCAT('EB',V_MKT_CODE+1) ;
                
                SELECT CODE INTO COMPOSITE_CODE
                        FROM PRD_CATEGORY
                        WHERE PRD_CATEGORY.PK_NO = NEW.F_PRD_CATEGORY_ID ;

                SELECT IFNULL(MAX(CODE),1000) AS counter INTO PKCODE
                        FROM PRD_MASTER_SETUP
                        WHERE F_PRD_CATEGORY_ID = NEW.F_PRD_CATEGORY_ID;
                SET NEW.CODE = PKCODE+1 ;
                SET NEW.COMPOSITE_CODE = CONCAT(COMPOSITE_CODE,PKCODE+1) ;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_MASTER_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_MASTER_SETUP_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_MASTER_SETUP_UPDATE` BEFORE UPDATE ON `PRD_MASTER_SETUP` FOR EACH ROW BEGIN
			DECLARE PKCODE INT(5) DEFAULT 0 ;
                DECLARE COMPOSITE_CODE VARCHAR(80) DEFAULT NULL ;
                DECLARE V_MKT_PREFIX VARCHAR(50) DEFAULT NULL;
                DECLARE V_MKT_CODE INT(4) DEFAULT 0;
                
                SET NEW.MKT_ID_COMPOSITE_CODE_PREFIX = CONCAT('EB',NEW.MKT_CODE) ;
                
                SELECT CODE INTO COMPOSITE_CODE
                        FROM PRD_CATEGORY
                        WHERE PRD_CATEGORY.PK_NO = NEW.F_PRD_CATEGORY_ID ;

                SELECT IFNULL(MAX(CODE),1000) AS counter INTO PKCODE
                        FROM PRD_MASTER_SETUP
                        WHERE F_PRD_CATEGORY_ID = NEW.F_PRD_CATEGORY_ID AND PK_NO <> NEW.PK_NO;
                SET NEW.CODE = PKCODE+1 ;
                SET NEW.COMPOSITE_CODE = CONCAT(COMPOSITE_CODE,PKCODE+1) ;

END */$$


DELIMITER ;

/* Trigger structure for table `PRD_MODEL` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_MODEL_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_MODEL_INSERT` BEFORE INSERT ON `PRD_MODEL` FOR EACH ROW BEGIN
			declare PKCODE varchar(20) default 0 ;
			declare BRAND_CODE varchar(20) default 0 ;

			select CODE into BRAND_CODE
				from PRD_BRAND
				where PK_NO = NEW.F_PRD_BRAND_NO ;

			SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,NEW.CODE) ;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_MODEL` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_MODEL_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_MODEL_UPDATE` BEFORE UPDATE ON `PRD_MODEL` FOR EACH ROW BEGIN
			declare PKCODE varchar(20) default 0 ;
			declare BRAND_CODE varchar(20) default 0 ;

			select CODE into BRAND_CODE
				from PRD_BRAND
				where PK_NO = NEW.F_PRD_BRAND_NO;

			SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,NEW.CODE) ;


		END */$$


DELIMITER ;

/* Trigger structure for table `PRD_MODEL` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_PRD_MODEL_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_PRD_MODEL_UPDATE` AFTER UPDATE ON `PRD_MODEL` FOR EACH ROW BEGIN
DECLARE VAR_NAME VARCHAR(50) DEFAULT NULL;

UPDATE PRD_MASTER_SETUP SET MODEL_NAME =  NEW.NAME WHERE F_MODEL = NEW.PK_NO;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_SUB_CATEGORY` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_SUB_CATEGORY_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_SUB_CATEGORY_INSERT` BEFORE INSERT ON `PRD_SUB_CATEGORY` FOR EACH ROW BEGIN
			declare PKCODE int(4) default 0 ;
			declare CATEGORY_CODE int(4) default 0 ;

			select CODE into CATEGORY_CODE
				from PRD_CATEGORY
				where PK_NO = NEW.F_PRD_CATEGORY_NO ;

			select IFNULL(MAX(CODE),100) as counter into PKCODE
				from PRD_SUB_CATEGORY
				where F_PRD_CATEGORY_NO = NEW.F_PRD_CATEGORY_NO;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(CATEGORY_CODE,PKCODE+1) ;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_VARIANT_SETUP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_VARIANT_SETUP_INSERT` BEFORE INSERT ON `PRD_VARIANT_SETUP` FOR EACH ROW BEGIN
        DECLARE PKCODE INT(4) DEFAULT 0 ;
        DECLARE VAR_COMPOSITE_CODE VARCHAR(80) DEFAULT NULL ;
        DECLARE VAR_KEYWORD_SEARCH VARCHAR(4000) DEFAULT NULL ;
        DECLARE VAR_NARRATION VARCHAR(4000) DEFAULT NULL ;
        DECLARE VAR_IG_CODE INT(4) DEFAULT 0 ;
        DECLARE VAR_IG_COMPOSITE_CODE VARCHAR(80) DEFAULT NULL ;
        DECLARE VAR_F_PRD_CATEGORY_ID INT DEFAULT 0 ;
        DECLARE VAR_PRD_CATEGORY_NAME VARCHAR(50) DEFAULT NULL ;

 SELECT
PRD_MASTER_SETUP.COMPOSITE_CODE
, PRD_MASTER_SETUP.MKT_ID_COMPOSITE_CODE_PREFIX
, PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
, PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
INTO
  VAR_COMPOSITE_CODE
, VAR_IG_COMPOSITE_CODE
, VAR_F_PRD_CATEGORY_ID
, VAR_PRD_CATEGORY_NAME
 FROM PRD_MASTER_SETUP
 LEFT JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
 WHERE PRD_MASTER_SETUP.PK_NO = NEW.F_PRD_MASTER_SETUP_NO;

            SELECT IFNULL(MAX(MKT_CODE),100) INTO VAR_IG_CODE
                FROM PRD_VARIANT_SETUP
                WHERE F_PRD_MASTER_SETUP_NO = NEW.F_PRD_MASTER_SETUP_NO ;

            SELECT IFNULL(MAX(CODE),100) INTO PKCODE
                FROM PRD_VARIANT_SETUP
                WHERE F_PRD_MASTER_SETUP_NO = NEW.F_PRD_MASTER_SETUP_NO;


            SET NEW.CODE = PKCODE+1 ;
            SET NEW.COMPOSITE_CODE = CONCAT(VAR_COMPOSITE_CODE,PKCODE+1) ;

            SET NEW.MKT_CODE = VAR_IG_CODE+1 ;
            SET NEW.MRK_ID_COMPOSITE_CODE = CONCAT(VAR_IG_COMPOSITE_CODE, VAR_IG_CODE+1) ;

            IF NEW.IS_BARCODE_BY_MFG = 0 THEN
                SET NEW.BARCODE = CONCAT(VAR_COMPOSITE_CODE,PKCODE+1) ;
            END IF;
            INSERT INTO S VALUES(VAR_IG_COMPOSITE_CODE);
            INSERT INTO S VALUES(VAR_COMPOSITE_CODE);




            SELECT fnStripTags(IFNULL(NEW.NARRATION,'')) INTO VAR_NARRATION;
            SET VAR_KEYWORD_SEARCH = CONCAT(NEW.VARIANT_NAME, ' ', IFNULL(NEW.VARIANT_CUSTOMS_NAME,''), ' ', IFNULL(NEW.SIZE_NAME, ''), ' ', IFNULL(NEW.COLOR_NAME, ''),' ', IFNULL(VAR_PRD_CATEGORY_NAME, ''),' ' , IFNULL(NEW.MRK_ID_COMPOSITE_CODE,''), ' ', IFNULL(VAR_NARRATION,''));
            SET VAR_KEYWORD_SEARCH = SUBSTRING(VAR_KEYWORD_SEARCH,1,3090);

            SET NEW.KEYWORD_SEARCH = VAR_KEYWORD_SEARCH ;
END */$$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_PRD_VARIANT_SETUP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_PRD_VARIANT_SETUP_INSERT` AFTER INSERT ON `PRD_VARIANT_SETUP` FOR EACH ROW BEGIN

UPDATE PRD_MASTER_SETUP SET TOTAL_VARIANT = IFNULL(TOTAL_VARIANT,0)+1 WHERE PK_NO = NEW.F_PRD_MASTER_SETUP_NO;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_VARIANT_SETUP_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_VARIANT_SETUP_UPDATE` BEFORE UPDATE ON `PRD_VARIANT_SETUP` FOR EACH ROW BEGIN

		 
declare VAR_KEYWORD_SEARCH varchar(1000) default null ;
		declare VAR_NARRATION varchar(3000) default null ;
        declare VAR_F_PRD_CATEGORY_ID INT default 0 ;
        declare VAR_PRD_CATEGORY_NAME varchar(50) default NULL ;
        DECLARE VAR_IG_COMPOSITE_CODE VARCHAR(50) DEFAULT NULL ;

SELECT
PRD_MASTER_SETUP.MKT_ID_COMPOSITE_CODE_PREFIX
, PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
, PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
INTO
VAR_IG_COMPOSITE_CODE
, VAR_F_PRD_CATEGORY_ID
, VAR_PRD_CATEGORY_NAME
 FROM PRD_MASTER_SETUP
 JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
 WHERE PRD_MASTER_SETUP.PK_NO = NEW.F_PRD_MASTER_SETUP_NO;

			SELECT fnStripTags(IFNULL(NEW.NARRATION,'')) INTO VAR_NARRATION;
			SET VAR_KEYWORD_SEARCH = CONCAT(NEW.VARIANT_NAME, ' ', IFNULL(NEW.VARIANT_CUSTOMS_NAME,''), ' ', IFNULL(NEW.SIZE_NAME, ''), ' ', IFNULL(NEW.COLOR_NAME, ''), ' ', IFNULL(VAR_PRD_CATEGORY_NAME, ''),' ', IFNULL(NEW.MRK_ID_COMPOSITE_CODE,''), ' ', IFNULL(VAR_NARRATION,''));
			SET VAR_KEYWORD_SEARCH = SUBSTRING(VAR_KEYWORD_SEARCH,1,3090);

			SET NEW.KEYWORD_SEARCH = VAR_KEYWORD_SEARCH ;

            SET NEW.MRK_ID_COMPOSITE_CODE = CONCAT(VAR_IG_COMPOSITE_CODE, NEW.MKT_CODE) ;

		END */$$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_PRD_VARIANT_SETUP_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_PRD_VARIANT_SETUP_UPDATE` AFTER UPDATE ON `PRD_VARIANT_SETUP` FOR EACH ROW BEGIN
    
declare VAR_F_PRD_CATEGORY_ID INT default 0 ;
declare VAR_PRD_CATEGORY_NAME varchar(50) default NULL ;


IF NEW.BARCODE IS NOT NULL THEN
UPDATE INV_STOCK
SET BARCODE = NEW.BARCODE
WHERE F_PRD_VARIANT_NO = NEW.PK_NO;
END IF;

SELECT  PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
, PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
INTO VAR_F_PRD_CATEGORY_ID
, VAR_PRD_CATEGORY_NAME
 FROM PRD_MASTER_SETUP
 JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
 WHERE PRD_MASTER_SETUP.PK_NO = NEW.F_PRD_MASTER_SETUP_NO;

UPDATE INV_STOCK
        SET INSTALLMENT_PRICE = NEW.INSTALLMENT_PRICE
        , REGULAR_PRICE = NEW.REGULAR_PRICE
        , SPECIAL_PRICE = NEW.SPECIAL_PRICE
        , WHOLESALE_PRICE = NEW.WHOLESALE_PRICE
        , F_CATEGORY_NO = VAR_F_PRD_CATEGORY_ID
        , CATEGORY_NAME =  VAR_PRD_CATEGORY_NAME

WHERE INV_STOCK.ORDER_STATUS IS NULL AND INV_STOCK.F_PRD_VARIANT_NO = NEW.PK_NO;
	
        END */$$


DELIMITER ;

/* Trigger structure for table `SA_USER` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SA_USER_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SA_USER_INSERT` BEFORE INSERT ON `SA_USER` FOR EACH ROW BEGIN
			declare PKCODE int(4) default 0 ;

			select IFNULL(MAX(CODE),100) into PKCODE from SA_USER;
			SET NEW.CODE = PKCODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_BOX` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SC_BOX_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SC_BOX_INSERT` BEFORE INSERT ON `SC_BOX` FOR EACH ROW BEGIN

DECLARE PKCODE INT(11) DEFAULT 0;
DECLARE VAR_SHORT_NAME VARCHAR(3) DEFAULT NULL;

IF NEW.F_MERCHANT_NO = 0 THEN
SET NEW.PREFEX = 'AMT';
ELSE
SELECT SHORT_NAME INTO VAR_SHORT_NAME FROM SLS_MERCHANT WHERE PK_NO = NEW.F_MERCHANT_NO;
SET NEW.PREFEX = VAR_SHORT_NAME;
END IF;

select IFNULL(max(CODE),100000) into PKCODE
from SC_BOX;
    SET NEW.CODE = PKCODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_BOX_INV_STOCK` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_BOX_INV_STOCK_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_BOX_INV_STOCK_INSERT` AFTER INSERT ON `SC_BOX_INV_STOCK` FOR EACH ROW BEGIN

		UPDATE SC_BOX 
		SET ITEM_COUNT = ITEM_COUNT+1 
		WHERE PK_NO = NEW.F_BOX_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_BOX_INV_STOCK` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_BOX_INV_STOCK_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_BOX_INV_STOCK_DELETE` AFTER DELETE ON `SC_BOX_INV_STOCK` FOR EACH ROW BEGIN

		UPDATE SC_BOX 
		SET ITEM_COUNT = ITEM_COUNT-1 
		WHERE PK_NO = OLD.F_BOX_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_MERCHANT_BILL` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SC_MERCHANT_BILL_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SC_MERCHANT_BILL_INSERT` BEFORE INSERT ON `SC_MERCHANT_BILL` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;
declare VAR_SHIPMENT_NO int(11) default 0;

select IFNULL(max(CODE),100) into PKCODE
from SC_MERCHANT_BILL;
SET NEW.CODE = PKCODE+1 ;
SELECT CODE INTO VAR_SHIPMENT_NO FROM SC_SHIPMENT WHERE PK_NO = NEW.F_SHIPMENT_NO;
SET NEW.SHIPMENT_NO = VAR_SHIPMENT_NO;
END */$$


DELIMITER ;

/* Trigger structure for table `SC_SHIPMENT` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SC_SHIPMENT_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SC_SHIPMENT_INSERT` BEFORE INSERT ON `SC_SHIPMENT` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;
select IFNULL(max(CODE),100000) into PKCODE
		from SC_SHIPMENT;
		SET NEW.CODE = PKCODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_SHIPMENT_BOX` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_SHIPMENT_BOX_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_SHIPMENT_BOX_INSERT` AFTER INSERT ON `SC_SHIPMENT_BOX` FOR EACH ROW BEGIN

		UPDATE SC_SHIPMENT 
		SET SENDER_BOX_COUNT = SENDER_BOX_COUNT+1 
		WHERE PK_NO = NEW.F_SHIPMENT_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_SHIPMENT_BOX` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_SHIPMENT_BOX_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_SHIPMENT_BOX_DELETE` AFTER DELETE ON `SC_SHIPMENT_BOX` FOR EACH ROW BEGIN

		UPDATE SC_SHIPMENT 
		SET SENDER_BOX_COUNT = SENDER_BOX_COUNT-1 
		WHERE PK_NO = OLD.F_SHIPMENT_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_AGENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_AGENTS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_AGENTS_INSERT` BEFORE INSERT ON `SLS_AGENTS` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;



select auto_increment into PKCODE
from information_schema.tables
where table_name = 'SLS_AGENTS'
and table_schema = database();
    SET NEW.CODE = PKCODE+10 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_BOOKING_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_BOOKING_INSERT` BEFORE INSERT ON `SLS_BOOKING` FOR EACH ROW 

  BEGIN
DECLARE VAR_BOOKING_NO INT(11) DEFAULT 0;

SELECT IFNULL(MAX(BOOKING_NO),60000) INTO VAR_BOOKING_NO
        FROM SLS_BOOKING;
        SET NEW.BOOKING_NO = VAR_BOOKING_NO+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SLS_BOOKING_DETAILS_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SLS_BOOKING_DETAILS_DELETE` AFTER DELETE ON `SLS_BOOKING_DETAILS` FOR EACH ROW BEGIN
        
    declare VAR_FREIGHT_COST FLOAT default 0;
    declare VAR_POSTAGE_COST FLOAT default 0;
    declare VAR_PRICE FLOAT default 0;
    declare VAR_TOTAL_FREIGHT_POSTAGE FLOAT default 0;
    declare VAR_TOTAL_ITEM_QTY INT default 0;
    declare VAR_TOTAL_PRICE float default 0;
    declare VAR_F_BRAND INT default 0;
    declare VAR_BRAND_NAME varchar(50) default null;
    declare VAR_F_MODEL INT default 0;
    declare VAR_MODEL_NAME varchar(50) default NULL;
    declare VAR_F_PRD_CATEGORY_ID INT default 0;
    declare VAR_PRD_CATEGORY_NAME varchar(50) default NULL;
    declare VAR_F_PRD_SUB_CATEGORY_ID INT default 0;
    declare VAR_PRD_SUB_CATEGORY_NAME varchar(50) default null;
    declare VAR_F_PRD_VARIANT_NO INT default 0;
    DECLARE VAR_PENALTY_FEE FLOAT default 0;

    
    SELECT PENALTY_FEE INTO VAR_PENALTY_FEE
    FROM SLS_BOOKING
    WHERE PK_NO = OLD.F_BOOKING_NO;
    
    SELECT COUNT(*) AS TOTAL_QTY, SUM(LINE_PRICE) INTO VAR_TOTAL_ITEM_QTY, VAR_TOTAL_PRICE
    FROM SLS_BOOKING_DETAILS
    WHERE F_BOOKING_NO = OLD.F_BOOKING_NO;

    SELECT F_PRD_VARIANT_NO INTO VAR_F_PRD_VARIANT_NO FROM INV_STOCK WHERE PK_NO = OLD.F_INV_STOCK_NO;
    
    SELECT PRD_MASTER_SETUP.F_BRAND
    , PRD_MASTER_SETUP.BRAND_NAME
    , PRD_MASTER_SETUP.F_MODEL
    , PRD_MASTER_SETUP.MODEL_NAME
    , PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
    , PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
    , PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
    , PRD_SUB_CATEGORY.`NAME` AS  PRD_SUB_CATEGORY_NAME
    INTO VAR_F_BRAND
    , VAR_BRAND_NAME 
    , VAR_F_MODEL 
    , VAR_MODEL_NAME 
    , VAR_F_PRD_CATEGORY_ID 
    , VAR_PRD_CATEGORY_NAME 
    , VAR_F_PRD_SUB_CATEGORY_ID 
    , VAR_PRD_SUB_CATEGORY_NAME
    FROM PRD_MASTER_SETUP
    JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID   
    JOIN PRD_SUB_CATEGORY ON PRD_SUB_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID 
    WHERE PRD_MASTER_SETUP.PK_NO = (SELECT F_PRD_MASTER_SETUP_NO FROM PRD_VARIANT_SETUP WHERE PK_NO = VAR_F_PRD_VARIANT_NO); 
 
    
    IF OLD.CURRENT_IS_FREIGHT = 1 THEN
        SET VAR_FREIGHT_COST = OLD.CURRENT_AIR_FREIGHT;
    ELSE
        SET VAR_FREIGHT_COST = OLD.CURRENT_SEA_FREIGHT;
    END IF;

    IF OLD.CURRENT_IS_SM = 1 THEN
        SET VAR_POSTAGE_COST = OLD.CURRENT_SM_COST;
    ELSE
        SET VAR_POSTAGE_COST = OLD.CURRENT_SS_COST;
    END IF;

    IF OLD.CURRENT_IS_REGULAR = 1 THEN
        SET VAR_PRICE = OLD.CURRENT_REGULAR_PRICE;
    ELSE
        SET VAR_PRICE = OLD.CURRENT_INSTALLMENT_PRICE;
    END IF;

    SET VAR_TOTAL_FREIGHT_POSTAGE = VAR_FREIGHT_COST + VAR_POSTAGE_COST + VAR_PRICE;
    SET VAR_TOTAL_PRICE = VAR_TOTAL_PRICE + VAR_PENALTY_FEE;

    UPDATE SLS_BOOKING
    SET
    FREIGHT_COST = FREIGHT_COST - VAR_FREIGHT_COST
    ,POSTAGE_COST = POSTAGE_COST - VAR_POSTAGE_COST
    ,TOTAL_ITEM_QTY = VAR_TOTAL_ITEM_QTY 
    ,TOTAL_PRICE = VAR_TOTAL_PRICE
    WHERE PK_NO = OLD.F_BOOKING_NO;
    
    UPDATE INV_STOCK
            SET F_BRAND_NO = VAR_F_BRAND 
            , BRAND_NAME = VAR_BRAND_NAME 
            , F_MODEL_NO = VAR_F_MODEL  
            , MODEL_NAME = VAR_MODEL_NAME 
            , F_CATEGORY_NO = VAR_F_PRD_CATEGORY_ID 
            , CATEGORY_NAME =  VAR_PRD_CATEGORY_NAME 
            , F_SUB_CATEGORY_NO = VAR_F_PRD_SUB_CATEGORY_ID 
            , SUB_CATEGORY_NAME = VAR_PRD_SUB_CATEGORY_NAME
          
            WHERE PK_NO = OLD.F_INV_STOCK_NO AND F_BOOKING_NO IS NULL;
     
END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS_TEMP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_BOOKING_DETAILS_TEMP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_BOOKING_DETAILS_TEMP_INSERT` BEFORE INSERT ON `SLS_BOOKING_DETAILS_TEMP` FOR EACH ROW BEGIN
    declare VAR_SS_COST FLOAT default 0;
    declare VAR_SM_COST FLOAT default 0;
    declare VAR_AIR_FREIGHT FLOAT default 0;
    declare VAR_SEA_FREIGHT FLOAT default 0;
    declare VAR_REGULAR FLOAT default 0;
    declare VAR_INSTALLMENT FLOAT default 0;
    declare VAR_IS_REGULAR INT default 0;
    declare VAR_UNIT_PRICE FLOAT default 0;
    declare VAR_SINGLE_COMISSION FLOAT default 0;
    declare VAR_TOTAL_COMISSION FLOAT default 0;
    DECLARE VAR_TOTAL_LINE_VALUE FLOAT default 0;

    SELECT
        SS_COST,SM_COST
        ,AIR_FREIGHT_COST
        ,SEA_FREIGHT_COST
        ,REGULAR_PRICE
        ,INSTALLMENT_PRICE
        INTO
        VAR_SS_COST
        ,VAR_SM_COST
        ,VAR_AIR_FREIGHT
        ,VAR_SEA_FREIGHT
        ,VAR_REGULAR
        ,VAR_INSTALLMENT
    FROM INV_STOCK
    WHERE INV_STOCK.PK_NO = NEW.F_INV_STOCK_NO;

    SET NEW.SS_COST                     = VAR_SS_COST;
    SET NEW.SM_COST                     = VAR_SM_COST;
    SET NEW.AIR_FREIGHT                 = VAR_AIR_FREIGHT;
    SET NEW.SEA_FREIGHT                 = VAR_SEA_FREIGHT;
    SET NEW.REGULAR_PRICE               = VAR_REGULAR;
    SET NEW.INSTALLMENT_PRICE           = VAR_INSTALLMENT;

    SET NEW.CURRENT_SS_COST             = VAR_SS_COST;
    SET NEW.CURRENT_SM_COST             = VAR_SM_COST;
    SET NEW.CURRENT_AIR_FREIGHT         = VAR_AIR_FREIGHT;
    SET NEW.CURRENT_SEA_FREIGHT         = VAR_SEA_FREIGHT;
    SET NEW.CURRENT_REGULAR_PRICE       = VAR_REGULAR;
    SET NEW.CURRENT_INSTALLMENT_PRICE   = VAR_INSTALLMENT;
    SET NEW.ORDER_STATUS                = 10;
    SET VAR_IS_REGULAR                  = NEW.CURRENT_IS_REGULAR;

    IF VAR_IS_REGULAR = 0 THEN
        SET VAR_UNIT_PRICE = VAR_INSTALLMENT;
    ELSE
        SET VAR_UNIT_PRICE = VAR_REGULAR;
    END IF;

   

    -- UPDATE LINE_PRICE
    IF NEW.CURRENT_IS_FREIGHT = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_AIR_FREIGHT;
        ELSEIF NEW.CURRENT_IS_FREIGHT = 2 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SEA_FREIGHT;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE + 0;
        END IF;

        IF NEW.IS_SELF_PICKUP = 0 THEN
           IF NEW.CURRENT_IS_SM = 1 THEN
           SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SM_COST;
           ELSE
           SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SS_COST;
           END IF;  
        END IF;

        IF NEW.CURRENT_IS_REGULAR = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_REGULAR_PRICE;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_INSTALLMENT_PRICE;
        END IF;

        SET NEW.LINE_PRICE = VAR_TOTAL_LINE_VALUE;


END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS_TEMP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SLS_BOOKING_DETAILS_TEMP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SLS_BOOKING_DETAILS_TEMP_INSERT` AFTER INSERT ON `SLS_BOOKING_DETAILS_TEMP` FOR EACH ROW BEGIN

    declare VAR_TOTAL_ITEM_QTY int default 0; 
    declare VAR_TOTAL_PRICE float default 0;

    SELECT COUNT(*) AS TOTAL_QTY,SUM(LINE_PRICE) INTO VAR_TOTAL_ITEM_QTY,VAR_TOTAL_PRICE
    FROM SLS_BOOKING_DETAILS_TEMP
    WHERE F_BOOKING_NO = NEW.F_BOOKING_NO;
                                        
    UPDATE SLS_BOOKING_TEMP SET TOTAL_ITEM_QTY = VAR_TOTAL_ITEM_QTY,TOTAL_PRICE = VAR_TOTAL_PRICE WHERE PK_NO = NEW.F_BOOKING_NO;
    
    

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_CHECK_OFFER` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_CHECK_OFFER_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_CHECK_OFFER_INSERT` BEFORE INSERT ON `SLS_CHECK_OFFER` FOR EACH ROW BEGIN

        IF NEW.IS_PROCESSED = 0 THEN
        SET NEW.REGULAR_BUNDLE_PRICE = NEW.REGULAR_PRICE;
        SET NEW.INSTALLMENT_BUNDLE_PRICE = NEW.INSTALLMENT_PRICE;
        END IF;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_COUPON_MASTER` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_COUPON_MASTER_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_COUPON_MASTER_INSERT` BEFORE INSERT ON `SLS_COUPON_MASTER` FOR EACH ROW BEGIN
declare VAR_CODE int(11) default 0;

select IFNULL(max(CODE),100) into VAR_CODE
        from SLS_COUPON_MASTER;
        SET NEW.CODE = VAR_CODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_CUSTOMERS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_CUSTOMERS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_CUSTOMERS_INSERT` BEFORE INSERT ON `SLS_CUSTOMERS` FOR EACH ROW BEGIN
declare VAR_CODE int(11) default 0;
declare VAR_CUSTOMER_NO int(11) default 0;

SELECT
    IFNULL(max(CODE),100) AS SCODE,
    IFNULL(MAX(CUSTOMER_NO),10000) AS SCUSTOMER_NO
    INTO  VAR_CODE, VAR_CUSTOMER_NO
FROM SLS_CUSTOMERS;

	SET NEW.CODE = VAR_CODE+1 ;


   SET NEW.CUSTOMER_NO = VAR_CUSTOMER_NO+1;


END */$$


DELIMITER ;

/* Trigger structure for table `SLS_CUSTOMERS_ADDRESS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_CUSTOMERS_ADDRESS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_CUSTOMERS_ADDRESS_INSERT` BEFORE INSERT ON `SLS_CUSTOMERS_ADDRESS` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;
declare CUST_CODE int(11) default 0;


select IFNULL(max(CODE),1) into CUST_CODE
from SLS_CUSTOMERS 
where PK_NO = NEW.F_CUSTOMER_NO;

select IFNULL(max(CODE),1) into PKCODE
from SLS_CUSTOMERS_ADDRESS 
where F_CUSTOMER_NO = NEW.F_CUSTOMER_NO;

	SET NEW.CODE = CONCAT(CUST_CODE,PKCODE+1) ;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_MERCHANT` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_MERCHANT_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_MERCHANT_INSERT` BEFORE INSERT ON `SLS_MERCHANT` FOR EACH ROW BEGIN

declare VAR_MERCHANT_NO int(11) default 0;

SELECT IFNULL(MAX(MERCHANT_NO),100) AS SMERCHANT_NO INTO  VAR_MERCHANT_NO FROM SLS_MERCHANT;

    SET NEW.MERCHANT_NO = VAR_MERCHANT_NO+1;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_NOTIFICATION` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_NOTIFICATION_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_NOTIFICATION_INSERT` BEFORE INSERT ON `SLS_NOTIFICATION` FOR EACH ROW BEGIN
    DECLARE VAR_MOBILE_NO VARCHAR(40) DEFAULT NULL;

    IF NEW.IS_SELLER = 1 THEN

        SELECT
        CONCAT(SS_COUNTRY.DIAL_CODE,SLS_SELLERS.MOBILE_NO) AS FULL_MOBILE_NO INTO VAR_MOBILE_NO
        FROM SLS_SELLERS
        JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_SELLERS.F_COUNTRY_NO
        WHERE SLS_SELLERS.PK_NO = NEW.SELLER_NO;

    END IF;

    IF NEW.IS_SELLER = 0 THEN

        SELECT
        CONCAT(SS_COUNTRY.DIAL_CODE,SLS_CUSTOMERS.MOBILE_NO) AS FULL_MOBILE_NO INTO VAR_MOBILE_NO
        FROM SLS_CUSTOMERS
        JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_CUSTOMERS.F_COUNTRY_NO
        WHERE SLS_CUSTOMERS.PK_NO = NEW.CUSTOMER_NO;


    END IF;

    SET NEW.MOBILE_NO = VAR_MOBILE_NO;



END */$$


DELIMITER ;

/* Trigger structure for table `SLS_NOTIFICATION_EMAIL` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_NOTIFICATION_EMAIL_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_NOTIFICATION_EMAIL_INSERT` BEFORE INSERT ON `SLS_NOTIFICATION_EMAIL` FOR EACH ROW BEGIN
    DECLARE VAR_MOBILE_NO VARCHAR(40) DEFAULT NULL;
    DECLARE VAR_EMAIL VARCHAR(40) DEFAULT NULL; 
    IF NEW.TYPE != 'Payment Confirmation' THEN   
       IF NEW.IS_SELLER = 0 THEN
                  
          SELECT
          CONCAT(SS_COUNTRY.DIAL_CODE,SLS_ORDER.DELIVERY_MOBILE) AS FULL_MOBILE_NO,DELIVERY_EMAIL INTO VAR_MOBILE_NO,VAR_EMAIL
          FROM SLS_ORDER
          JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_ORDER.DELIVERY_F_COUNTRY_NO
          WHERE SLS_ORDER.F_BOOKING_NO = NEW.F_BOOKING_NO;
    
       ELSE  
          SELECT
          CONCAT(SS_COUNTRY.DIAL_CODE,SLS_ORDER.FROM_MOBILE) AS FULL_MOBILE_NO,DELIVERY_EMAIL INTO VAR_MOBILE_NO,VAR_EMAIL
          FROM SLS_ORDER
          JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_ORDER.FROM_F_COUNTRY_NO
          WHERE SLS_ORDER.F_BOOKING_NO = NEW.F_BOOKING_NO;
       
       END IF;

       SET NEW.MOBILE_NO = VAR_MOBILE_NO;
       SET NEW.EMAIL = VAR_EMAIL;

    END IF; 


END */$$


DELIMITER ;

/* Trigger structure for table `SLS_ORDER` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_ORDER_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_ORDER_INSERT` BEFORE INSERT ON `SLS_ORDER` FOR EACH ROW BEGIN
declare VAR_BOOKING_NO int(11) default 0;
declare VAR_ORDER_GROUP_ID int(11) default 0;
declare INT_ORDER_GROUP_PK int(11) default 0;
declare VAR_TOTAL_PRICE Float;

IF NEW.ORDER_TYPE_NAME IS NULL THEN
        select IFNULL(max(BOOKING_NO),60000) into VAR_BOOKING_NO
        from SLS_BOOKING;
        select TOTAL_PRICE into VAR_TOTAL_PRICE
        from SLS_BOOKING where PK_NO = NEW.F_BOOKING_NO;
        
        SET VAR_BOOKING_NO = VAR_BOOKING_NO+1;
       IF NEW.ORDER_GROUP_ID IS NULL OR NEW.ORDER_GROUP_ID = '' THEN
        
           IF NEW.IS_SELLER = 0 THEN
              SET VAR_ORDER_GROUP_ID = concat(VAR_BOOKING_NO,NEW.F_CUSTOMER_NO);
           ELSE    
              SET VAR_ORDER_GROUP_ID = concat(VAR_BOOKING_NO,NEW.F_SELLER_NO);
           END IF;    
        
           INSERT INTO SLS_ORDER_GROUP (ORDER_GROUP_ID,TOTAL_PRICE) VALUES (VAR_ORDER_GROUP_ID,VAR_TOTAL_PRICE);         
           SELECT LAST_INSERT_ID() INTO INT_ORDER_GROUP_PK; 
           SET NEW.ORDER_GROUP_ID = INT_ORDER_GROUP_PK;
        END IF;
END IF;  
        
END */$$


DELIMITER ;

/* Trigger structure for table `SLS_SELLERS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_SELLERS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_SELLERS_INSERT` BEFORE INSERT ON `SLS_SELLERS` FOR EACH ROW BEGIN
declare VAR_CODE int(11) default 0;
declare VAR_SELLER_NO int(11) default 0;

SELECT
    IFNULL(max(CODE),100) AS SCODE,
    IFNULL(MAX(SELLER_NO),2000) AS SSELLER_NO
    INTO  VAR_CODE, VAR_SELLER_NO
FROM SLS_SELLERS;

    SET NEW.CODE = VAR_CODE+1 ;   
    IF NEW.FK_PARENT_USER_NO = 0 THEN  
       SET NEW.SHOP_ID = (SELECT MAX(PK_NO) + 1 FROM SLS_SELLERS);
    ELSE
       SET NEW.SHOP_ID = NEW.FK_PARENT_USER_NO;
    END IF;
    

    SET NEW.SELLER_NO = VAR_SELLER_NO+1;


END */$$


DELIMITER ;

/* Trigger structure for table `SS_SUB_AREA_POLYGON` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SUB_AREA_POLYGON_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SUB_AREA_POLYGON_INSERT` BEFORE INSERT ON `SS_SUB_AREA_POLYGON` FOR EACH ROW BEGIN
declare VAR_NODE_NO int(11) default 0;

SELECT
    IFNULL(MAX(NODE_NO),100) AS NODE_NO
    INTO VAR_NODE_NO
FROM SS_SUB_AREA_POLYGON;
   SET NEW.NODE_NO = VAR_NODE_NO+1;
END */$$


DELIMITER ;

/* Trigger structure for table `SS_SUB_AREA_POLYGON` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SS_SUB_AREA_POLYGON_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SS_SUB_AREA_POLYGON_INSERT` AFTER INSERT ON `SS_SUB_AREA_POLYGON` FOR EACH ROW BEGIN
declare VAR_TOTAL_NODE int(8) default 0;
declare VAR_MIN_LAT varchar(20) default 0;
declare VAR_MIN_LON varchar(20) default 0;
declare VAR_MAX_LAT varchar(20) default 0;
declare VAR_MAX_LON varchar(20) default 0;
declare VAR_ROWCOUNT varchar(20) default 0;

SELECT COUNT(*) AS TOTAL_NODE INTO VAR_TOTAL_NODE FROM SS_SUB_AREA_POLYGON 
WHERE F_SUB_AREA_NO = NEW.F_SUB_AREA_NO;


SELECT 
MAX(LAT),
MAX(LON),
MIN(LAT),
MIN(LON)  INTO VAR_MAX_LAT, VAR_MAX_LON, VAR_MIN_LAT, VAR_MIN_LON
FROM SS_SUB_AREA_POLYGON WHERE F_SUB_AREA_NO = NEW.F_SUB_AREA_NO;



UPDATE SS_SUB_AREA 
SET 
TOTAL_NODE = VAR_TOTAL_NODE, 

MAX_LAT = VAR_MAX_LAT,
MIN_LAT = VAR_MIN_LAT,

MAX_LON = VAR_MAX_LON,
MIN_LON = VAR_MIN_LON 


WHERE PK_NO = NEW.F_SUB_AREA_NO;
  

END */$$


DELIMITER ;

/* Trigger structure for table `WEB_PRD_REVIEWS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_WEB_PRD_REVIEW_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_WEB_PRD_REVIEW_INSERT` BEFORE INSERT ON `WEB_PRD_REVIEWS` FOR EACH ROW BEGIN
    declare VAR_NAME VARCHAR(200) default NULL;
    declare VAR_F_PRD_MASTER_SETUP_NO INT(11) default 0;

    SELECT
        NAME
        INTO
        VAR_NAME
    FROM SLS_CUSTOMERS
    WHERE SLS_CUSTOMERS.PK_NO = NEW.F_CUSTOMER_NO;
                     
    
    SET NEW.CUSTOMER_NAME = VAR_NAME;         
    
    SELECT  
        F_PRD_MASTER_SETUP_NO
        INTO
        VAR_F_PRD_MASTER_SETUP_NO
        FROM PRD_VARIANT_SETUP
    WHERE PRD_VARIANT_SETUP.PK_NO = NEW.F_PRD_VARIANT_NO;     
    
    SET NEW.F_PRD_MASTER_SETUP_NO = VAR_F_PRD_MASTER_SETUP_NO;

END */$$


DELIMITER ;

/* Function  structure for function  `fnStripTags` */

/*!50003 DROP FUNCTION IF EXISTS `fnStripTags` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` FUNCTION `fnStripTags`(Dirty VarChar(4000)) RETURNS varchar(4000) CHARSET latin1
    NO SQL
BEGIN
  DECLARE iStart, iEnd, iLength int;
    WHILE Locate( '<', Dirty ) > 0 And Locate( '>', Dirty, Locate( '<', Dirty )) > 0 DO
      BEGIN
        SET iStart = Locate( '<', Dirty ), iEnd = Locate( '>', Dirty, Locate('<', Dirty ));
        SET iLength = ( iEnd - iStart) + 1;
        IF iLength > 0 THEN
          BEGIN
            SET Dirty = Insert( Dirty, iStart, iLength, ' ');
          END;
        END IF;
      END;
    END WHILE;
    RETURN Dirty;
END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_CUSTOMER_BOOKING` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_CUSTOMER_BOOKING` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_CUSTOMER_BOOKING`(
    IN_PK_NO Integer(11), 
    IN_POSTAGE_COST FLOAT,
    IN_COUPON_DISCOUNT FLOAT,
    IN_DISCOUNT FLOAT
    )
    NO SQL
BEGIN

        DECLARE VAR_TOTAL_PRICE FLOAT default 0;
        DECLARE VAR_SUBTOTAL_PRICE FLOAT default 0;
        DECLARE VAR_POSTAGE_COST FLOAT default 0;
        DECLARE VAR_DISCOUNT FLOAT default 0;
        DECLARE VAR_COUPON_DISCOUNT FLOAT default 0;
        DECLARE VAR_TOTAL_PRICE_DECIMAL FLOAT default 0;
        DECLARE VAR_TOTAL_ITEM_QTY int default 0; 
        DECLARE VAR_SUBTOTAL_PRICE_DECIMAL FLOAT default 0;

        INSERT INTO A VALUES(2);


        SELECT SUM(LINE_QTY) AS TOTAL_QTY,SUM(LINE_PRICE) INTO VAR_TOTAL_ITEM_QTY,VAR_SUBTOTAL_PRICE

        FROM SLS_BOOKING_DETAILS

        WHERE F_BOOKING_NO = IN_PK_NO;

        INSERT INTO A VALUES(3);
        
        SELECT (VAR_SUBTOTAL_PRICE % 1) INTO VAR_SUBTOTAL_PRICE_DECIMAL;
        IF VAR_SUBTOTAL_PRICE_DECIMAL < .5 THEN
        SELECT FLOOR(VAR_SUBTOTAL_PRICE) INTO VAR_SUBTOTAL_PRICE;
        ELSE
        SELECT CEILING(VAR_SUBTOTAL_PRICE) INTO VAR_SUBTOTAL_PRICE;
        END IF;

        INSERT INTO A VALUES(4);


        UPDATE SLS_BOOKING SET 
        TOTAL_ITEM_QTY = VAR_TOTAL_ITEM_QTY,
        SUB_TOTAL = IFNULL(VAR_SUBTOTAL_PRICE,0),
        POSTAGE_COST = IFNULL(IN_POSTAGE_COST,0),
        COUPON_DISCOUNT = IFNULL(IN_COUPON_DISCOUNT,0),
        DISCOUNT = IFNULL(IN_DISCOUNT,0),
        TOTAL_PRICE = (IFNULL(VAR_SUBTOTAL_PRICE,0)+IFNULL(IN_POSTAGE_COST,0)) - (IFNULL(COUPON_DISCOUNT,0)+IFNULL(DISCOUNT,0))
        WHERE PK_NO = IN_PK_NO;
        INSERT INTO A VALUES(5);


END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_CUSTOMER_PAYMENT` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_CUSTOMER_PAYMENT` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`ukshop_dev_user`@`%` PROCEDURE `PROC_CUSTOMER_PAYMENT`(IN_PK_NO Integer(11), IN_TYPE VarChar(20))
    NO SQL
BEGIN
   -- INSET A NEW ENTRY IN ACC_BANK_TXN
    -- UPDATE ACC_PAYMENT_BANK_ACC BALACNE_BUFFER (INCREMENT)
    -- UPDATE SLS_CUSTOMERS CUSTOMER_BALANCE_BUFFER (INCREMENT)

        DECLARE VAR_ACC_CUSTOMER_PAYMENTS_PK_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_NO INT DEFAULT 0;
        DECLARE VAR_F_PAYMENT_ACC_NO INT DEFAULT 0;
        DECLARE VAR_ACC_MERCHANT_PAYMENTS_PK_NO INT DEFAULT 0;
        DECLARE VAR_F_SS_CREATED_BY INT DEFAULT 0;
        DECLARE VAR_IS_MATCHED INT DEFAULT 0;
        DECLARE VAR_PAY_AMOUNT FLOAT DEFAULT 0;     
        DECLARE VAR_PAYMENT_REMAINING FLOAT DEFAULT 0;
        DECLARE VAR_AMOUNT_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_PAYMENT_TYPE FLOAT DEFAULT 1;
        DECLARE VAR_TOTAL_PAYMENT_REMAINING FLOAT DEFAULT 0;
        DECLARE VAR_PAYMENT_DATE DATE DEFAULT NULL;
        DECLARE VAR_CUM_BALANCE FLOAT DEFAULT 0;
        DECLARE VAR_CUSTOMER_BALANCE_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_MR_AMOUNT FLOAT DEFAULT 0;   

        


    IF IN_TYPE = 'customer' THEN

    INSERT INTO A VALUES(1);


        SELECT PK_NO, F_CUSTOMER_NO,F_PAYMENT_ACC_NO,PAY_AMOUNT,PAYMENT_DATE,
        F_SS_CREATED_BY,PAYMENT_TYPE,PAYMENT_REMAINING INTO VAR_ACC_CUSTOMER_PAYMENTS_PK_NO,
         VAR_F_CUSTOMER_NO, VAR_F_PAYMENT_ACC_NO, VAR_PAY_AMOUNT, VAR_PAYMENT_DATE,
         VAR_F_SS_CREATED_BY,VAR_PAYMENT_TYPE,VAR_PAYMENT_REMAINING FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = IN_PK_NO;
             IF VAR_PAYMENT_TYPE = 3 THEN
                -- SET VAR_IS_MATCHED = 1;
                SET VAR_AMOUNT_ACTUAL = VAR_PAY_AMOUNT;
             END IF;
             IF VAR_PAYMENT_TYPE = 4 THEN
                -- SET VAR_IS_MATCHED = 1;
                SET VAR_AMOUNT_ACTUAL = VAR_PAY_AMOUNT;
             END IF;

            INSERT INTO ACC_BANK_TXN(
                TXN_REF, 
                TXN_TYPE_IN_OUT, 
                TXN_DATE,
                AMOUNT_ACTUAL, 
                -- AMOUNT_BUFFER, 
                IS_CUS_SELLER_BANK_RECONCILATION, 
                F_PAYMENT_ACC_NO, 
                F_CUSTOMER_NO,
                F_CUSTOMER_PAYMENT_NO,
                F_SS_CREATED_BY,
                SS_CREATED_ON,
                PAYMENT_TYPE
                -- IS_MATCHED
                )
                VALUES(
                    NULL, 
                    1, 
                    VAR_PAYMENT_DATE,
                    VAR_AMOUNT_ACTUAL,
                    -- VAR_PAY_AMOUNT, 
                    1, 
                    VAR_F_PAYMENT_ACC_NO, 
                    VAR_F_CUSTOMER_NO,
                    VAR_ACC_CUSTOMER_PAYMENTS_PK_NO,
                    VAR_F_SS_CREATED_BY,
                    NOW(),
                    VAR_PAYMENT_TYPE
                    -- VAR_IS_MATCHED
                    );

            IF VAR_PAYMENT_TYPE = 3 THEN

                INSERT INTO A VALUES(2);

                UPDATE ACC_PAYMENT_BANK_ACC
                SET 
                -- BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_PAY_AMOUNT,
                BALANCE_ACTUAL = IFNULL(BALANCE_ACTUAL,0)  + VAR_PAY_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                INSERT INTO A VALUES(3);


                UPDATE SLS_CUSTOMERS
                SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0)  + VAR_PAY_AMOUNT
                ,CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0)  + VAR_PAY_AMOUNT
                ,CUM_BALANCE = IFNULL(CUM_BALANCE,0)  + VAR_PAY_AMOUNT
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

                INSERT INTO A VALUES(4);
                INSERT INTO A VALUES(VAR_PAY_AMOUNT);



                

            ELSEIF VAR_PAYMENT_TYPE = 2 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET 
                -- BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_PAY_AMOUNT,
                BALANCE_ACTUAL = IFNULL(BALANCE_ACTUAL,0)  + VAR_PAY_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_CUSTOMERS
                SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0)  + VAR_PAY_AMOUNT
                ,CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0)  + VAR_PAY_AMOUNT
                ,CUM_BALANCE = IFNULL(CUM_BALANCE,0)  + VAR_PAY_AMOUNT
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

            ELSEIF VAR_PAYMENT_TYPE = 1 THEN
                -- UPDATE ACC_PAYMENT_BANK_ACC
                -- SET 
                -- BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_PAY_AMOUNT
                -- WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_CUSTOMERS
                SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0)  + VAR_PAY_AMOUNT
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

            ELSEIF VAR_PAYMENT_TYPE = 4 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET 
                -- BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_PAY_AMOUNT,
                BALANCE_ACTUAL = IFNULL(BALANCE_ACTUAL,0)  + VAR_PAY_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_CUSTOMERS
                SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0)  + VAR_PAY_AMOUNT
                ,CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0)  + VAR_PAY_AMOUNT   
                ,CUM_BALANCE = IFNULL(CUM_BALANCE,0)  + VAR_PAYMENT_REMAINING
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

            END IF;




    ELSEIF IN_TYPE = 'seller' THEN

            SELECT PK_NO, F_SELLER_NO,F_PAYMENT_ACC_NO,MR_AMOUNT,PAYMENT_DATE,F_SS_CREATED_BY,PAYMENT_TYPE,PAYMENT_REMAINING_MR INTO VAR_ACC_CUSTOMER_PAYMENTS_PK_NO, VAR_F_CUSTOMER_NO, VAR_F_PAYMENT_ACC_NO, VAR_MR_AMOUNT, VAR_PAYMENT_DATE,VAR_F_SS_CREATED_BY,VAR_PAYMENT_TYPE,VAR_PAYMENT_REMAINING FROM ACC_SELLER_PAYMENTS WHERE PK_NO = IN_PK_NO;



            IF VAR_PAYMENT_TYPE = 3 THEN
                SET VAR_IS_MATCHED = 1;
                SET VAR_AMOUNT_ACTUAL = VAR_MR_AMOUNT;
             END IF;
             IF VAR_PAYMENT_TYPE = 4 THEN
                SET VAR_IS_MATCHED = 1;    
                SET VAR_AMOUNT_ACTUAL = VAR_MR_AMOUNT;
             END IF;

 INSERT INTO ACC_BANK_TXN(TXN_REF, TXN_TYPE_IN_OUT, TXN_DATE, AMOUNT_ACTUAL, AMOUNT_BUFFER, IS_CUS_SELLER_BANK_RECONCILATION, F_ACC_PAYMENT_BANK_NO, F_SELLER_NO, F_SELLER_PAYMENT_NO,F_SS_CREATED_BY,SS_CREATED_ON,PAYMENT_TYPE,IS_MATCHED)
            VALUES(NULL, 1, VAR_PAYMENT_DATE, VAR_AMOUNT_ACTUAL, VAR_MR_AMOUNT, 2, VAR_F_PAYMENT_ACC_NO, VAR_F_CUSTOMER_NO,VAR_ACC_CUSTOMER_PAYMENTS_PK_NO,VAR_F_SS_CREATED_BY,NOW(),VAR_PAYMENT_TYPE, VAR_IS_MATCHED);



            IF VAR_PAYMENT_TYPE = 3 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT
                ,BALANCE_ACTUAL = IFNULL(BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_SELLERS
                SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0)  + VAR_MR_AMOUNT
                ,CUM_BALANCE_ACTUAL = IFNULL(CUM_BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                ,CUM_BALANCE = IFNULL(CUM_BALANCE,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_CUSTOMER_NO;


            ELSEIF VAR_PAYMENT_TYPE = 2 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT
                ,BALANCE_ACTUAL = IFNULL(BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_SELLERS
                SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0)  + VAR_MR_AMOUNT
                ,CUM_BALANCE_ACTUAL = IFNULL(CUM_BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                ,CUM_BALANCE = IFNULL(CUM_BALANCE,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

            ELSEIF VAR_PAYMENT_TYPE = 1 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_SELLERS
                SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

            ELSEIF VAR_PAYMENT_TYPE = 4 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT
                ,BALANCE_ACTUAL = IFNULL(BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_SELLERS
                SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0)  + VAR_MR_AMOUNT
                ,CUM_BALANCE_ACTUAL = IFNULL(CUM_BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                ,CUM_BALANCE = IFNULL(CUM_BALANCE,0)  + VAR_PAYMENT_REMAINING
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

            END IF;


ELSEIF IN_TYPE = 'merchant' THEN

            SELECT PK_NO, F_MERCHANT_NO,F_PAYMENT_ACC_NO,MR_AMOUNT,PAYMENT_DATE,F_SS_CREATED_BY,PAYMENT_TYPE INTO VAR_ACC_MERCHANT_PAYMENTS_PK_NO, VAR_F_CUSTOMER_NO, VAR_F_PAYMENT_ACC_NO, VAR_MR_AMOUNT, VAR_PAYMENT_DATE,VAR_F_SS_CREATED_BY,VAR_PAYMENT_TYPE FROM ACC_MERCHANT_PAYMENTS WHERE PK_NO = IN_PK_NO;




 INSERT INTO ACC_BANK_TXN(TXN_REF, TXN_TYPE_IN_OUT, TXN_DATE, AMOUNT_ACTUAL, AMOUNT_BUFFER, IS_CUS_SELLER_BANK_RECONCILATION, F_ACC_PAYMENT_BANK_NO, F_MERCHANT_NO, F_MERCHANT_PAYMENT_NO,F_SS_CREATED_BY,SS_CREATED_ON,PAYMENT_TYPE,IS_MATCHED)
        VALUES(NULL, 1, VAR_PAYMENT_DATE, VAR_MR_AMOUNT, VAR_MR_AMOUNT, 4, VAR_F_PAYMENT_ACC_NO, VAR_F_CUSTOMER_NO,VAR_ACC_MERCHANT_PAYMENTS_PK_NO,VAR_F_SS_CREATED_BY,NOW(),VAR_PAYMENT_TYPE, 1);



            IF VAR_PAYMENT_TYPE = 1 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT,
                BALANCE_ACTUAL = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;
              

            END IF;


    END IF;



END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_CUSTOMER_PAYMENT_DELETE` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_CUSTOMER_PAYMENT_DELETE` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_CUSTOMER_PAYMENT_DELETE`(IN_PK_NO Integer(11), IN_TYPE VarChar(20))
    NO SQL
BEGIN


        DECLARE VAR_ACC_CUSTOMER_PAYMENTS_PK_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_NO INT DEFAULT 0;
        DECLARE VAR_F_PAYMENT_ACC_NO INT DEFAULT 0;
        DECLARE VAR_PAYMENT_CONFIRMED_STATUS INT DEFAULT 0;
        DECLARE VAR_MR_AMOUNT FLOAT DEFAULT 0;
        DECLARE VAR_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE VAR_PAYMENT_DATE DATE DEFAULT NULL;

    IF IN_TYPE = 'customer' THEN


            SELECT PK_NO, F_CUSTOMER_NO,F_PAYMENT_ACC_NO,MR_AMOUNT,PAYMENT_REMAINING_MR,PAYMENT_DATE,PAYMENT_CONFIRMED_STATUS INTO VAR_ACC_CUSTOMER_PAYMENTS_PK_NO, VAR_F_CUSTOMER_NO, VAR_F_PAYMENT_ACC_NO, VAR_MR_AMOUNT, VAR_PAYMENT_REMAINING_MR,VAR_PAYMENT_DATE, VAR_PAYMENT_CONFIRMED_STATUS
                FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = IN_PK_NO;


                    IF VAR_PAYMENT_CONFIRMED_STATUS = 1 THEN

                            UPDATE SLS_CUSTOMERS
                            SET CUSTOMER_BALANCE_BUFFER = CUSTOMER_BALANCE_BUFFER - VAR_MR_AMOUNT
                            ,CUSTOMER_BALANCE_ACTUAL = CUSTOMER_BALANCE_ACTUAL - VAR_MR_AMOUNT
                            ,CUM_BALANCE = CUM_BALANCE - VAR_PAYMENT_REMAINING_MR
                            WHERE PK_NO = VAR_F_CUSTOMER_NO;


                            UPDATE ACC_PAYMENT_BANK_ACC
                            SET BALACNE_BUFFER = BALACNE_BUFFER - VAR_MR_AMOUNT
                            ,BALANCE_ACTUAL = BALANCE_ACTUAL - VAR_MR_AMOUNT
                            WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;



                    ELSE
                            UPDATE SLS_CUSTOMERS SET CUSTOMER_BALANCE_BUFFER = CUSTOMER_BALANCE_BUFFER - VAR_MR_AMOUNT WHERE PK_NO = VAR_F_CUSTOMER_NO;


                            UPDATE ACC_PAYMENT_BANK_ACC
                            SET BALACNE_BUFFER = BALACNE_BUFFER - VAR_MR_AMOUNT
                            WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                    END IF;


                DELETE FROM ACC_BANK_TXN WHERE F_CUSTOMER_PAYMENT_NO = IN_PK_NO;
                DELETE  FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = IN_PK_NO;




    ELSEIF IN_TYPE = 'seller' THEN

            SELECT PK_NO, F_SELLER_NO,F_PAYMENT_ACC_NO,MR_AMOUNT,PAYMENT_REMAINING_MR,PAYMENT_DATE,PAYMENT_CONFIRMED_STATUS INTO VAR_ACC_CUSTOMER_PAYMENTS_PK_NO, VAR_F_CUSTOMER_NO, VAR_F_PAYMENT_ACC_NO, VAR_MR_AMOUNT, VAR_PAYMENT_REMAINING_MR, VAR_PAYMENT_DATE, VAR_PAYMENT_CONFIRMED_STATUS
            FROM ACC_SELLER_PAYMENTS WHERE PK_NO = IN_PK_NO;

                IF VAR_PAYMENT_CONFIRMED_STATUS = 1 THEN

                        UPDATE SLS_SELLERS
                        SET CUM_BALANCE_BUFFER = CUM_BALANCE_BUFFER - VAR_MR_AMOUNT
                        ,CUM_BALANCE_ACTUAL = CUM_BALANCE_ACTUAL - VAR_MR_AMOUNT
                        ,CUM_BALANCE = CUM_BALANCE - VAR_PAYMENT_REMAINING_MR
                        WHERE PK_NO = VAR_F_CUSTOMER_NO;


                        UPDATE ACC_PAYMENT_BANK_ACC
                        SET BALACNE_BUFFER = BALACNE_BUFFER - VAR_MR_AMOUNT
                        ,BALANCE_ACTUAL = BALANCE_ACTUAL - VAR_MR_AMOUNT
                        WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;



                ELSE
                        UPDATE SLS_SELLERS SET CUM_BALANCE_BUFFER = CUM_BALANCE_BUFFER - VAR_MR_AMOUNT WHERE PK_NO = VAR_F_CUSTOMER_NO;


                        UPDATE ACC_PAYMENT_BANK_ACC
                        SET BALACNE_BUFFER = BALACNE_BUFFER - VAR_MR_AMOUNT
                        WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                END IF;



                DELETE FROM ACC_BANK_TXN WHERE F_SELLER_PAYMENT_NO = IN_PK_NO;
                DELETE FROM ACC_SELLER_PAYMENTS WHERE PK_NO = IN_PK_NO;




    END IF;





END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_CUSTOMER_PAYMENT_UNVERIFY` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_CUSTOMER_PAYMENT_UNVERIFY` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_CUSTOMER_PAYMENT_UNVERIFY`(IN_BANK_TXN_STATEMENT_PK_NO Integer(11))
    NO SQL
BEGIN

    -- UPDATE ACC_BANK_TXN BALANCE_ACTUAL (INCREMENT)
    -- UPDATE ACC_PAYMENT_BANK_ACC CUSTOMER_BALANCE_ACTUAL (INCREMENT)
    -- UPDATE SLS_CUSTOMERS CUSTOMER_BALANCE_ACTUAL (INCREMENT)
    -- UPDATE SLS_ORDER ORDER_ACTUAL_TOPUP
    -- UPDATE ACC_BANK_TXN_STATEMENT F_ACC_BANK_TXN_NO, IS_MATCHED

        DECLARE VAR_F_ACC_BANK_TXN_NO INT DEFAULT 0;
        DECLARE VAR_IS_MATCHED INT DEFAULT 0;
        DECLARE VAR_AMOUNT_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_IS_CUS_SELLER_BANK_RECONCILATION INT DEFAULT 0;
        DECLARE VAR_F_ACC_PAYMENT_BANK_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_NO INT DEFAULT 0;
        DECLARE VAR_F_SELLER_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_PAYMENT_NO INT DEFAULT 0;
        DECLARE VAR_F_SELLER_PAYMENT_NO INT DEFAULT 0;

        DECLARE VAR_PAYMENT_CONFIRMED_STATUS INT DEFAULT 0;
        DECLARE VAR_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE VAR_MR_AMOUNT FLOAT DEFAULT 0;
        DECLARE VAR_CUSTOMER_BALANCE_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_CUM_BALANCE_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE INT_HAS_CUR_ROW INT DEFAULT 1;
        DECLARE int_row_count INT DEFAULT 0;
        DECLARE int_row_count2 INT DEFAULT 0;

        DECLARE xORDER_PAYMENT_PK_NO INT DEFAULT 0;
        DECLARE xORDER_NO INT DEFAULT 0;
        DECLARE xPAYMENT_AMOUNT FLOAT DEFAULT 0;
        DECLARE xBOOKING_DETAILS_PK_NO INT DEFAULT 0;
        DECLARE xINV_STOCK_PK_NO INT DEFAULT 0;



     SELECT
     A.F_ACC_BANK_TXN_NO
     , A.IS_MATCHED
     , B.AMOUNT_ACTUAL
     , B.IS_CUS_SELLER_BANK_RECONCILATION
     , B.F_ACC_PAYMENT_BANK_NO
     , B.F_CUSTOMER_NO
     , B.F_SELLER_NO
     , B.F_CUSTOMER_PAYMENT_NO
     , B.F_SELLER_PAYMENT_NO
     INTO
     VAR_F_ACC_BANK_TXN_NO
     , VAR_IS_MATCHED
     , VAR_AMOUNT_ACTUAL
     , VAR_IS_CUS_SELLER_BANK_RECONCILATION
     , VAR_F_ACC_PAYMENT_BANK_NO
     , VAR_F_CUSTOMER_NO
     , VAR_F_SELLER_NO
     , VAR_F_CUSTOMER_PAYMENT_NO
     , VAR_F_SELLER_PAYMENT_NO
     FROM
     ACC_BANK_TXN_STATEMENT A
     JOIN ACC_BANK_TXN B ON B.PK_NO = A.F_ACC_BANK_TXN_NO
     WHERE A.PK_NO = IN_BANK_TXN_STATEMENT_PK_NO AND A.IS_MATCHED = 1;

    -- SELECT F_CUSTOMER_PAYMENT_NO,F_SELLER_PAYMENT_NO, F_ACC_PAYMENT_BANK_NO, F_CUSTOMER_NO, F_SELLER_NO, IS_CUS_SELLER_BANK_RECONCILATION INTO VAR_F_CUSTOMER_PAYMENT_NO, VAR_F_SELLER_PAYMENT_NO, VAR_F_ACC_PAYMENT_BANK_NO, VAR_F_CUSTOMER_NO, VAR_F_SELLER_NO, VAR_IS_CUS_SELLER_BANK_RECONCILATION FROM ACC_BANK_TXN WHERE PK_NO = IN_BANK_TXN_PK_NO;

INSERT INTO R VALUES(VAR_IS_CUS_SELLER_BANK_RECONCILATION);
     /*###################### CUSTOMER PAYMENT ############################*/
    IF VAR_IS_CUS_SELLER_BANK_RECONCILATION = 1 THEN

        -- SELECT PAYMENT_CONFIRMED_STATUS, PAYMENT_REMAINING_MR, MR_AMOUNT INTO VAR_PAYMENT_CONFIRMED_STATUS, VAR_PAYMENT_REMAINING_MR, VAR_MR_AMOUNT  FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

        UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_CONFIRMED_STATUS = 0 WHERE PK_NO = VAR_F_CUSTOMER_PAYMENT_NO ;


    SELECT IFNULL(SUM(PAYMENT_REMAINING_MR),0), IFNULL(SUM(MR_AMOUNT),0)  INTO VAR_TOTAL_PAYMENT_REMAINING_MR, VAR_CUSTOMER_BALANCE_ACTUAL
            FROM ACC_CUSTOMER_PAYMENTS WHERE F_CUSTOMER_NO = VAR_F_CUSTOMER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

           INSERT INTO R VALUES(CONCAT('VAR_CUSTOMER_BALANCE_ACTUAL',VAR_CUSTOMER_BALANCE_ACTUAL));
            /* CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */
            Block1: BEGIN
                DECLARE CUR_ACC_ORDER_PAYMENT
                    CURSOR FOR
                        SELECT
                            PK_NO
                            , ORDER_NO
                            , PAYMENT_AMOUNT
                        FROM ACC_ORDER_PAYMENT
                        WHERE F_ACC_CUSTOMER_PAYMENT_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

                            DECLARE CONTINUE HANDLER
                                FOR NOT FOUND SET INT_HAS_CUR_ROW = 0;

        INSERT INTO R VALUES('Start CUSRSOR1');
                                OPEN CUR_ACC_ORDER_PAYMENT;
                                    SELECT FOUND_ROWS() INTO int_row_count ;

        INSERT INTO R VALUES (CONCAT('Line 105',int_row_count));
                                    IF int_row_count > 0 THEN

                                        GET_CUR_ACC_ORDER_PAYMENT:LOOP
                                            FETCH NEXT
                                            FROM CUR_ACC_ORDER_PAYMENT
                                            INTO
                                            xORDER_PAYMENT_PK_NO
                                            ,xORDER_NO
                                            ,xPAYMENT_AMOUNT
                                            ;

                                            IF INT_HAS_CUR_ROW = 0 THEN
                                                LEAVE GET_CUR_ACC_ORDER_PAYMENT;
                                            END IF;
        INSERT INTO S VALUES('line 109');

                                            UPDATE SLS_ORDER SET ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP - xPAYMENT_AMOUNT, ORDER_BALANCE_USED = 0 WHERE PK_NO = xORDER_NO;
                                            /* should update ORDER_BALANCE_USED and free and payment uncheck if payemnt is used in item sls_order */
                                            /* UPDATE ORDER_STATUS = 60 */
                                                Block2: BEGIN
                                                    DECLARE INT_HAS_CUR_ROW2 INT DEFAULT 1;
                                                    DECLARE CUR_UPDATE_ORDER_SATUS
                                                    CURSOR FOR

                                                    SELECT
                                                     SLS_BOOKING_DETAILS.PK_NO AS BOOKING_DETAILS_PK_NO
                                                    ,INV_STOCK.PK_NO AS INV_STOCK_PK_NO
                                                    FROM SLS_ORDER
                                                    JOIN SLS_BOOKING ON SLS_BOOKING.PK_NO = SLS_ORDER.F_BOOKING_NO
                                                    JOIN SLS_BOOKING_DETAILS ON SLS_BOOKING_DETAILS.F_BOOKING_NO = SLS_BOOKING.PK_NO
                                                    JOIN INV_STOCK ON INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                                                    WHERE SLS_ORDER.PK_NO = xORDER_NO ;

                                                    DECLARE CONTINUE HANDLER
                                                    FOR NOT FOUND SET INT_HAS_CUR_ROW2 = 0;

INSERT INTO R VALUES('Start Procedre109');
                                                    OPEN CUR_UPDATE_ORDER_SATUS;
                                                        SELECT FOUND_ROWS() INTO int_row_count2 ;

                                                        IF int_row_count2 > 0 THEN
                                                            GET_CUR_UPDATE_ORDER_SATUS:LOOP
                                                            FETCH NEXT
                                                            FROM CUR_UPDATE_ORDER_SATUS
                                                            INTO
                                                                xBOOKING_DETAILS_PK_NO
                                                                ,xINV_STOCK_PK_NO
                                                                ;

                                                            IF INT_HAS_CUR_ROW2 = 0 THEN
                                                                LEAVE GET_CUR_UPDATE_ORDER_SATUS;
                                                            END IF;

                                                                UPDATE SLS_BOOKING_DETAILS SET ORDER_STATUS = 10
                                                                WHERE PK_NO = xBOOKING_DETAILS_PK_NO;

                                                                UPDATE INV_STOCK SET ORDER_STATUS = 10
                                                                WHERE PK_NO = xINV_STOCK_PK_NO;

                                                            END LOOP GET_CUR_UPDATE_ORDER_SATUS;

                                                        END IF;
                                                    CLOSE CUR_UPDATE_ORDER_SATUS;
                                                END Block2;

                                        /* END SECOND CURSOR */

                                        END LOOP GET_CUR_ACC_ORDER_PAYMENT;

                                    END IF;

                                CLOSE CUR_ACC_ORDER_PAYMENT;
            END Block1;
            /* END CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */

            UPDATE ACC_BANK_TXN SET AMOUNT_ACTUAL = 0, IS_MATCHED = 0, MATCHED_ON = NULL WHERE PK_NO = VAR_F_ACC_BANK_TXN_NO;

            UPDATE ACC_PAYMENT_BANK_ACC SET BALANCE_ACTUAL = BALANCE_ACTUAL - VAR_AMOUNT_ACTUAL WHERE PK_NO = VAR_F_ACC_PAYMENT_BANK_NO;

            UPDATE SLS_CUSTOMERS SET CUSTOMER_BALANCE_ACTUAL = VAR_CUSTOMER_BALANCE_ACTUAL, CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR 
            WHERE PK_NO = VAR_F_CUSTOMER_NO ;

            UPDATE ACC_BANK_TXN_STATEMENT SET F_ACC_BANK_TXN_NO = NULL, IS_MATCHED = 0, MATCHED_ON = NULL WHERE PK_NO = IN_BANK_TXN_STATEMENT_PK_NO;

    END IF;
     /*###################### SELLER PAYMENT ############################*/
    IF VAR_IS_CUS_SELLER_BANK_RECONCILATION = 2 THEN

        -- SELECT PAYMENT_CONFIRMED_STATUS, PAYMENT_REMAINING_MR, MR_AMOUNT INTO VAR_PAYMENT_CONFIRMED_STATUS, VAR_PAYMENT_REMAINING_MR, VAR_MR_AMOUNT  FROM ACC_SELLER_PAYMENTS WHERE PK_NO = VAR_F_SELLER_PAYMENT_NO ;

            UPDATE ACC_SELLER_PAYMENTS SET PAYMENT_CONFIRMED_STATUS = 1 WHERE PK_NO = VAR_F_SELLER_PAYMENT_NO ;

              SELECT IFNULL(SUM(PAYMENT_REMAINING_MR),0), IFNULL(SUM(MR_AMOUNT),0) INTO  VAR_TOTAL_PAYMENT_REMAINING_MR,  VAR_CUM_BALANCE_ACTUAL
            FROM ACC_SELLER_PAYMENTS WHERE F_SELLER_NO = VAR_F_SELLER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            /* CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */
            Block1: BEGIN
                DECLARE INT_HAS_CUR_ROW INT DEFAULT 1;
                DECLARE CUR_ACC_ORDER_PAYMENT
                    CURSOR FOR
                        SELECT PK_NO, ORDER_NO, PAYMENT_AMOUNT
                            FROM ACC_ORDER_PAYMENT
                            WHERE
                            F_ACC_SELLER_PAYMENT_NO = VAR_F_SELLER_PAYMENT_NO ;

                            DECLARE CONTINUE HANDLER
                                FOR NOT FOUND SET INT_HAS_CUR_ROW = 0;

        INSERT INTO R VALUES('Start Procedre222222222222');
                                OPEN CUR_ACC_ORDER_PAYMENT;
                                    SELECT FOUND_ROWS() INTO int_row_count ;

        INSERT INTO R VALUES ('Line 52222222222');
                                    IF int_row_count > 0 THEN

                                        GET_CUR_ACC_ORDER_PAYMENT:LOOP
                                            FETCH NEXT
                                            FROM CUR_ACC_ORDER_PAYMENT
                                            INTO
                                            xORDER_PAYMENT_PK_NO
                                            ,xORDER_NO
                                            ,xPAYMENT_AMOUNT
                                            ;

                                            IF INT_HAS_CUR_ROW = 0 THEN
                                                LEAVE GET_CUR_ACC_ORDER_PAYMENT;
                                            END IF;
        INSERT INTO S VALUES('line 70');

                                            UPDATE SLS_ORDER SET ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP - xPAYMENT_AMOUNT,ORDER_BALANCE_USED = 0 WHERE PK_NO = xORDER_NO;

                                            /* UPDATE ORDER_STATUS = 60 */
                                                Block2: BEGIN
                                                    DECLARE INT_HAS_CUR_ROW2 INT DEFAULT 1;
                                                    DECLARE CUR_UPDATE_ORDER_SATUS
                                                    CURSOR FOR
                                                    SELECT
                                                    SLS_BOOKING_DETAILS.PK_NO AS BOOKING_DETAILS_PK_NO
                                                    ,INV_STOCK.PK_NO AS INV_STOCK_PK_NO

                                                    FROM SLS_ORDER
                                                    JOIN SLS_BOOKING ON SLS_BOOKING.PK_NO = SLS_ORDER.F_BOOKING_NO
                                                    JOIN SLS_BOOKING_DETAILS ON SLS_BOOKING_DETAILS.F_BOOKING_NO = SLS_BOOKING.PK_NO
                                                    JOIN INV_STOCK ON INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                                                    WHERE SLS_ORDER.PK_NO = xORDER_NO ;

                                                    DECLARE CONTINUE HANDLER
                                                    FOR NOT FOUND SET INT_HAS_CUR_ROW2 = 0;

INSERT INTO R VALUES('Start Procedre109');
                                                    OPEN CUR_UPDATE_ORDER_SATUS;
                                                        SELECT FOUND_ROWS() INTO int_row_count2 ;

                                                        IF int_row_count2 > 0 THEN

                                                            GET_CUR_UPDATE_ORDER_SATUS:LOOP

                                                            FETCH NEXT
                                                            FROM CUR_UPDATE_ORDER_SATUS
                                                            INTO
                                                            xBOOKING_DETAILS_PK_NO
                                                            ,xINV_STOCK_PK_NO
                                                            ;

                                                            IF INT_HAS_CUR_ROW2 = 0 THEN
                                                            LEAVE GET_CUR_UPDATE_ORDER_SATUS;
                                                            END IF;

                                                                UPDATE SLS_BOOKING_DETAILS SET ORDER_STATUS = 10
                                                                WHERE PK_NO = xBOOKING_DETAILS_PK_NO;

                                                                UPDATE INV_STOCK SET ORDER_STATUS = 10
                                                                WHERE PK_NO = xINV_STOCK_PK_NO;


                                                            END LOOP GET_CUR_UPDATE_ORDER_SATUS;

                                                        END IF;
                                                    CLOSE CUR_UPDATE_ORDER_SATUS;
                                                END Block2;

                                        /* END SECOND CURSOR */

                                        END LOOP GET_CUR_ACC_ORDER_PAYMENT;

                                    END IF;

                                CLOSE CUR_ACC_ORDER_PAYMENT;
            END Block1;
            /* END CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */


            UPDATE ACC_BANK_TXN SET AMOUNT_ACTUAL = 0, IS_MATCHED = 0, MATCHED_ON = NULL WHERE PK_NO = VAR_F_ACC_BANK_TXN_NO;

            UPDATE ACC_PAYMENT_BANK_ACC SET BALANCE_ACTUAL = BALANCE_ACTUAL - VAR_AMOUNT_ACTUAL WHERE PK_NO = VAR_F_ACC_PAYMENT_BANK_NO;

            UPDATE SLS_SELLERS SET CUM_BALANCE_ACTUAL = VAR_CUM_BALANCE_ACTUAL, CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR  WHERE PK_NO = VAR_F_SELLER_NO ;

            UPDATE ACC_BANK_TXN_STATEMENT SET F_ACC_BANK_TXN_NO = NULL, IS_MATCHED = 0, MATCHED_ON = NULL WHERE PK_NO = IN_BANK_TXN_STATEMENT_PK_NO;



    END IF;


END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_CUSTOMER_PAYMENT_VERIFY` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_CUSTOMER_PAYMENT_VERIFY` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_CUSTOMER_PAYMENT_VERIFY`(IN_BANK_TXN_PK_NO Integer(11), IN_BANK_TXN_STATEMENT_PK_NO Integer(11))
    NO SQL
BEGIN


    -- UPDATE ACC_BANK_TXN BALANCE_ACTUAL (INCREMENT)
    -- UPDATE ACC_PAYMENT_BANK_ACC CUSTOMER_BALANCE_ACTUAL (INCREMENT)
    -- UPDATE SLS_CUSTOMERS CUSTOMER_BALANCE_ACTUAL (INCREMENT)
    -- UPDATE SLS_ORDER ORDER_ACTUAL_TOPUP
    -- UPDATE ACC_BANK_TXN_STATEMENT F_ACC_BANK_TXN_NO, IS_MATCHED




        DECLARE VAR_F_CUSTOMER_PAYMENT_NO INT DEFAULT 0;
        DECLARE VAR_F_SELLER_PAYMENT_NO INT DEFAULT 0;
        DECLARE VAR_F_ACC_PAYMENT_BANK_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_NO INT DEFAULT 0;
        DECLARE VAR_F_SELLER_NO INT DEFAULT 0;
        DECLARE VAR_IS_CUS_SELLER_BANK_RECONCILATION INT DEFAULT 0;
        DECLARE VAR_PAYMENT_CONFIRMED_STATUS INT DEFAULT 0;
        DECLARE VAR_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE VAR_MR_AMOUNT FLOAT DEFAULT 0;
        DECLARE VAR_CUSTOMER_BALANCE_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_CUM_BALANCE_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;

        DECLARE int_row_count INT DEFAULT 0;
        DECLARE int_row_count2 INT DEFAULT 0;

        DECLARE xORDER_PAYMENT_PK_NO INT DEFAULT 0;
        DECLARE xORDER_NO INT DEFAULT 0;
        DECLARE xPAYMENT_AMOUNT FLOAT DEFAULT 0;

        DECLARE xNET_DUE FLOAT DEFAULT 0;
        DECLARE xNET_VALUE FLOAT DEFAULT 0;
        DECLARE xBOOKING_DETAILS_PK_NO FLOAT DEFAULT 0;
        DECLARE xINV_STOCK_PK_NO INT DEFAULT 0;







    SELECT F_CUSTOMER_PAYMENT_NO,F_SELLER_PAYMENT_NO, F_ACC_PAYMENT_BANK_NO, F_CUSTOMER_NO, F_SELLER_NO, IS_CUS_SELLER_BANK_RECONCILATION INTO VAR_F_CUSTOMER_PAYMENT_NO, VAR_F_SELLER_PAYMENT_NO, VAR_F_ACC_PAYMENT_BANK_NO, VAR_F_CUSTOMER_NO, VAR_F_SELLER_NO, VAR_IS_CUS_SELLER_BANK_RECONCILATION
        FROM ACC_BANK_TXN WHERE PK_NO = IN_BANK_TXN_PK_NO;


    /*###################### CUSTOMER PAYMENT ############################*/
    IF VAR_IS_CUS_SELLER_BANK_RECONCILATION = 1 THEN

        SELECT PAYMENT_CONFIRMED_STATUS, PAYMENT_REMAINING_MR, MR_AMOUNT INTO VAR_PAYMENT_CONFIRMED_STATUS, VAR_PAYMENT_REMAINING_MR, VAR_MR_AMOUNT  FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

        UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_CONFIRMED_STATUS = 1 WHERE PK_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

        SELECT SUM(PAYMENT_REMAINING_MR), IFNULL(SUM(MR_AMOUNT),0) INTO VAR_TOTAL_PAYMENT_REMAINING_MR,VAR_CUSTOMER_BALANCE_ACTUAL
            FROM ACC_CUSTOMER_PAYMENTS WHERE F_CUSTOMER_NO = VAR_F_CUSTOMER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            /* CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */
            Block1: BEGIN
                DECLARE INT_HAS_CUR_ROW INT DEFAULT 1;
                DECLARE CUR_ACC_ORDER_PAYMENT
                    CURSOR FOR
                        SELECT PK_NO, ORDER_NO, PAYMENT_AMOUNT
                            FROM ACC_ORDER_PAYMENT
                            WHERE
                            -- IS_PAYMENT_FROM_BALANCE = 0 AND
                            F_ACC_CUSTOMER_PAYMENT_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

                            DECLARE CONTINUE HANDLER
                                FOR NOT FOUND SET INT_HAS_CUR_ROW = 0;

        INSERT INTO R VALUES('Start Procedre');
                                OPEN CUR_ACC_ORDER_PAYMENT;
                                    SELECT FOUND_ROWS() INTO int_row_count ;

        INSERT INTO R values ('Line 52');
                                    IF int_row_count > 0 THEN

                                        GET_CUR_ACC_ORDER_PAYMENT:LOOP
                                            FETCH NEXT
                                            FROM CUR_ACC_ORDER_PAYMENT
                                            INTO
                                            xORDER_PAYMENT_PK_NO
                                            ,xORDER_NO
                                            ,xPAYMENT_AMOUNT
                                            ;

                                            IF INT_HAS_CUR_ROW = 0 THEN
                                                LEAVE GET_CUR_ACC_ORDER_PAYMENT;
                                            END IF;
        INSERT INTO S VALUES('line 70');

                                            UPDATE SLS_ORDER SET ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP + xPAYMENT_AMOUNT WHERE PK_NO = xORDER_NO;

                                            /* UPDATE ORDER_STATUS = 60 */
                                                Block2: BEGIN
                                                    DECLARE INT_HAS_CUR_ROW2 INT DEFAULT 1;
                                                    DECLARE CUR_UPDATE_ORDER_SATUS
                                                    CURSOR FOR
                                                    SELECT
                                                   -- SLS_ORDER.PK_NO AS ORDER
                                                   -- ,SLS_ORDER.ORDER_ACTUAL_TOPUP
                                                   -- ,SLS_BOOKING.TOTAL_PRICE
                                                   -- ,SLS_BOOKING.DISCOUNT
                                                    SUM(SLS_BOOKING.TOTAL_PRICE - SLS_BOOKING.DISCOUNT) AS NET_VALUE
                                                    ,SUM(SLS_BOOKING.TOTAL_PRICE - SLS_BOOKING.DISCOUNT - SLS_ORDER.ORDER_ACTUAL_TOPUP) AS NET_DUE
                                                   -- ,SLS_ORDER.F_BOOKING_NO
                                                    ,SLS_BOOKING_DETAILS.PK_NO AS BOOKING_DETAILS_PK_NO
                                                    ,INV_STOCK.PK_NO AS INV_STOCK_PK_NO
                                                   -- ,SLS_BOOKING_DETAILS.ORDER_STATUS
                                                   -- ,INV_STOCK.ORDER_STATUS AS INV_ORDER_STATUS
                                                    FROM SLS_ORDER
                                                    JOIN SLS_BOOKING ON SLS_BOOKING.PK_NO = SLS_ORDER.F_BOOKING_NO
                                                    JOIN SLS_BOOKING_DETAILS ON SLS_BOOKING_DETAILS.F_BOOKING_NO = SLS_BOOKING.PK_NO
                                                    JOIN INV_STOCK ON INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                                                    WHERE SLS_ORDER.PK_NO = xORDER_NO GROUP BY SLS_BOOKING_DETAILS.PK_NO ;


                                                    DECLARE CONTINUE HANDLER
                                                    FOR NOT FOUND SET INT_HAS_CUR_ROW2 = 0;

INSERT INTO R VALUES('Start Procedre109');
                                                    OPEN CUR_UPDATE_ORDER_SATUS;
                                                        SELECT FOUND_ROWS() INTO int_row_count2 ;

                                                        IF int_row_count2 > 0 THEN

                                                            GET_CUR_UPDATE_ORDER_SATUS:LOOP

                                                            FETCH NEXT
                                                            FROM CUR_UPDATE_ORDER_SATUS
                                                            INTO
                                                            xNET_VALUE
                                                            ,xNET_DUE
                                                            ,xBOOKING_DETAILS_PK_NO
                                                            ,xINV_STOCK_PK_NO
                                                            ;

                                                            IF INT_HAS_CUR_ROW2 = 0 THEN
                                                            LEAVE GET_CUR_UPDATE_ORDER_SATUS;
                                                            END IF;

                                                            IF xNET_DUE <= 0  THEN

                                                                UPDATE SLS_BOOKING_DETAILS SET ORDER_STATUS = 60
                                                                WHERE PK_NO = xBOOKING_DETAILS_PK_NO;

                                                                UPDATE INV_STOCK SET ORDER_STATUS = 60
                                                                WHERE PK_NO = xINV_STOCK_PK_NO;

                                                                UPDATE SLS_ORDER SET ORDER_BALANCE_USED = xNET_VALUE, DEFAULT_AT = null, DEFAULT_TYPE = 0
                                                                WHERE PK_NO = xORDER_NO;

                                                            END IF;

                                                            END LOOP GET_CUR_UPDATE_ORDER_SATUS;

                                                        END IF;
                                                    CLOSE CUR_UPDATE_ORDER_SATUS;
                                                END Block2;

                                        /* END SECOND CURSOR */




                                        END LOOP GET_CUR_ACC_ORDER_PAYMENT;

                                    END IF;

                                CLOSE CUR_ACC_ORDER_PAYMENT;
            END Block1;
            /* END CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */


            UPDATE ACC_BANK_TXN SET AMOUNT_ACTUAL = AMOUNT_ACTUAL + VAR_MR_AMOUNT, IS_MATCHED = 1, MATCHED_ON = NOW() WHERE PK_NO = IN_BANK_TXN_PK_NO;

            UPDATE ACC_PAYMENT_BANK_ACC SET BALANCE_ACTUAL = BALANCE_ACTUAL + VAR_MR_AMOUNT WHERE PK_NO = VAR_F_ACC_PAYMENT_BANK_NO;

            UPDATE SLS_CUSTOMERS SET CUSTOMER_BALANCE_ACTUAL = VAR_CUSTOMER_BALANCE_ACTUAL, CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR WHERE PK_NO = VAR_F_CUSTOMER_NO ;

            UPDATE ACC_BANK_TXN_STATEMENT SET F_ACC_BANK_TXN_NO = IN_BANK_TXN_PK_NO, IS_MATCHED = 1, MATCHED_ON = NOW() WHERE PK_NO = IN_BANK_TXN_STATEMENT_PK_NO;

    END IF;



     /*###################### SELLER PAYMENT ############################*/
    IF VAR_IS_CUS_SELLER_BANK_RECONCILATION = 2 THEN

        SELECT PAYMENT_CONFIRMED_STATUS, PAYMENT_REMAINING_MR, MR_AMOUNT INTO VAR_PAYMENT_CONFIRMED_STATUS, VAR_PAYMENT_REMAINING_MR, VAR_MR_AMOUNT  FROM ACC_SELLER_PAYMENTS WHERE PK_NO = VAR_F_SELLER_PAYMENT_NO ;

            UPDATE ACC_SELLER_PAYMENTS SET PAYMENT_CONFIRMED_STATUS = 1 WHERE PK_NO = VAR_F_SELLER_PAYMENT_NO ;

              SELECT SUM(PAYMENT_REMAINING_MR), IFNULL(SUM(MR_AMOUNT),0) INTO VAR_TOTAL_PAYMENT_REMAINING_MR, VAR_CUM_BALANCE_ACTUAL
            FROM ACC_SELLER_PAYMENTS WHERE F_SELLER_NO = VAR_F_SELLER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            /* CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */
            Block1: BEGIN
                DECLARE INT_HAS_CUR_ROW INT DEFAULT 1;
                DECLARE CUR_ACC_ORDER_PAYMENT
                    CURSOR FOR
                        SELECT PK_NO, ORDER_NO, PAYMENT_AMOUNT
                            FROM ACC_ORDER_PAYMENT
                            WHERE
                            -- IS_PAYMENT_FROM_BALANCE = 0 AND
                            F_ACC_SELLER_PAYMENT_NO = VAR_F_SELLER_PAYMENT_NO ;

                            DECLARE CONTINUE HANDLER
                                FOR NOT FOUND SET INT_HAS_CUR_ROW = 0;

        INSERT INTO R VALUES('Start Procedre');
                                OPEN CUR_ACC_ORDER_PAYMENT;
                                    SELECT FOUND_ROWS() INTO int_row_count ;

        INSERT INTO R values ('Line 52');
                                    IF int_row_count > 0 THEN

                                        GET_CUR_ACC_ORDER_PAYMENT:LOOP
                                            FETCH NEXT
                                            FROM CUR_ACC_ORDER_PAYMENT
                                            INTO
                                            xORDER_PAYMENT_PK_NO
                                            ,xORDER_NO
                                            ,xPAYMENT_AMOUNT
                                            ;

                                            IF INT_HAS_CUR_ROW = 0 THEN
                                                LEAVE GET_CUR_ACC_ORDER_PAYMENT;
                                            END IF;
        INSERT INTO S VALUES('line 70');

                                            UPDATE SLS_ORDER SET ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP + xPAYMENT_AMOUNT WHERE PK_NO = xORDER_NO;

                                            /* UPDATE ORDER_STATUS = 60 */
                                                Block2: BEGIN
                                                    DECLARE INT_HAS_CUR_ROW2 INT DEFAULT 1;
                                                    DECLARE CUR_UPDATE_ORDER_SATUS
                                                    CURSOR FOR
                                                    SELECT
                                                   -- SLS_ORDER.PK_NO AS ORDER
                                                   -- ,SLS_ORDER.ORDER_ACTUAL_TOPUP
                                                   -- ,SLS_BOOKING.TOTAL_PRICE
                                                   -- ,SLS_BOOKING.DISCOUNT
                                                    SUM(SLS_BOOKING.TOTAL_PRICE - SLS_BOOKING.DISCOUNT) AS NET_VALUE
                                                    ,SUM(SLS_BOOKING.TOTAL_PRICE - SLS_BOOKING.DISCOUNT - SLS_ORDER.ORDER_ACTUAL_TOPUP) AS NET_DUE
                                                   -- ,SLS_ORDER.F_BOOKING_NO
                                                    ,SLS_BOOKING_DETAILS.PK_NO AS BOOKING_DETAILS_PK_NO
                                                    ,INV_STOCK.PK_NO AS INV_STOCK_PK_NO
                                                   -- ,SLS_BOOKING_DETAILS.ORDER_STATUS
                                                   -- ,INV_STOCK.ORDER_STATUS AS INV_ORDER_STATUS
                                                    FROM SLS_ORDER
                                                    JOIN SLS_BOOKING ON SLS_BOOKING.PK_NO = SLS_ORDER.F_BOOKING_NO
                                                    JOIN SLS_BOOKING_DETAILS ON SLS_BOOKING_DETAILS.F_BOOKING_NO = SLS_BOOKING.PK_NO
                                                    JOIN INV_STOCK ON INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                                                    WHERE SLS_ORDER.PK_NO = xORDER_NO
                                                    GROUP BY SLS_BOOKING_DETAILS.PK_NO ;


                                                    DECLARE CONTINUE HANDLER
                                                    FOR NOT FOUND SET INT_HAS_CUR_ROW2 = 0;

INSERT INTO R VALUES('Start Procedre109');
                                                    OPEN CUR_UPDATE_ORDER_SATUS;
                                                        SELECT FOUND_ROWS() INTO int_row_count2 ;

                                                        IF int_row_count2 > 0 THEN

                                                            GET_CUR_UPDATE_ORDER_SATUS:LOOP

                                                            FETCH NEXT
                                                            FROM CUR_UPDATE_ORDER_SATUS
                                                            INTO
                                                            xNET_VALUE
                                                            ,xNET_DUE
                                                            ,xBOOKING_DETAILS_PK_NO
                                                            ,xINV_STOCK_PK_NO
                                                            ;

                                                            IF INT_HAS_CUR_ROW2 = 0 THEN
                                                            LEAVE GET_CUR_UPDATE_ORDER_SATUS;
                                                            END IF;

                                                            IF xNET_DUE <= 0  THEN

                                                                UPDATE SLS_BOOKING_DETAILS SET ORDER_STATUS = 60
                                                                WHERE PK_NO = xBOOKING_DETAILS_PK_NO;

                                                                UPDATE INV_STOCK SET ORDER_STATUS = 60
                                                                WHERE PK_NO = xINV_STOCK_PK_NO;

                                                                UPDATE SLS_ORDER SET ORDER_BALANCE_USED = xNET_VALUE, DEFAULT_AT = null, DEFAULT_TYPE = 0
                                                                WHERE PK_NO = xORDER_NO;
                                                            END IF;

                                                            END LOOP GET_CUR_UPDATE_ORDER_SATUS;

                                                        END IF;
                                                    CLOSE CUR_UPDATE_ORDER_SATUS;
                                                END Block2;

                                        /* END SECOND CURSOR */

                                        END LOOP GET_CUR_ACC_ORDER_PAYMENT;

                                    END IF;

                                CLOSE CUR_ACC_ORDER_PAYMENT;
            END Block1;
            /* END CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */


            UPDATE ACC_BANK_TXN SET AMOUNT_ACTUAL = AMOUNT_ACTUAL + VAR_MR_AMOUNT, IS_MATCHED = 1, MATCHED_ON = NOW() WHERE PK_NO = IN_BANK_TXN_PK_NO;

            UPDATE ACC_PAYMENT_BANK_ACC SET BALANCE_ACTUAL = BALANCE_ACTUAL + VAR_MR_AMOUNT WHERE PK_NO = VAR_F_ACC_PAYMENT_BANK_NO;

            UPDATE SLS_SELLERS SET CUM_BALANCE_ACTUAL = VAR_CUM_BALANCE_ACTUAL, CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR WHERE PK_NO = VAR_F_SELLER_NO ;

            UPDATE ACC_BANK_TXN_STATEMENT SET F_ACC_BANK_TXN_NO = IN_BANK_TXN_PK_NO, IS_MATCHED = 1, MATCHED_ON = NOW() WHERE PK_NO = IN_BANK_TXN_STATEMENT_PK_NO;


    END IF;


END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_INV_STOCK_PRC_STOCK_IN_MAP` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_INV_STOCK_PRC_STOCK_IN_MAP` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_INV_STOCK_PRC_STOCK_IN_MAP`(IN_PK_NO Integer)
    NO SQL
BEGIN

    /*PROC_INV_STOCK_PRC_STOCK_IN_MAP*/
    DECLARE int_F_PRC_STOCK_IN_NO INT(11) default 0;
    DECLARE int_SHOP_NO           INT(11) default 0;
    DECLARE xSHOP_NAME            varchar(200);

    /*PRC_STOCK_IN_DETAILS*/
    DECLARE int_HAS_DATA_PRC_STOCK_IN_DETAILS INT DEFAULT 1;
    DECLARE int_RECIEVED_QTY INT;
    DECLARE int_FAULTY_QTY INT;
    DECLARE int_TOTAL INT;

    /*INV STOCK*/
    DECLARE xCODE                            INT;
    DECLARE xF_INV_STOCK_PRC_STOCK_IN_MAP_NO INT;
    DECLARE xF_PRD_MASTER_SETUP_NO           INT;
    DECLARE xF_PRC_STOCK_IN_NO               INT;
    DECLARE xF_PRC_STOCK_IN_DETAILS_NO       INT;
    DECLARE xIG_CODE                         varchar(20);
    DECLARE xSKUID                           varchar(40);
    DECLARE xF_PRD_VARIANT_NO                INT;
    DECLARE xPRD_VARINAT_NAME                varchar(200);
    DECLARE xINVOICE_NAME                    varchar(200);
    DECLARE xF_CATEGORY_NO                   INT;
    DECLARE xCATEGORY_NAME                   varchar(200);
    DECLARE xBARCODE                         varchar(40);
    DECLARE xPRODUCT_PURCHASE_PRICE          FLOAT;
    DECLARE xPRODUCT_REGULAR_PRICE           FLOAT;
    DECLARE xPRODUCT_SPECIAL_PRICE           FLOAT;
    DECLARE xPRODUCT_INSTALLMENT_PRICE       FLOAT;
    DECLARE xPRODUCT_WHOLESALE_PRICE         FLOAT;
    DECLARE xPRC_IN_IMAGE_PATH               varchar(200);
    DECLARE xPRD_VARIANT_IMAGE_PATH          varchar(200);

    /*LOOP VARIABLES*/
    DECLARE i int DEFAULT 0;

    DECLARE cur_PRC_STOCK_IN_DETAILS
        CURSOR FOR
                SELECT
                        INVOICE.F_PRC_STOCK_IN
                        ,INVOICE.PK_NO
                        ,INVOICE.F_PRD_VARIANT_NO
                        ,PRODUCT.MRK_ID_COMPOSITE_CODE
                        ,PRODUCT.COMPOSITE_CODE
                        ,PRODUCT.F_PRD_MASTER_SETUP_NO
                        ,PRODUCT.VARIANT_NAME
                        ,INVOICE.INVOICE_NAME
                        ,PRODUCT.BARCODE
                        ,INVOICE.UNIT_PRICE_MR_EV
                        ,INVOICE.RECIEVED_QTY
                        ,INVOICE.FAULTY_QTY
                        ,PRODUCT.REGULAR_PRICE
                        ,PRODUCT.SPECIAL_PRICE
                        ,PRODUCT.INSTALLMENT_PRICE
                        ,PRODUCT.WHOLESALE_PRICE
                        ,INVOICE_MASTER.MASTER_INVOICE_RELATIVE_PATH
                        ,PRODUCT.PRIMARY_IMG_RELATIVE_PATH
                        ,PRODUCT_CATEGORY.PK_NO
                        ,PRODUCT_CATEGORY.NAME

                        FROM
                            PRC_STOCK_IN INVOICE_MASTER
                            ,PRC_STOCK_IN_DETAILS INVOICE
                            ,PRD_VARIANT_SETUP PRODUCT
                            ,PRD_MASTER_SETUP PRODUCT_MASTER
                            ,PRD_CATEGORY PRODUCT_CATEGORY

                        WHERE
                    INVOICE.F_PRC_STOCK_IN = int_F_PRC_STOCK_IN_NO
                        AND  INVOICE.F_PRD_VARIANT_NO = PRODUCT.PK_NO
                        AND PRODUCT.F_PRD_MASTER_SETUP_NO=  PRODUCT_MASTER.PK_NO
                        AND PRODUCT_MASTER.F_PRD_CATEGORY_ID=  PRODUCT_CATEGORY.PK_NO
                        AND INVOICE_MASTER.PK_NO = INVOICE.F_PRC_STOCK_IN
                            ;

    DECLARE CONTINUE HANDLER
    FOR NOT FOUND SET int_HAS_DATA_PRC_STOCK_IN_DETAILS=0;


    SELECT F_PRC_STOCK_IN_NO , F_SHOP_NO
        INTO int_F_PRC_STOCK_IN_NO, int_SHOP_NO
    FROM INV_STOCK_PRC_STOCK_IN_MAP
    WHERE PK_NO = IN_PK_NO ;

    SELECT SHOP_NAME
        INTO xSHOP_NAME
    FROM SA_USER
    WHERE PK_NO = int_SHOP_NO
    AND F_PARENT_USER_ID = 0;

    OPEN cur_PRC_STOCK_IN_DETAILS;

        insert into R values ('105');

                get_PRC_STOCK_IN_DETAILS: LOOP

                        FETCH NEXT FROM  cur_PRC_STOCK_IN_DETAILS INTO

                        xF_PRC_STOCK_IN_NO               ,
                        xF_PRC_STOCK_IN_DETAILS_NO       ,
                        xF_PRD_VARIANT_NO                ,
                        xIG_CODE                         ,
                        xSKUID                           ,
                        xF_PRD_MASTER_SETUP_NO           ,
                        xPRD_VARINAT_NAME                ,
                        xINVOICE_NAME                    ,
                        xBARCODE                         ,
                        xPRODUCT_PURCHASE_PRICE          ,
                        int_RECIEVED_QTY                 ,
                        int_FAULTY_QTY                   ,
                        xPRODUCT_REGULAR_PRICE           ,
                        xPRODUCT_SPECIAL_PRICE           ,
                        xPRODUCT_INSTALLMENT_PRICE       ,
                        xPRODUCT_WHOLESALE_PRICE         ,
                        xPRC_IN_IMAGE_PATH               ,
                        xPRD_VARIANT_IMAGE_PATH          ,
                        xF_CATEGORY_NO                   ,
                        xCATEGORY_NAME                   ;



        /*TOTAL GEN = RECQTY - FAUTLY QTY*/
        IF int_HAS_DATA_PRC_STOCK_IN_DETAILS = 0 THEN
            LEAVE get_PRC_STOCK_IN_DETAILS;

        END IF;

        SET int_TOTAL = int_RECIEVED_QTY - int_FAULTY_QTY;


        SET i=0;
        WHILE i < int_TOTAL DO

            insert into INV_STOCK(
                F_INV_STOCK_PRC_STOCK_IN_MAP_NO
                ,F_PRD_MASTER_SETUP_NO
                ,F_PRC_STOCK_IN_NO
                ,F_PRC_STOCK_IN_DETAILS_NO
                ,IG_CODE
                ,SKUID
                ,F_PRD_VARIANT_NO
                ,PRD_VARINAT_NAME
                ,INVOICE_NAME
                ,F_CATEGORY_NO
                ,CATEGORY_NAME
                ,BARCODE
                ,PRODUCT_PURCHASE_PRICE
                ,REGULAR_PRICE
                ,SPECIAL_PRICE
                ,INSTALLMENT_PRICE
                ,WHOLESALE_PRICE
                ,PRC_IN_IMAGE_PATH
                ,PRD_VARIANT_IMAGE_PATH
                ,F_SHOP_NO
                ,SHOP_NAME
            )
            VALUES

            (

            IN_PK_NO
            ,xF_PRD_MASTER_SETUP_NO
            ,xF_PRC_STOCK_IN_NO
            ,xF_PRC_STOCK_IN_DETAILS_NO
            ,xIG_CODE
            ,xSKUID
            ,xF_PRD_VARIANT_NO
            ,xPRD_VARINAT_NAME
            ,xINVOICE_NAME
            ,xF_CATEGORY_NO
            ,xCATEGORY_NAME
            ,xBARCODE
            ,xPRODUCT_PURCHASE_PRICE
            ,xPRODUCT_REGULAR_PRICE
            ,xPRODUCT_SPECIAL_PRICE
            ,xPRODUCT_INSTALLMENT_PRICE
            ,xPRODUCT_WHOLESALE_PRICE
            ,xPRC_IN_IMAGE_PATH
            ,xPRD_VARIANT_IMAGE_PATH
            ,int_SHOP_NO
            ,xSHOP_NAME
            );

            SET i = i + 1;

        END WHILE;



    END LOOP get_PRC_STOCK_IN_DETAILS;


    /* UPDATE INV_STOCK_PRC_STOCK_IN_MAP
    SET PROCESS_COMPLETE_TIME = NOW()
    WHERE PK_NO=IN_PK_NO;     */


CLOSE cur_PRC_STOCK_IN_DETAILS;

END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_MER_INV_STOCK_PRC_STOCK_IN_MAP` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_MER_INV_STOCK_PRC_STOCK_IN_MAP` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MER_INV_STOCK_PRC_STOCK_IN_MAP`(IN_PK_NO Integer)
    NO SQL
BEGIN

/*PROC_INV_STOCK_PRC_STOCK_IN_MAP*/
    DECLARE int_F_PRC_STOCK_IN_NO INT(11) DEFAULT 0;
    DECLARE int_F_INV_WAREHOUSE_NO INT(11) DEFAULT 0;

    /* INV_WAREHOUSE_NAME variable DECLARE*/
    DECLARE VAR_INV_WAREHOUSE_NAME  VARCHAR(200);

    /*PRC_STOCK_IN_DETAILS*/
    DECLARE int_HAS_DATA_PRC_STOCK_IN_DETAILS INT DEFAULT 1;
    DECLARE int_RECIEVED_QTY INT;
    DECLARE int_FAULTY_QTY INT;
    DECLARE int_TOTAL INT;

    /*INV STOCK*/
    DECLARE xCODE                            INT;
    DECLARE xF_INV_STOCK_PRC_STOCK_IN_MAP_NO INT;
    DECLARE xF_PRC_STOCK_IN_NO               INT;
    DECLARE xF_PRC_STOCK_IN_DETAILS_NO       INT;
    DECLARE xIG_CODE                         VARCHAR(20);
    DECLARE xSKUID                           VARCHAR(40);
    DECLARE xF_PRD_VARIANT_NO                INT;
    DECLARE xPRD_VARINAT_NAME                VARCHAR(200);
    DECLARE xINVOICE_NAME                    VARCHAR(200);
    DECLARE xF_INV_WAREHOUSE_NO              INT;
    DECLARE xINV_WAREHOUSE_NAME              VARCHAR(200);
    DECLARE xF_BOOKING_NO                    INT;
    DECLARE xF_BOOKING_DETAILS_NO            INT;
    DECLARE xF_ORDER_NO                      INT;
    DECLARE xF_ORDER_DETAILS_NO              INT;
    DECLARE xHS_CODE                         VARCHAR(20);
    DECLARE xHS_CODE_NARRATION               VARCHAR(200);
    DECLARE xF_CATEGORY_NO                   INT;
    DECLARE xCATEGORY_NAME                   VARCHAR(200);
    DECLARE xF_SUB_CATEGORY_NO               INT;
    DECLARE xSUB_CATEGORY_NAME               VARCHAR(200);
    DECLARE xBARCODE                         VARCHAR(40);
    DECLARE xF_BRAND_NO                      INT;
    DECLARE xBRAND_NAME                      VARCHAR(40);
    DECLARE xF_MODEL_NO                      INT;
    DECLARE xMODEL_NAME                      VARCHAR(200);
    DECLARE xPRODUCT_STATUS                  INT;
    DECLARE xBOOKING_STATUS                  INT;
    DECLARE xORDER_STATUS                    INT;
    DECLARE xPRODUCT_PURCHASE_PRICE_GBP      FLOAT;
    DECLARE xPRODUCT_PURCHASE_PRICE          FLOAT;
     DECLARE xMER_PRODUCT_PURCHASE_PRICE_GBP      FLOAT;
    DECLARE xMER_PRODUCT_PURCHASE_PRICE          FLOAT;
    DECLARE xPRODUCT_REGULAR_PRICE           FLOAT;
    DECLARE xPRODUCT_INSTALLMENT_PRICE       FLOAT;
    DECLARE xORDER_PRICE                     FLOAT;
    DECLARE xSS_COST                         FLOAT;
    DECLARE xSM_COST                         FLOAT;
    DECLARE xAIR_FREIGHT_COST                FLOAT;
    DECLARE xSEA_FREIGHT_COST                FLOAT;
    DECLARE xMER_UNIT_VAT_GBP                FLOAT;
    DECLARE xMER_UNIT_VAT_MR                 FLOAT;
    DECLARE xMER_PRODUCT_PURCHASE_PRICE_GBP_FINAL   FLOAT;
    DECLARE xMER_PRODUCT_PURCHASE_PRICE_FINAL       FLOAT;
    DECLARE xPREFERRED_SHIPPING_METHOD       VARCHAR(40);
    DECLARE xF_SHIPPMENT_NO                  INT;
    DECLARE xSHIPMENT_NAME                   VARCHAR(200);
    DECLARE xBOX_BARCODE                     VARCHAR(200);
    DECLARE xF_BOX_NO                        INT;
    DECLARE xPRC_IN_IMAGE_PATH               VARCHAR(200);
    DECLARE xPRD_VARIANT_IMAGE_PATH          VARCHAR(200);
    DECLARE xF_MERCHANT_NO                   INT;

    /*LOOP VARIABLES*/
    DECLARE i INT DEFAULT 0;

    DECLARE cur_PRC_STOCK_IN_DETAILS
        CURSOR FOR

                SELECT

                        INVOICE.F_PRC_STOCK_IN
                        ,INVOICE.PK_NO
                        ,INVOICE.F_PRD_VARIANT_NO
                        ,PRODUCT.MRK_ID_COMPOSITE_CODE
                        ,PRODUCT.COMPOSITE_CODE
                        ,PRODUCT.VARIANT_NAME
                        ,INVOICE.INVOICE_NAME
                        ,PRODUCT.HS_CODE
                        ,PRODUCT.BARCODE
                        ,INVOICE.UNIT_PRICE_GBP_EV
                        ,INVOICE.UNIT_PRICE_MR_EV
                        ,INVOICE.MER_UNIT_PRICE_GBP_EV
                        ,INVOICE.MER_UNIT_PRICE_MR_EV
                        ,INVOICE.MER_UNIT_VAT_GBP
                        ,INVOICE.MER_UNIT_VAT_MR
                        ,INVOICE.RECIEVED_QTY
                        ,INVOICE.FAULTY_QTY
                        ,PRODUCT.REGULAR_PRICE
                        ,PRODUCT.INSTALLMENT_PRICE
                        ,PRODUCT.INTER_DISTRICT_POSTAGE
                        ,PRODUCT.LOCAL_POSTAGE
                        ,PRODUCT.AIR_FREIGHT_CHARGE
                        ,PRODUCT.SEA_FREIGHT_CHARGE
                        ,PRODUCT.PREFERRED_SHIPPING_METHOD
                        ,INVOICE_MASTER.MASTER_INVOICE_RELATIVE_PATH
                        ,PRODUCT.PRIMARY_IMG_RELATIVE_PATH
                        ,PRODUCT_MASTER.F_MODEL
                        ,PRODUCT_MASTER.MODEL_NAME
                        ,PRODUCT_MASTER.F_BRAND
                        ,PRODUCT_MASTER.BRAND_NAME
                        ,PRODUCT_SUB_CATEGORY.PK_NO
                        ,PRODUCT_SUB_CATEGORY.NAME
                        ,PRODUCT_CATEGORY.PK_NO
                        ,PRODUCT_CATEGORY.NAME
                        ,INVOICE_MASTER.F_MERCHANT_NO


                        FROM
                                MER_PRC_STOCK_IN INVOICE_MASTER
                                ,MER_PRC_STOCK_IN_DETAILS INVOICE
                                ,PRD_VARIANT_SETUP PRODUCT
                                ,PRD_MASTER_SETUP PRODUCT_MASTER
                                ,PRD_SUB_CATEGORY PRODUCT_SUB_CATEGORY
                                ,PRD_CATEGORY PRODUCT_CATEGORY


                        WHERE
                            INVOICE.F_PRC_STOCK_IN = int_F_PRC_STOCK_IN_NO
                        AND INVOICE.F_PRD_VARIANT_NO = PRODUCT.PK_NO
                        AND PRODUCT.F_PRD_MASTER_SETUP_NO=  PRODUCT_MASTER.PK_NO
                        AND PRODUCT_MASTER.F_PRD_SUB_CATEGORY_ID= PRODUCT_SUB_CATEGORY.PK_NO
                        AND PRODUCT_SUB_CATEGORY.F_PRD_CATEGORY_NO=  PRODUCT_CATEGORY.PK_NO
                        AND INVOICE_MASTER.PK_NO = INVOICE.F_PRC_STOCK_IN
                            ;



    DECLARE CONTINUE HANDLER
    FOR NOT FOUND SET int_HAS_DATA_PRC_STOCK_IN_DETAILS=0;


    /*delete from R;
    insert into R values ('96');

    insert into R values (int_F_PRC_STOCK_IN_NO);
    insert into R values (int_F_INV_WAREHOUSE_NO);    */


    SELECT F_PRC_STOCK_IN_NO ,F_INV_WAREHOUSE_NO
        INTO int_F_PRC_STOCK_IN_NO, int_F_INV_WAREHOUSE_NO
    FROM MER_INV_STOCK_PRC_STOCK_IN_MAP
    WHERE PK_NO = IN_PK_NO ;


    /*FOR INV_WAREHOUSE_NAME  */

    SELECT NAME
        INTO VAR_INV_WAREHOUSE_NAME
    FROM INV_WAREHOUSE
    WHERE PK_NO = int_F_INV_WAREHOUSE_NO;

    IF int_F_INV_WAREHOUSE_NO = 2 THEN
       SET xPRODUCT_STATUS = 60;
    ELSE
       SET xPRODUCT_STATUS = NULL;
    END IF;
    /*insert into R values (int_F_PRC_STOCK_IN_NO);
    insert into R values (int_F_INV_WAREHOUSE_NO);        */


    OPEN cur_PRC_STOCK_IN_DETAILS;

        INSERT INTO R VALUES ('105');

                get_PRC_STOCK_IN_DETAILS:LOOP

                        FETCH NEXT FROM  cur_PRC_STOCK_IN_DETAILS INTO

                        xF_PRC_STOCK_IN_NO               ,
                        xF_PRC_STOCK_IN_DETAILS_NO       ,
                        xF_PRD_VARIANT_NO                ,
                        xIG_CODE                         ,
                        xSKUID                           ,
                        xPRD_VARINAT_NAME                ,
                        xINVOICE_NAME                    ,
                        xHS_CODE                         ,
                        xBARCODE                         ,
                        xPRODUCT_PURCHASE_PRICE_GBP      ,
                        xPRODUCT_PURCHASE_PRICE          ,
                        xMER_PRODUCT_PURCHASE_PRICE_GBP  ,
                        xMER_PRODUCT_PURCHASE_PRICE      ,
                        xMER_UNIT_VAT_GBP                ,
                        xMER_UNIT_VAT_MR                 ,
                        int_RECIEVED_QTY                 ,
                        int_FAULTY_QTY                   ,
                        xPRODUCT_REGULAR_PRICE           ,
                        xPRODUCT_INSTALLMENT_PRICE       ,
                        xSS_COST                         ,
                        xSM_COST                         ,
                        xAIR_FREIGHT_COST                ,
                        xSEA_FREIGHT_COST                ,
                        xPREFERRED_SHIPPING_METHOD       ,
                        xPRC_IN_IMAGE_PATH               ,
                        xPRD_VARIANT_IMAGE_PATH          ,
                        xF_MODEL_NO                      ,
                        xMODEL_NAME                      ,
                        xF_BRAND_NO                      ,
                        xBRAND_NAME                      ,
                        xF_SUB_CATEGORY_NO               ,
                        xSUB_CATEGORY_NAME               ,
                        xF_CATEGORY_NO                   ,
                        xCATEGORY_NAME                   ,
                        xF_MERCHANT_NO                   ;


        /*TOTAL GEN = RECQTY - FAUTLY QTY*/
        IF int_HAS_DATA_PRC_STOCK_IN_DETAILS = 0 THEN
            LEAVE get_PRC_STOCK_IN_DETAILS;

        END IF;

        SET int_TOTAL = int_RECIEVED_QTY - int_FAULTY_QTY;

        SET i=0;
        WHILE i < int_TOTAL DO

            SET xMER_PRODUCT_PURCHASE_PRICE_GBP_FINAL = xMER_PRODUCT_PURCHASE_PRICE_GBP+xMER_UNIT_VAT_GBP;
            SET xMER_PRODUCT_PURCHASE_PRICE_FINAL = xMER_PRODUCT_PURCHASE_PRICE+xMER_UNIT_VAT_MR;

            INSERT INTO MER_INV_STOCK(
                F_INV_STOCK_PRC_STOCK_IN_MAP_NO
                ,F_PRC_STOCK_IN_NO
                ,F_PRC_STOCK_IN_DETAILS_NO
                ,IG_CODE
                ,SKUID
                ,F_PRD_VARIANT_NO
                ,PRD_VARINAT_NAME
                ,INVOICE_NAME
                ,F_INV_WAREHOUSE_NO
                ,INV_WAREHOUSE_NAME
                ,HS_CODE
                ,F_CATEGORY_NO
                ,CATEGORY_NAME
                ,F_SUB_CATEGORY_NO
                ,SUB_CATEGORY_NAME
                ,BARCODE
                ,F_BRAND_NO
                ,BRAND_NAME
                ,F_MODEL_NO
                ,MODEL_NAME
                ,PRODUCT_PURCHASE_PRICE_GBP
                ,PRODUCT_PURCHASE_PRICE
                ,MER_PRODUCT_PURCHASE_PRICE_GBP
                ,MER_PRODUCT_PURCHASE_PRICE
                ,REGULAR_PRICE
                ,INSTALLMENT_PRICE
                ,SS_COST
                ,SM_COST
                ,AIR_FREIGHT_COST
                ,SEA_FREIGHT_COST
                ,PREFERRED_SHIPPING_METHOD
                ,FINAL_PREFFERED_SHIPPING_METHOD
                ,PRC_IN_IMAGE_PATH
                ,PRD_VARIANT_IMAGE_PATH
                ,PRODUCT_STATUS
                ,F_MERCHANT_NO
                )
            VALUES

            (

            IN_PK_NO
            ,xF_PRC_STOCK_IN_NO
            ,xF_PRC_STOCK_IN_DETAILS_NO
            ,xIG_CODE
            ,xSKUID
            ,xF_PRD_VARIANT_NO
            ,xPRD_VARINAT_NAME
            ,xINVOICE_NAME
            ,int_F_INV_WAREHOUSE_NO
            ,VAR_INV_WAREHOUSE_NAME
            ,xHS_CODE
            ,xF_CATEGORY_NO
            ,xCATEGORY_NAME
            ,xF_SUB_CATEGORY_NO
            ,xSUB_CATEGORY_NAME
            ,xBARCODE
            ,xF_BRAND_NO
            ,xBRAND_NAME
            ,xF_MODEL_NO
            ,xMODEL_NAME
            ,xMER_PRODUCT_PURCHASE_PRICE_GBP_FINAL
            ,xMER_PRODUCT_PURCHASE_PRICE_FINAL
            ,xMER_PRODUCT_PURCHASE_PRICE_GBP
            ,xMER_PRODUCT_PURCHASE_PRICE
            ,xPRODUCT_REGULAR_PRICE
            ,xPRODUCT_INSTALLMENT_PRICE
            ,xSS_COST
            ,xSM_COST
            ,xAIR_FREIGHT_COST
            ,xSEA_FREIGHT_COST
            ,xPREFERRED_SHIPPING_METHOD
            ,xPREFERRED_SHIPPING_METHOD
            ,xPRC_IN_IMAGE_PATH
            ,xPRD_VARIANT_IMAGE_PATH
            ,xPRODUCT_STATUS
            ,xF_MERCHANT_NO
                );

            SET i = i + 1;

        END WHILE;

    END LOOP get_PRC_STOCK_IN_DETAILS;

CLOSE cur_PRC_STOCK_IN_DETAILS;


END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_MER_SC_PACKAGING_LIST_INV_STOCK` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_MER_SC_PACKAGING_LIST_INV_STOCK` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MER_SC_PACKAGING_LIST_INV_STOCK`(SHIPMENT_NO Integer, IS_UPDATE Integer, OUT OUT_STATUS VarChar(20))
    NO SQL
Block1: BEGIN

    DECLARE int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK INT DEFAULT 1;
    DECLARE int_is_duplicate_shipment INT DEFAULT 1;
    DECLARE package_pk_no INT;
    DECLARE box_serial_no INT;
    DECLARE box_no INT;
    DECLARE shipment_name INT;
    DECLARE int_row_count INT;
    DECLARE int_box_row_count INT;
    DECLARE int_row_count_cursor2 INT;
    DECLARE int_row_count_cursor3 INT;
    DECLARE int_width INT;
    DECLARE int_length INT;
    DECLARE int_height INT;
    DECLARE int_weight FLOAT;
    DECLARE int_product_count INT;
    DECLARE int_count_price FLOAT;
    DECLARE mer_int_count_price FLOAT;
    DECLARE variant_no INT;
    DECLARE invoice_no VarChar(255);
    DECLARE invoice_pk_no VarChar(255) DEFAULT '0';
    DECLARE int_product_count_invoice INT;
    DECLARE int_prc_no INT;
    DECLARE vendor_name VarChar(255);
    DECLARE invoice_date VarChar(255);
    DECLARE var_hs_code VarChar(255);
    DECLARE var_ig_code VarChar(255);
    DECLARE sku_id INT;
    DECLARE sub_cat_name VarChar(255);
    DECLARE var_invoice_name VarChar(255);
    DECLARE unit_price FLOAT;
    DECLARE mer_unit_price FLOAT;
    DECLARE var_invoice_details VarChar(4000) DEFAULT '0';
    DECLARE var_invoice_details_part VarChar(4000);
    DECLARE OUT_STATUS_2 VarChar(20);
    DECLARE OUT_STATUS_3 VarChar(20);
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_2 INT DEFAULT 0;
    DECLARE ALL_SUCCESS_3 INT DEFAULT 0;

    DECLARE cur_PROC_SC_PACKAGING_LIST_INV_STOCK
        CURSOR FOR
        SELECT BOX_SERIAL,F_BOX_NO FROM SC_SHIPMENT_BOX WHERE F_SHIPMENT_NO=SHIPMENT_NO;

        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK = 0;

            /*DELETING EXISTING VALUE*/

            IF IS_UPDATE = 1 THEN
              SELECT PK_NO INTO package_pk_no FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO LIMIT 1;
              SELECT FOUND_ROWS() into int_row_count ;

              IF int_row_count > 0 THEN
                DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO ;
              END IF;

              SELECT PK_NO INTO package_pk_no FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO LIMIT 1;
              SELECT FOUND_ROWS() into int_row_count ;

              IF int_row_count > 0 THEN
                DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO ;
              END IF;
            END IF;
        /*DELETING EXISTING VALUE End*/


/* DELETE FROM R; */

            SELECT COUNT(F_SHIPMENT_NO) INTO int_is_duplicate_shipment FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
            SELECT COUNT(F_BOX_NO) INTO int_box_row_count FROM SC_SHIPMENT_BOX WHERE F_SHIPMENT_NO = SHIPMENT_NO;


        IF int_is_duplicate_shipment = 0 THEN

            SELECT CODE INTO shipment_name FROM SC_SHIPMENT WHERE PK_NO = SHIPMENT_NO;

                SET int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK = 1;

                OPEN cur_PROC_SC_PACKAGING_LIST_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                    IF int_row_count  != 0 THEN

                    get_PROC_SC_PACKAGING_LIST_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SC_PACKAGING_LIST_INV_STOCK INTO box_serial_no,box_no;

                        SELECT IFNULL(WIDTH_CM,46),IFNULL(LENGTH_CM,46),IFNULL(HEIGHT_CM,78),IFNULL(WEIGHT_KG,30) INTO int_width,int_length,int_height,int_weight FROM SC_BOX WHERE PK_NO = box_no;

                        IF int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK = 0 THEN
                            LEAVE get_PROC_SC_PACKAGING_LIST_INV_STOCK;
                        END IF;

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;


            /*-------------------------BLOCK 3 BEGINS ------------------------------*/
            Block3: BEGIN
                    DECLARE int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_PRC_STOCK_IN_INV_STOCK
                    CURSOR FOR
                    SELECT p.VENDOR_NAME,p.INVOICE_DATE,p.INVOICE_NO,MER_INV_STOCK.F_PRC_STOCK_IN_NO AS prc_no, (SELECT COUNT(*) FROM  MER_INV_STOCK where F_BOX_NO = box_no and F_PRC_STOCK_IN_NO = prc_no) AS PRODUCT_COUNT
                    FROM MER_PRC_STOCK_IN AS p
                    JOIN MER_INV_STOCK ON p.PK_NO=MER_INV_STOCK.F_PRC_STOCK_IN_NO
                    WHERE MER_INV_STOCK.F_BOX_NO=box_no
                    group by F_PRC_STOCK_IN_NO;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK = 0;

                    OPEN cur_PROC_PRC_STOCK_IN_INV_STOCK;
                        SELECT FOUND_ROWS() into int_row_count_cursor3 ;

                            IF int_row_count_cursor3 != 0 THEN

                                get_PROC_PRC_STOCK_IN_INV_STOCK:LOOP
                                    FETCH NEXT FROM  cur_PROC_PRC_STOCK_IN_INV_STOCK INTO vendor_name,invoice_date,invoice_no,int_prc_no,int_product_count_invoice;


                                            IF int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK = 0 THEN
                                                    LEAVE get_PROC_PRC_STOCK_IN_INV_STOCK;
                                            END IF;

                                        SET ALL_SUCCESS_3 = ALL_SUCCESS_3 + 1;


                                        SELECT concat(vendor_name,' ',invoice_date,' ',invoice_no,'(',int_product_count_invoice,')') INTO var_invoice_details_part;


                                        IF var_invoice_details = '0' THEN
                                           SET var_invoice_details = var_invoice_details_part;
                                           SET invoice_pk_no = int_prc_no;

                                        ELSE

                                           SELECT concat(var_invoice_details,', ',var_invoice_details_part) INTO var_invoice_details;
                                           SELECT concat(invoice_pk_no,', ',int_prc_no) INTO invoice_pk_no;

                                        END IF;



                                END LOOP get_PROC_PRC_STOCK_IN_INV_STOCK;

                            END IF;


                    CLOSE cur_PROC_PRC_STOCK_IN_INV_STOCK;


                    IF ALL_SUCCESS_3 = int_row_count_cursor3 THEN
                        SET OUT_STATUS_3 = 'success';
                        INSERT INTO SC_PACKAGING_LIST( F_SHIPMENT_NO, SHIPMENT_NAME, BOX_SERIAL_NO, F_BOX_NO, WIDTH_CM, LENGTH_CM, HEIGHT_CM, WEIGHT_KG,INVOICE_DETAILS,INVOICE_NO) VALUES ( SHIPMENT_NO, shipment_name, box_serial_no, box_no, int_width, int_length, int_height, int_weight,var_invoice_details,invoice_pk_no );
                        SET var_invoice_details = '0';
                        SET invoice_pk_no = '0';
                    ELSE
                        SET OUT_STATUS_3 = 'failed';
                        SET ALL_SUCCESS = 99;
                        DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                        DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;

                    END IF;
                    SET ALL_SUCCESS_3 = 0;

            END Block3;

            /*-------------------------BLOCK 3 ENDS ------------------------------*/



            /*-------------------------BLOCK 2 BEGINS ------------------------------*/
            Block2: BEGIN
                    DECLARE int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_SC_PACKING_LIST_INV_STOCK
                    CURSOR FOR

                    SELECT F_PRD_VARIANT_NO,HS_CODE,SKUID,IG_CODE,SUB_CATEGORY_NAME,INVOICE_NAME,SUM(PRODUCT_PURCHASE_PRICE_GBP) AS int_count_price,SUM(MER_PRODUCT_PURCHASE_PRICE_GBP) AS mer_int_count_price, COUNT(PK_NO) AS int_product_count FROM MER_INV_STOCK WHERE F_BOX_NO=box_no GROUP BY SKUID;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK = 0;

                    OPEN cur_PROC_SC_PACKING_LIST_INV_STOCK;
                        SELECT FOUND_ROWS() into int_row_count_cursor2 ;

                            IF int_row_count_cursor2  != 0 THEN

                                get_PROC_SC_PACKING_LIST_INV_STOCK:LOOP
                                    FETCH NEXT FROM  cur_PROC_SC_PACKING_LIST_INV_STOCK INTO variant_no,var_hs_code,sku_id,var_ig_code,sub_cat_name,var_invoice_name,int_count_price,mer_int_count_price, int_product_count;



                                            IF int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK = 0 THEN
                                                    LEAVE get_PROC_SC_PACKING_LIST_INV_STOCK;
                                            END IF;

                                        SET ALL_SUCCESS_2 = ALL_SUCCESS_2 + 1;

                                        SET unit_price = int_count_price/int_product_count;
                                        SET mer_unit_price = mer_int_count_price/int_product_count;

                                        INSERT INTO SC_PACKING_LIST( F_SHIPMENT_NO, SHIPMENT_NAME, BOX_SERIAL_NO, F_BOX_NO, PRD_VARINAT_NO, HS_CODE, SKU_ID, IG_CODE, SUBCATEGORY_NAME, PRC_INV_NAME, QTY, UNIT_PRICE, TOTAL_PRICE, MER_UNIT_PRICE, MER_TOTAL_PRICE) VALUES ( SHIPMENT_NO, shipment_name, box_serial_no, box_no, variant_no, var_hs_code, sku_id, var_ig_code, sub_cat_name, var_invoice_name, int_product_count, unit_price, int_count_price, mer_unit_price, mer_int_count_price );


                                END LOOP get_PROC_SC_PACKING_LIST_INV_STOCK;

                            END IF;


                    CLOSE cur_PROC_SC_PACKING_LIST_INV_STOCK;


                    IF ALL_SUCCESS_2 = int_row_count_cursor2 THEN
                        SET OUT_STATUS_2 = 'success';
                    ELSE
                        SET OUT_STATUS_2 = 'failed';
                        SET ALL_SUCCESS = 99;
                        DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                        DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;

                    END IF;
                    SET ALL_SUCCESS_2 = 0;

            END Block2;

                    END LOOP get_PROC_SC_PACKAGING_LIST_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_PACKAGING_LIST_INV_STOCK;

                  IF ALL_SUCCESS = int_box_row_count AND OUT_STATUS_2 = 'success' AND OUT_STATUS_3 = 'success' THEN
                     SET OUT_STATUS = 'success';
                   ELSE
                     SET OUT_STATUS = 'failed';
                     DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                     DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                   END IF;


        ELSE
           SET OUT_STATUS = 'duplicate-shipment';

        END IF;

INSERT INTO R VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_ORDER_RTS_COLLECT` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_ORDER_RTS_COLLECT` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_ORDER_RTS_COLLECT`(IN_ORDER_ID_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COLUMN_SEPARATOR VarChar(1), OUT OUT_STATUS VarChar(20))
    NO SQL
BEGIN


    DECLARE var_arrary_param1 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE PICKUP_ID_ INT;
    DECLARE LAST_INSERT_PK_NO INT;
    DECLARE i,j INT;
    DECLARE ALL_SUCCESS INT DEFAULT 0;

DELETE FROM R;
INSERT INTO R VALUES('Start Procedre');

 insert into R values (concat('Parameter Array ',IN_ORDER_ID_ARRAY));
 insert into R values (concat('IN_ROW_COUNT ',IN_ROW_COUNT));

            create temporary table temp_order_id_no
               ( order_pk_no int );

            SET var_arrary_row_part =  IN_ORDER_ID_ARRAY;

            SET i=1;

            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO R VALUES(concat('loop i val ', i));

--                 SELECT substring_index(IN_ORDER_ID_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

                -- SET var_arrary_row      =  IN_ORDER_ID_ARRAY;

                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;

                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );

                -- SET IN_ORDER_ID_ARRAY = substring(IN_ORDER_ID_ARRAY , length(var_arrary_row)+2 , length(IN_ORDER_ID_ARRAY) - length(var_arrary_row) );

insert into R values (concat('ROW PART   ', var_arrary_row_part));
insert into R values (concat('Param 1   ', var_arrary_param1));

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;

                    insert into R values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));

                    INSERT INTO temp_order_id_no( order_pk_no) VALUES ( var_arrary_param1 );

                set i = i + 1;

            END WHILE;

                IF ALL_SUCCESS = IN_ROW_COUNT THEN
                    SET OUT_STATUS = 'success';
                    SELECT RTS_BATCH_NO INTO PICKUP_ID_ FROM SLS_BATCH_LIST ORDER BY PK_NO DESC LIMIT 1;
                    SET PICKUP_ID_ = PICKUP_ID_ + 1;
                    INSERT INTO SLS_BATCH_LIST (RTS_BATCH_NO) VALUES (PICKUP_ID_);
                    SELECT LAST_INSERT_ID() INTO LAST_INSERT_PK_NO;
                    UPDATE SLS_ORDER SET PICKUP_ID = LAST_INSERT_PK_NO WHERE PK_NO IN (select order_pk_no from temp_order_id_no);

                ELSE
                    SET OUT_STATUS = 'failed';
                END IF;

drop temporary table if exists temp_order_id_no;

INSERT INTO R VALUES(concat('End of Procedure with status ', OUT_STATUS));

END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, IN_WIDTH Integer, IN_LENGTH Integer, IN_HEIGHT Integer, IN_WEIGHT Float, OUT OUT_STATUS VarChar(200))
    NO SQL
Block1: BEGIN


/*CALL PROC_SC_BOX_INV_STOCK(20100251,'101103111102~1~9|',1,3,'~','|',1,0,width,length,height,weight,@OUT_STATUS);*/

    DECLARE int_HAS_cur_PROC_SC_BOX_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE xLIMIT INT;
    DECLARE sPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE xCUSTOMER_PREFFERED_SHIPPING_METHOD VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE int_row_count INT;
    DECLARE int_row_count_cursor2 INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_box_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE user_name VARCHAR(200);
    DECLARE int_count_updated_row INT DEFAULT 0;
    DECLARE i,j INT;
    DECLARE check_shipment_type VARCHAR(45);
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_PART INT DEFAULT 1;
    DECLARE inverted_shipment_type VARCHAR(45);
    DECLARE variant_name VARCHAR(500);
    DECLARE is_ship_method_conflict INT DEFAULT 0;
    DECLARE conflict_qty INT DEFAULT 0;
    DECLARE variant_name_with_qty VARCHAR(500);
    
    DECLARE cur_PROC_SC_BOX_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
            AND SKUID=var_arrary_param1
            AND FINAL_PREFFERED_SHIPPING_METHOD = check_shipment_type
            ORDER BY F_ORDER_NO DESC LIMIT var_arrary_param3;


        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0;
               

INSERT INTO S VALUES('Start Procedre');

            SELECT SUBSTRING(IN_BOX_LABEL, 1, 1) INTO check_shipment_type;

            INSERT INTO S VALUES(concat('SC BOX label ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('First_Box ' , check_shipment_type));

            IF check_shipment_type = '1' THEN
               SET check_shipment_type = 'AIR';
            ELSE
               SET check_shipment_type = 'SEA';
            END IF;


            SELECT PK_NO, COUNT(BOX_NO) INTO int_box_pk, int_is_duplicate_box FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;


            SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS user_name_concate INTO user_name FROM SA_USER WHERE PK_NO = USER_ID;
DELETE FROM S;
INSERT INTO S VALUES(concat('SC BOX Pk ' , int_box_pk));
INSERT INTO S VALUES(concat('Duplicate Box Flag ', int_is_duplicate_box));
INSERT INTO S VALUES(concat('Shipment Type ' , check_shipment_type));

        IF int_is_duplicate_box = 0 THEN

            SELECT F_INV_WAREHOUSE_NO INTO from_warehouse_no FROM SS_INV_USER_MAP WHERE F_USER_NO = USER_ID;
            INSERT INTO S VALUES(concat('IN_BOX_LABEL ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('USER_ID ' , USER_ID));
            INSERT INTO S VALUES(concat('user_name ' , user_name));
            INSERT INTO S VALUES(concat('INV house ' , from_warehouse_no));
            INSERT INTO SC_BOX (BOX_NO
                               ,F_BOX_USER_NO
                               ,USER_NAME
                               ,BOX_STATUS
                               ,F_INV_WAREHOUSE_NO
                               ,WIDTH_CM
                               ,LENGTH_CM
                               ,HEIGHT_CM
                               ,WEIGHT_KG
                               ) VALUES(
                               IN_BOX_LABEL
                               ,USER_ID
                               ,user_name
                               ,10
                               ,from_warehouse_no
                               ,IN_WIDTH
                               ,IN_LENGTH
                               ,IN_HEIGHT
                               ,IN_WEIGHT);
            SELECT LAST_INSERT_ID() INTO int_box_pk;

INSERT INTO S VALUES(concat('Inserted SC Box Pk ', int_box_pk));
insert into S values (concat('Parameter Array ',IN_INV_BOXING_ARRAY));

            SET i=1;


            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO S VALUES(concat('loop i val ', i));

                SELECT substring_index(IN_INV_BOXING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

insert into S values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;



                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );


                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) );


                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_BOXING_ARRAY = substring(IN_INV_BOXING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_BOXING_ARRAY) - length(var_arrary_row) );




insert into S values (concat('Param 1   ', var_arrary_param1));
insert into S values (concat('Param 2   ', var_arrary_param2));
insert into S values (concat('Param 3   ', var_arrary_param3));


                SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 1;
                SET int_count_updated_row = 0;    
                insert into S values (concat('Updated Row Count ', int_count_updated_row));
                OPEN cur_PROC_SC_BOX_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into S values (concat('Found row before Loop ', int_row_count));

                    IF int_row_count != 0 && int_row_count <= var_arrary_param3 THEN

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;


                    insert into S values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));
                       /* SET j=0;


INSERT INTO S VALUES(concat('init j val ', j));*/

                    get_PROC_SC_BOX_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SC_BOX_INV_STOCK INTO xPK_NO;

INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOX_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_BOX_INV_STOCK;
                        END IF;


INSERT INTO S VALUES(concat('INV Stock PK_NO ', xPK_NO) );

                         UPDATE INV_STOCK
                            SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                            WHERE PK_NO =  xPK_NO;
                        INSERT INTO SC_BOX_INV_STOCK( F_BOX_NO, F_INV_STOCK_NO) VALUES ( int_box_pk, xPK_NO );
                          /*  SET j = j + 1;*/
                          SET int_count_updated_row = int_count_updated_row + 1;


                    END LOOP get_PROC_SC_BOX_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_BOX_INV_STOCK;
                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );
                INSERT INTO S VALUES(concat('var_arrary_param3 ', var_arrary_param3) );
                SET xLIMIT = var_arrary_param3 - int_count_updated_row;
                INSERT INTO S VALUES(concat('LIMIT VALUE ', xLIMIT) );
                                 
                IF int_count_updated_row < var_arrary_param3 THEN

                /*-------------------------BLOCK 2 BEGINS ------------------------------*/
                Block2: BEGIN
                    DECLARE int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_SC_BOXING_LIST_INV_STOCK
                    CURSOR FOR
                    SELECT
                        PK_NO,CUSTOMER_PREFFERED_SHIPPING_METHOD
                        FROM INV_STOCK
                        WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
                        AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
                        AND SKUID=var_arrary_param1;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0;

                OPEN cur_PROC_SC_BOXING_LIST_INV_STOCK;
                    SELECT FOUND_ROWS() into int_row_count_cursor2 ;
                    insert into S values (concat('Found row2 before Loop ', int_row_count_cursor2));

                    IF int_row_count_cursor2 != 0 THEN  
                       IF int_count_updated_row = 0 THEN 
                          SET ALL_SUCCESS = ALL_SUCCESS + 1; 
                       END IF;
                                                          
                        INSERT INTO S VALUES(concat('ALL_SUCCESS LINE 213 ', ALL_SUCCESS) );
                        get_PROC_SC_BOX_INV_STOCK_TOP:LOOP

                            FETCH NEXT FROM cur_PROC_SC_BOXING_LIST_INV_STOCK  INTO xPK_NO,xCUSTOMER_PREFFERED_SHIPPING_METHOD;

                            INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK));
                            INSERT INTO S VALUES(concat('Cus Preferred ', xCUSTOMER_PREFFERED_SHIPPING_METHOD));
                            
                                        IF int_count_updated_row = var_arrary_param3 OR int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0 THEN

                                                LEAVE get_PROC_SC_BOX_INV_STOCK_TOP;
                                        END IF;

                            INSERT INTO S VALUES(concat('INV Stock TOP PK_NO ', xPK_NO) );

                            IF xCUSTOMER_PREFFERED_SHIPPING_METHOD IS NULL OR xCUSTOMER_PREFFERED_SHIPPING_METHOD = check_shipment_type THEN

                                UPDATE INV_STOCK
                                    SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                                    WHERE PK_NO =  xPK_NO;
                                INSERT INTO SC_BOX_INV_STOCK( F_BOX_NO, F_INV_STOCK_NO) VALUES ( int_box_pk, xPK_NO );
                                /*  SET j = j + 1;*/
                                SET int_count_updated_row = int_count_updated_row + 1;
                                
                                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );
                            
                            ELSEIF xCUSTOMER_PREFFERED_SHIPPING_METHOD <> check_shipment_type THEN
                                   IF check_shipment_type = 'SEA' THEN
                                      SET inverted_shipment_type = 'AIR';
                                   ELSE 
                                      SET inverted_shipment_type = 'SEA'; 
                                   END IF;
                                   SELECT PRD_VARINAT_NAME INTO variant_name FROM INV_STOCK WHERE PK_NO = xPK_NO; 
                                   SET is_ship_method_conflict = 1;  
                                   SET conflict_qty = int_row_count_cursor2;
                                   INSERT INTO S VALUES(CONCAT('variant Name ', variant_name) );
                                   INSERT INTO S VALUES(CONCAT('is_ship_method_conflict ', is_ship_method_conflict) );  
                                   INSERT INTO S VALUES(CONCAT('conflict_qty ', conflict_qty) );
                                   
                            END IF;


                        END LOOP get_PROC_SC_BOX_INV_STOCK_TOP;
                    END IF;

                CLOSE cur_PROC_SC_BOXING_LIST_INV_STOCK;

                END Block2;
                /*-------------------------BLOCK 2 ENDS ------------------------------*/


                   IF int_count_updated_row != var_arrary_param3 THEN
                     /*UPDATE INV_STOCK
                         SET PRODUCT_STATUS = NULL,
                             BOX_BARCODE = NULL,
                             BOX_TYPE = NULL,
                             F_BOX_NO = NULL 
                         WHERE SKUID=var_arrary_param1
                         AND F_BOX_NO =  int_box_pk;*/

                     SET ALL_SUCCESS_PART = 0;
                   END IF;

                END IF;

                set i = i + 1;

            END WHILE;

                  /* IF ALL_SUCCESS_PART = 0 THEN
                    SET OUT_STATUS = 'failed-partial';

                  ELSE */  
                  INSERT INTO S VALUES(concat('ALL_SUCCESS_PART ', ALL_SUCCESS_PART) );
                  INSERT INTO S VALUES(concat('ALL_SUCCESS ', ALL_SUCCESS) );
                  INSERT INTO S VALUES(concat('IN_ROW_COUNT ', IN_ROW_COUNT) );
                  IF ALL_SUCCESS = IN_ROW_COUNT AND ALL_SUCCESS_PART = 1 THEN
                     SET OUT_STATUS = 'success';
                     
                  ELSEIF is_ship_method_conflict = 1 THEN
                     SET variant_name = CONCAT('Method Conflict for ',variant_name);
                     SET variant_name_with_qty = CONCAT(' => QTY ',conflict_qty);
                     SET OUT_STATUS = CONCAT(variant_name,variant_name_with_qty);
                     INSERT INTO S VALUES(CONCAT('OUT STATUS ', OUT_STATUS));
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                        IF int_box_pk IS NOT NULL THEN

                            UPDATE INV_STOCK
                                SET F_BOX_NO = NULL,
                                    PRODUCT_STATUS = NULL,
                                    BOX_BARCODE = NULL,
                                    BOX_TYPE = NULL
                                WHERE F_BOX_NO = int_box_pk;

                            DELETE FROM SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk;
                            DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;
                        END IF;

                  ELSE
                    SET OUT_STATUS = 'failed';
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                        IF int_box_pk IS NOT NULL THEN

                            UPDATE INV_STOCK
                                SET F_BOX_NO = NULL,
                                    PRODUCT_STATUS = NULL,
                                    BOX_BARCODE = NULL,
                                    BOX_TYPE = NULL
                                WHERE F_BOX_NO = int_box_pk;

                            DELETE FROM SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk ;

                            DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;
                        END IF;

                   END IF;


        ELSE
           SET OUT_STATUS = 'duplicate-box';

        END IF;

INSERT INTO S VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK_HELPER` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK_HELPER` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK_HELPER`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer)
    NO SQL
BEGIN

SET max_sp_recursion_depth=0;

                                                           
  INSERT INTO R VALUES('helper5');                                                         
/*10101010~10~5|10101011~9~3|10101012~10~1|*/
    INSERT INTO R VALUES('helper7'); 
      
  CALL PROC_SC_BOX_INV_STOCK(IN_BOX_LABEL, IN_INV_BOXING_ARRAY, IN_ROW_COUNT, IN_COL_PARAMETERS, IN_COLUMN_SEPARATOR, IN_ROW_SEPARATOR, USER_ID, IS_UPDATE,@OUT_STATUS);


INSERT INTO R VALUES(@OUT_STATUS);

        


END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK_ITEM_ADD` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK_ITEM_ADD` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK_ITEM_ADD`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, IN_WIDTH Integer, IN_LENGTH Integer, IN_HEIGHT Integer, IN_WEIGHT Float, OUT OUT_STATUS VarChar(20))
    NO SQL
Block1: BEGIN


/*CALL PROC_SC_BOX_INV_STOCK_ITEM_ADD(20100251,'101103111102~1~9|',1,3,'~','|',1,0,@OUT_STATUS);*/

    DECLARE int_HAS_cur_PROC_SC_BOX_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE xLIMIT INT;
    DECLARE sPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE xCUSTOMER_PREFFERED_SHIPPING_METHOD VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE var_inv_stored_pk VARCHAR(20000) DEFAULT 0;
    DECLARE int_row_count INT;
    DECLARE int_row_count_cursor2 INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_box_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE user_name VARCHAR(200);
    DECLARE int_count_updated_row INT DEFAULT 0;
    DECLARE i,j INT;
    DECLARE check_shipment_type VARCHAR(45);
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_PART INT DEFAULT 1;
    DECLARE inverted_shipment_type VARCHAR(45);
    DECLARE variant_name VARCHAR(500);
    DECLARE is_ship_method_conflict INT DEFAULT 0;
    DECLARE conflict_qty INT DEFAULT 0;
    DECLARE variant_name_with_qty VARCHAR(500);
    
    DECLARE cur_PROC_SC_BOX_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
            AND SKUID=var_arrary_param1
            AND FINAL_PREFFERED_SHIPPING_METHOD = check_shipment_type
            ORDER BY F_ORDER_NO DESC LIMIT var_arrary_param3;


        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0;

            DELETE FROM S;
            /*REBOXING*/



           /* IF IS_UPDATE = 1 THEN
              SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
              SELECT FOUND_ROWS() into int_row_count ;
              INSERT INTO S VALUES(concat('DELETE FOR UPDATE ' , int_row_count));
              INSERT INTO S VALUES(int_row_count);
              IF int_row_count > 0 THEN
              UPDATE INV_STOCK
                     SET PRODUCT_STATUS = NULL,
                     BOX_BARCODE = NULL,
                     BOX_TYPE = NULL,
                     F_BOX_NO = NULL
              WHERE F_BOX_NO =  int_box_pk ;

              DELETE FROM SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk ;
                 INSERT INTO S VALUES(2);
              DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;
              END IF;

            END IF;
        REBOXING End*/


INSERT INTO S VALUES('Start Procedre');

            SELECT SUBSTRING(IN_BOX_LABEL, 1, 1) INTO check_shipment_type;

            INSERT INTO S VALUES(CONCAT('SC BOX label ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(CONCAT('First_Box ' , check_shipment_type));

            IF check_shipment_type = '1' THEN
               SET check_shipment_type = 'AIR';
            ELSE
               SET check_shipment_type = 'SEA';
            END IF;

            SELECT PK_NO, COUNT(BOX_NO) INTO int_box_pk, int_is_duplicate_box FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;

            -- SELECT CONCAT(first_name, ' ', last_name) AS user_name_concate INTO user_name FROM admin_users WHERE auth_id = USER_ID;
DELETE FROM S;
INSERT INTO S VALUES(CONCAT('SC BOX Pk ' , int_box_pk));
INSERT INTO S VALUES(CONCAT('Duplicate Box Flag ', int_is_duplicate_box));
INSERT INTO S VALUES(CONCAT('Shipment Type ' , check_shipment_type));

        IF int_is_duplicate_box != 0 THEN

        CREATE TEMPORARY TABLE temp2_inv_pk_no
               ( inv_pk_no INT );

        UPDATE SC_BOX SET WIDTH_CM = IN_WIDTH, LENGTH_CM = IN_LENGTH, HEIGHT_CM = IN_HEIGHT, WEIGHT_KG = IN_WEIGHT WHERE BOX_NO = IN_BOX_LABEL;
            -- SELECT F_INV_WAREHOUSE_NO INTO from_warehouse_no FROM SS_INV_USER_MAP WHERE F_USER_NO = USER_ID;
            INSERT INTO S VALUES(CONCAT('IN_BOX_LABEL ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(CONCAT('USER_ID ' , USER_ID));
            -- INSERT INTO S VALUES(concat('user_name ' , user_name));
            -- INSERT INTO S VALUES(concat('INV house ' , from_warehouse_no));
            -- INSERT INTO SC_BOX (BOX_NO,F_BOX_USER_NO,USER_NAME,BOX_STATUS,F_INV_WAREHOUSE_NO) VALUES(IN_BOX_LABEL,USER_ID,user_name,10,from_warehouse_no);
            -- SELECT LAST_INSERT_ID() INTO int_box_pk;

INSERT INTO S VALUES(CONCAT('Inserted SC Box Pk ', int_box_pk));
INSERT INTO S VALUES (CONCAT('Parameter Array ',IN_INV_BOXING_ARRAY));

            SET i=1;


            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO S VALUES(CONCAT('loop i val ', i));

                SELECT SUBSTRING_INDEX(IN_INV_BOXING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

INSERT INTO S VALUES (CONCAT('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;



                SELECT SUBSTRING_INDEX(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param1)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param1) );


                SELECT SUBSTRING_INDEX(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param2)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param2) );


                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_BOXING_ARRAY = SUBSTRING(IN_INV_BOXING_ARRAY , LENGTH(var_arrary_row)+2 , LENGTH(IN_INV_BOXING_ARRAY) - LENGTH(var_arrary_row) );




INSERT INTO S VALUES (CONCAT('Param 1   ', var_arrary_param1));
INSERT INTO S VALUES (CONCAT('Param 2   ', var_arrary_param2));
INSERT INTO S VALUES (CONCAT('Param 3   ', var_arrary_param3));


                SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 1;
                SET int_count_updated_row = 0;
                INSERT INTO S VALUES (CONCAT('Updated Row Count ', int_count_updated_row));
                OPEN cur_PROC_SC_BOX_INV_STOCK;
                SELECT FOUND_ROWS() INTO int_row_count ;

                INSERT INTO S VALUES (CONCAT('Found row before Loop ', int_row_count));

                    IF int_row_count != 0 && int_row_count <= var_arrary_param3 THEN

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;


                    INSERT INTO S VALUES (CONCAT('ALL SUCCESS VAL ', ALL_SUCCESS));
                       /* SET j=0;


INSERT INTO S VALUES(concat('init j val ', j));*/

                    get_PROC_SC_BOX_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SC_BOX_INV_STOCK INTO xPK_NO;

INSERT INTO S VALUES(CONCAT('Loop Control var ', int_HAS_cur_PROC_SC_BOX_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_BOX_INV_STOCK;
                        END IF;


INSERT INTO S VALUES(CONCAT('INV Stock PK_NO ', xPK_NO) );

                         UPDATE INV_STOCK
                            SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                            WHERE PK_NO =  xPK_NO;
                        INSERT INTO SC_BOX_INV_STOCK( F_BOX_NO, F_INV_STOCK_NO) VALUES ( int_box_pk, xPK_NO );
                        /*  SET j = j + 1;*/
                        SET int_count_updated_row = int_count_updated_row + 1;
                        INSERT INTO temp2_inv_pk_no(inv_pk_no) VALUES (xPK_NO);
                        /*if var_inv_stored_pk = 0 THEN
                            SET var_inv_stored_pk = xPK_NO;
                        ELSE
                            SET var_inv_stored_pk = CONCAT(var_inv_stored_pk,',',xPK_NO);
                        END IF;
                        */
                    INSERT INTO S VALUES(CONCAT('var_inv_stored_pk ', var_inv_stored_pk) );

                    END LOOP get_PROC_SC_BOX_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_BOX_INV_STOCK;
                INSERT INTO S VALUES(CONCAT('Updated Rows ', int_count_updated_row) );
                INSERT INTO S VALUES(CONCAT('var_arrary_param3 ', var_arrary_param3) );
                SET xLIMIT = var_arrary_param3 - int_count_updated_row;
                INSERT INTO S VALUES(CONCAT('LIMIT VALUE ', xLIMIT) );

                IF int_count_updated_row < var_arrary_param3 THEN

                /*-------------------------BLOCK 2 BEGINS ------------------------------*/
                Block2: BEGIN
                    DECLARE int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_SC_BOXING_LIST_INV_STOCK
                    CURSOR FOR
                    SELECT
                        PK_NO,CUSTOMER_PREFFERED_SHIPPING_METHOD
                        FROM INV_STOCK
                        WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
                        AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
                        AND SKUID=var_arrary_param1;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0;

                OPEN cur_PROC_SC_BOXING_LIST_INV_STOCK;
                    SELECT FOUND_ROWS() INTO int_row_count_cursor2 ;
                    INSERT INTO S VALUES (CONCAT('Found row2 before Loop ', int_row_count_cursor2));

                    IF int_row_count_cursor2 != 0 THEN
                       IF int_count_updated_row = 0 THEN
                          SET ALL_SUCCESS = ALL_SUCCESS + 1;
                       END IF;

                        INSERT INTO S VALUES(CONCAT('ALL_SUCCESS LINE 223 ', ALL_SUCCESS) );
                        get_PROC_SC_BOX_INV_STOCK_TOP:LOOP

                            FETCH NEXT FROM cur_PROC_SC_BOXING_LIST_INV_STOCK  INTO xPK_NO,xCUSTOMER_PREFFERED_SHIPPING_METHOD;

                            INSERT INTO S VALUES(CONCAT('Loop Control var ', int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK));
                            INSERT INTO S VALUES(CONCAT('Cus Preferred ', xCUSTOMER_PREFFERED_SHIPPING_METHOD));

                                        IF int_count_updated_row = var_arrary_param3 OR int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0 THEN

                                                LEAVE get_PROC_SC_BOX_INV_STOCK_TOP;
                                        END IF;

                            INSERT INTO S VALUES(CONCAT('INV Stock TOP PK_NO ', xPK_NO) );

                            IF xCUSTOMER_PREFFERED_SHIPPING_METHOD IS NULL OR xCUSTOMER_PREFFERED_SHIPPING_METHOD = check_shipment_type THEN

                                UPDATE INV_STOCK
                                    SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                                    WHERE PK_NO =  xPK_NO;
                                INSERT INTO SC_BOX_INV_STOCK( F_BOX_NO, F_INV_STOCK_NO) VALUES ( int_box_pk, xPK_NO );
                                /*  SET j = j + 1;*/
                                SET int_count_updated_row = int_count_updated_row + 1;
                                INSERT INTO temp2_inv_pk_no(inv_pk_no) VALUES (xPK_NO);
                                /*if var_inv_stored_pk = 0 THEN
                                    SET var_inv_stored_pk = xPK_NO;
                                ELSE
                                    SET var_inv_stored_pk = CONCAT(var_inv_stored_pk,',',xPK_NO);
                                END IF;
                                */
                                INSERT INTO S VALUES(CONCAT('var_inv_stored_pk ', var_inv_stored_pk) );

                                INSERT INTO S VALUES(CONCAT('Updated Rows ', int_count_updated_row) );
                                
                    ELSEIF xCUSTOMER_PREFFERED_SHIPPING_METHOD <> check_shipment_type THEN
                                   IF check_shipment_type = 'SEA' THEN
                                      SET inverted_shipment_type = 'AIR';
                                   ELSE 
                                      SET inverted_shipment_type = 'SEA'; 
                                   END IF;
                                   SELECT PRD_VARINAT_NAME INTO variant_name FROM INV_STOCK WHERE PK_NO = xPK_NO; 
                                   SET is_ship_method_conflict = 1;  
                                   SET conflict_qty = int_row_count_cursor2;
                                   INSERT INTO S VALUES(CONCAT('variant Name ', variant_name) );
                                   INSERT INTO S VALUES(CONCAT('is_ship_method_conflict ', is_ship_method_conflict) );  
                                   INSERT INTO S VALUES(CONCAT('conflict_qty ', conflict_qty) );
                            END IF;


                        END LOOP get_PROC_SC_BOX_INV_STOCK_TOP;
                    END IF;

                CLOSE cur_PROC_SC_BOXING_LIST_INV_STOCK;

                END Block2;
                /*-------------------------BLOCK 2 ENDS ------------------------------*/

                   IF int_count_updated_row != var_arrary_param3 THEN
                     /*UPDATE INV_STOCK
                         SET PRODUCT_STATUS = NULL,
                             BOX_BARCODE = NULL,
                             BOX_TYPE = NULL,
                             F_BOX_NO = NULL
                         WHERE SKUID=var_arrary_param1
                         AND F_BOX_NO =  int_box_pk;*/

                     SET ALL_SUCCESS_PART = 0;
                   END IF;

                END IF;

                SET i = i + 1;

            END WHILE;

                  /* IF ALL_SUCCESS_PART = 0 THEN
                    SET OUT_STATUS = 'failed-partial';

                  ELSE */
                  INSERT INTO S VALUES(CONCAT('ALL_SUCCESS_PART ', ALL_SUCCESS_PART) );
                  INSERT INTO S VALUES(CONCAT('ALL_SUCCESS ', ALL_SUCCESS) );
                  INSERT INTO S VALUES(CONCAT('IN_ROW_COUNT ', IN_ROW_COUNT) );
                  IF ALL_SUCCESS = IN_ROW_COUNT AND ALL_SUCCESS_PART = 1 THEN
                     SET OUT_STATUS = 'success';
                     
          ELSEIF is_ship_method_conflict = 1 THEN
                     SET variant_name = CONCAT('Method Conflict for ',variant_name);
                     SET variant_name_with_qty = CONCAT(' => QTY ',conflict_qty);
                     SET OUT_STATUS = CONCAT(variant_name,variant_name_with_qty);
                     INSERT INTO S VALUES(CONCAT('OUT STATUS ', OUT_STATUS));
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                    UPDATE INV_STOCK
                           SET F_BOX_NO = NULL,
                               PRODUCT_STATUS = NULL,
                               BOX_BARCODE = NULL,
                               BOX_TYPE = NULL
                           WHERE PK_NO IN (SELECT inv_pk_no FROM temp2_inv_pk_no);

                    DELETE FROM SC_BOX_INV_STOCK
                    WHERE F_INV_STOCK_NO IN (SELECT inv_pk_no FROM temp2_inv_pk_no); 
                    
                  ELSE
                    SET OUT_STATUS = 'failed';
                    INSERT INTO S VALUES(CONCAT('var_inv_stored_pk ', var_inv_stored_pk) );
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                    UPDATE INV_STOCK
                           SET F_BOX_NO = NULL,
                               PRODUCT_STATUS = NULL,
                               BOX_BARCODE = NULL,
                               BOX_TYPE = NULL
                           WHERE PK_NO IN (SELECT inv_pk_no FROM temp2_inv_pk_no);

                    DELETE FROM SC_BOX_INV_STOCK
                    WHERE F_INV_STOCK_NO IN (SELECT inv_pk_no FROM temp2_inv_pk_no) ;


                    -- DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;

                   END IF;

        DROP TEMPORARY TABLE IF EXISTS temp2_inv_pk_no;
        ELSE
           SET OUT_STATUS = 'box-not-found';

        END IF;

INSERT INTO S VALUES(CONCAT('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK_ITEM_ADD_MER` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK_ITEM_ADD_MER` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK_ITEM_ADD_MER`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, IN_WIDTH Integer, IN_LENGTH Integer, IN_HEIGHT Integer, IN_WEIGHT Float, MERCHANT_ID Integer, OUT OUT_STATUS VarChar(500))
    NO SQL
Block1: BEGIN


/*CALL PROC_SC_BOX_INV_STOCK_ITEM_ADD(20100251,'101103111102~1~9|',1,3,'~','|',1,0,@OUT_STATUS);*/

DECLARE int_HAS_cur_PROC_SC_BOX_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE xLIMIT INT;
    DECLARE sPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE xCUSTOMER_PREFFERED_SHIPPING_METHOD VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE var_inv_stored_pk VARCHAR(20000) DEFAULT 0;
    DECLARE int_row_count INT;
    DECLARE int_row_count_cursor2 INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_box_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE user_name VARCHAR(200);
    DECLARE int_count_updated_row INT DEFAULT 0;
    DECLARE i,j INT;
    DECLARE check_shipment_type VARCHAR(45);
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_PART INT DEFAULT 1;
    DECLARE inverted_shipment_type VARCHAR(45);
    DECLARE variant_name VARCHAR(500);
    DECLARE is_ship_method_conflict INT DEFAULT 0;
    DECLARE conflict_qty INT DEFAULT 0;
    DECLARE variant_name_with_qty VARCHAR(500);

    DECLARE cur_PROC_SC_BOX_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM MER_INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
            AND SKUID=var_arrary_param1
            AND FINAL_PREFFERED_SHIPPING_METHOD = check_shipment_type
            LIMIT var_arrary_param3;


        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0;

            DELETE FROM S;

INSERT INTO S VALUES('Start Procedre');

            SELECT SUBSTRING(IN_BOX_LABEL, 1, 1) INTO check_shipment_type;

            INSERT INTO S VALUES(CONCAT('SC BOX label ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(CONCAT('First_Box ' , check_shipment_type));

            IF check_shipment_type = '3' THEN
               SET check_shipment_type = 'AIR';
            ELSE
               SET check_shipment_type = 'SEA';
            END IF;

            SELECT PK_NO, COUNT(BOX_NO) INTO int_box_pk, int_is_duplicate_box FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;

            -- SELECT CONCAT(first_name, ' ', last_name) AS user_name_concate INTO user_name FROM admin_users WHERE auth_id = USER_ID;
DELETE FROM S;
INSERT INTO S VALUES(CONCAT('SC BOX Pk ' , int_box_pk));
INSERT INTO S VALUES(CONCAT('Duplicate Box Flag ', int_is_duplicate_box));
INSERT INTO S VALUES(CONCAT('Shipment Type ' , check_shipment_type));

        IF int_is_duplicate_box != 0 THEN

        CREATE TEMPORARY TABLE temp2_inv_pk_no
               ( inv_pk_no INT );

        UPDATE SC_BOX SET WIDTH_CM = IN_WIDTH, LENGTH_CM = IN_LENGTH, HEIGHT_CM = IN_HEIGHT, WEIGHT_KG = IN_WEIGHT WHERE BOX_NO = IN_BOX_LABEL;
            -- SELECT F_INV_WAREHOUSE_NO INTO from_warehouse_no FROM SS_INV_USER_MAP WHERE F_USER_NO = USER_ID;
            INSERT INTO S VALUES(CONCAT('IN_BOX_LABEL ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(CONCAT('USER_ID ' , USER_ID));
            -- INSERT INTO S VALUES(concat('user_name ' , user_name));
            -- INSERT INTO S VALUES(concat('INV house ' , from_warehouse_no));
            -- INSERT INTO SC_BOX (BOX_NO,F_BOX_USER_NO,USER_NAME,BOX_STATUS,F_INV_WAREHOUSE_NO) VALUES(IN_BOX_LABEL,USER_ID,user_name,10,from_warehouse_no);
            -- SELECT LAST_INSERT_ID() INTO int_box_pk;

INSERT INTO S VALUES(CONCAT('Inserted SC Box Pk ', int_box_pk));
INSERT INTO S VALUES (CONCAT('Parameter Array ',IN_INV_BOXING_ARRAY));

            SET i=1;


            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO S VALUES(CONCAT('loop i val ', i));

                SELECT SUBSTRING_INDEX(IN_INV_BOXING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

INSERT INTO S VALUES (CONCAT('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;



                SELECT SUBSTRING_INDEX(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param1)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param1) );


                SELECT SUBSTRING_INDEX(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param2)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param2) );


                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_BOXING_ARRAY = SUBSTRING(IN_INV_BOXING_ARRAY , LENGTH(var_arrary_row)+2 , LENGTH(IN_INV_BOXING_ARRAY) - LENGTH(var_arrary_row) );




INSERT INTO S VALUES (CONCAT('Param 1   ', var_arrary_param1));
INSERT INTO S VALUES (CONCAT('Param 2   ', var_arrary_param2));
INSERT INTO S VALUES (CONCAT('Param 3   ', var_arrary_param3));


                SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 1;
                SET int_count_updated_row = 0;
                INSERT INTO S VALUES (CONCAT('Updated Row Count ', int_count_updated_row));
                OPEN cur_PROC_SC_BOX_INV_STOCK;
                SELECT FOUND_ROWS() INTO int_row_count ;

                INSERT INTO S VALUES (CONCAT('Found row before Loop ', int_row_count));

                    IF int_row_count != 0 && int_row_count <= var_arrary_param3 THEN

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;


                    INSERT INTO S VALUES (CONCAT('ALL SUCCESS VAL ', ALL_SUCCESS));
                       /* SET j=0;


INSERT INTO S VALUES(concat('init j val ', j));*/

                    get_PROC_SC_BOX_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SC_BOX_INV_STOCK INTO xPK_NO;

INSERT INTO S VALUES(CONCAT('Loop Control var ', int_HAS_cur_PROC_SC_BOX_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_BOX_INV_STOCK;
                        END IF;


INSERT INTO S VALUES(CONCAT('INV Stock PK_NO ', xPK_NO) );

                         UPDATE MER_INV_STOCK
                            SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                            WHERE PK_NO =  xPK_NO;
                        INSERT INTO MER_SC_BOX_INV_STOCK(F_BOX_NO, F_INV_STOCK_NO,F_MERCHANT_NO) VALUES (int_box_pk,xPK_NO,MERCHANT_ID);
                        /*  SET j = j + 1;*/
                        SET int_count_updated_row = int_count_updated_row + 1;
                        INSERT INTO temp2_inv_pk_no(inv_pk_no) VALUES (xPK_NO);
                        /*if var_inv_stored_pk = 0 THEN
                            SET var_inv_stored_pk = xPK_NO;
                        ELSE
                            SET var_inv_stored_pk = CONCAT(var_inv_stored_pk,',',xPK_NO);
                        END IF;
                        */
                    INSERT INTO S VALUES(CONCAT('var_inv_stored_pk ', var_inv_stored_pk) );

                    END LOOP get_PROC_SC_BOX_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_BOX_INV_STOCK;
                INSERT INTO S VALUES(CONCAT('Updated Rows ', int_count_updated_row) );
                INSERT INTO S VALUES(CONCAT('var_arrary_param3 ', var_arrary_param3) );
                SET xLIMIT = var_arrary_param3 - int_count_updated_row;
                INSERT INTO S VALUES(CONCAT('LIMIT VALUE ', xLIMIT) );

                IF int_count_updated_row < var_arrary_param3 THEN

                /*-------------------------BLOCK 2 BEGINS ------------------------------*/
                Block2: BEGIN
                    DECLARE int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_SC_BOXING_LIST_INV_STOCK
                    CURSOR FOR
                    SELECT
                        PK_NO,CUSTOMER_PREFFERED_SHIPPING_METHOD
                        FROM MER_INV_STOCK
                        WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
                        AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
                        AND SKUID=var_arrary_param1;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0;

                OPEN cur_PROC_SC_BOXING_LIST_INV_STOCK;
                    SELECT FOUND_ROWS() INTO int_row_count_cursor2 ;
                    INSERT INTO S VALUES (CONCAT('Found row2 before Loop ', int_row_count_cursor2));

                    IF int_row_count_cursor2 != 0 THEN
                       IF int_count_updated_row = 0 THEN
                          SET ALL_SUCCESS = ALL_SUCCESS + 1;
                       END IF;

                        INSERT INTO S VALUES(CONCAT('ALL_SUCCESS LINE 223 ', ALL_SUCCESS) );
                        get_PROC_SC_BOX_INV_STOCK_TOP:LOOP

                            FETCH NEXT FROM cur_PROC_SC_BOXING_LIST_INV_STOCK  INTO xPK_NO,xCUSTOMER_PREFFERED_SHIPPING_METHOD;

                            INSERT INTO S VALUES(CONCAT('Loop Control var ', int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK));
                            INSERT INTO S VALUES(CONCAT('Cus Preferred ', xCUSTOMER_PREFFERED_SHIPPING_METHOD));

                                        IF int_count_updated_row = var_arrary_param3 OR int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0 THEN

                                                LEAVE get_PROC_SC_BOX_INV_STOCK_TOP;
                                        END IF;

                            INSERT INTO S VALUES(CONCAT('INV Stock TOP PK_NO ', xPK_NO) );

                            IF xCUSTOMER_PREFFERED_SHIPPING_METHOD IS NULL OR xCUSTOMER_PREFFERED_SHIPPING_METHOD = check_shipment_type THEN

                                UPDATE MER_INV_STOCK
                                    SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                                    WHERE PK_NO =  xPK_NO;
                                INSERT INTO MER_SC_BOX_INV_STOCK(F_BOX_NO,F_INV_STOCK_NO,F_MERCHANT_NO) VALUES (int_box_pk,xPK_NO,MERCHANT_ID);
                                /*  SET j = j + 1;*/
                                SET int_count_updated_row = int_count_updated_row + 1;
                                INSERT INTO temp2_inv_pk_no(inv_pk_no) VALUES (xPK_NO);
                                /*if var_inv_stored_pk = 0 THEN
                                    SET var_inv_stored_pk = xPK_NO;
                                ELSE
                                    SET var_inv_stored_pk = CONCAT(var_inv_stored_pk,',',xPK_NO);
                                END IF;
                                */
                                INSERT INTO S VALUES(CONCAT('var_inv_stored_pk ', var_inv_stored_pk) );

                                INSERT INTO S VALUES(CONCAT('Updated Rows ', int_count_updated_row) );

                ELSEIF xCUSTOMER_PREFFERED_SHIPPING_METHOD <> check_shipment_type THEN
                                   IF check_shipment_type = 'SEA' THEN
                                      SET inverted_shipment_type = 'AIR';
                                   ELSE
                                      SET inverted_shipment_type = 'SEA';
                                   END IF;
                                   SELECT PRD_VARINAT_NAME INTO variant_name FROM MER_INV_STOCK WHERE PK_NO = xPK_NO;
                                   SET is_ship_method_conflict = 1;
                                   SET conflict_qty = int_row_count_cursor2;
                                   INSERT INTO S VALUES(CONCAT('variant Name ', variant_name) );
                                   INSERT INTO S VALUES(CONCAT('is_ship_method_conflict ', is_ship_method_conflict) );
                                   INSERT INTO S VALUES(CONCAT('conflict_qty ', conflict_qty) );
                            END IF;


                        END LOOP get_PROC_SC_BOX_INV_STOCK_TOP;
                    END IF;

                CLOSE cur_PROC_SC_BOXING_LIST_INV_STOCK;

                END Block2;
                /*-------------------------BLOCK 2 ENDS ------------------------------*/

                   IF int_count_updated_row != var_arrary_param3 THEN

                     SET ALL_SUCCESS_PART = 0;
                   END IF;

                END IF;

                SET i = i + 1;

            END WHILE;

                  /* IF ALL_SUCCESS_PART = 0 THEN
                    SET OUT_STATUS = 'failed-partial';

                  ELSE */
                  INSERT INTO S VALUES(CONCAT('ALL_SUCCESS_PART ', ALL_SUCCESS_PART) );
                  INSERT INTO S VALUES(CONCAT('ALL_SUCCESS ', ALL_SUCCESS) );
                  INSERT INTO S VALUES(CONCAT('IN_ROW_COUNT ', IN_ROW_COUNT) );
                  IF ALL_SUCCESS = IN_ROW_COUNT AND ALL_SUCCESS_PART = 1 THEN
                     SET OUT_STATUS = 'success';

          ELSEIF is_ship_method_conflict = 1 THEN
                     SET variant_name = CONCAT('Method Conflict for ',variant_name);
                     SET variant_name_with_qty = CONCAT(' => QTY ',conflict_qty);
                     SET OUT_STATUS = CONCAT(variant_name,variant_name_with_qty);
                     INSERT INTO S VALUES(CONCAT('OUT STATUS ', OUT_STATUS));
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                    UPDATE MER_INV_STOCK
                           SET F_BOX_NO = NULL,
                               PRODUCT_STATUS = NULL,
                               BOX_BARCODE = NULL,
                               BOX_TYPE = NULL
                           WHERE PK_NO IN (SELECT inv_pk_no FROM temp2_inv_pk_no);

                    DELETE FROM MER_SC_BOX_INV_STOCK
                    WHERE F_INV_STOCK_NO IN (SELECT inv_pk_no FROM temp2_inv_pk_no);

                  ELSE
                    SET OUT_STATUS = 'failed';
                    INSERT INTO S VALUES(CONCAT('var_inv_stored_pk ', var_inv_stored_pk) );
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                    UPDATE MER_INV_STOCK
                           SET F_BOX_NO = NULL,
                               PRODUCT_STATUS = NULL,
                               BOX_BARCODE = NULL,
                               BOX_TYPE = NULL
                           WHERE PK_NO IN (SELECT inv_pk_no FROM temp2_inv_pk_no);

                    DELETE FROM MER_SC_BOX_INV_STOCK
                    WHERE F_INV_STOCK_NO IN (SELECT inv_pk_no FROM temp2_inv_pk_no) ;


                    -- DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;

                   END IF;

        DROP TEMPORARY TABLE IF EXISTS temp2_inv_pk_no;
        ELSE
           SET OUT_STATUS = 'box-not-found';

        END IF;

INSERT INTO S VALUES(CONCAT('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK_ITEM_REMOVE` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK_ITEM_REMOVE` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK_ITEM_REMOVE`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, IN_WIDTH Integer, IN_LENGTH Integer, IN_HEIGHT Integer, IN_WEIGHT Float, OUT OUT_STATUS VarChar(20))
    NO SQL
Block1: BEGIN


/*CALL PROC_SC_BOX_INV_STOCK_ITEM_ADD(20100251,'101103111102~1~9|',1,3,'~','|',1,0,@OUT_STATUS);*/

    DECLARE int_HAS_cur_PROC_SC_BOX_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 INT DEFAULT 0;
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE var_inv_stored_pk VARCHAR(20000) DEFAULT 0;
    DECLARE int_row_count INT;
    DECLARE int_box_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE int_count_updated_row INT DEFAULT 0;
    DECLARE i,j INT;
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_PART INT DEFAULT 1;

    DECLARE cur_PROC_SC_BOX_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND SKUID=var_arrary_param1
            AND F_BOX_NO=int_box_pk
            ORDER BY F_ORDER_NO ASC LIMIT var_arrary_param3;

        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0;

DELETE FROM S;
INSERT INTO S VALUES('Start Procedre Item Remove');
            SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;

            INSERT INTO S VALUES(concat('IN_BOX_LABEL ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('int_box_pk ' , int_box_pk));

insert into S values (concat('Parameter Array ',IN_INV_BOXING_ARRAY));

            IF int_box_pk IS NOT NULL OR int_box_pk > 0 THEN

               create temporary table temp_inv_pk_no
               ( inv_pk_no int );

            UPDATE SC_BOX SET WIDTH_CM = IN_WIDTH, LENGTH_CM = IN_LENGTH, HEIGHT_CM = IN_HEIGHT, WEIGHT_KG = IN_WEIGHT WHERE BOX_NO = IN_BOX_LABEL;

            SET i=1;

            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO S VALUES(concat('loop i val ', i));

                SELECT substring_index(IN_INV_BOXING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

insert into S values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;

                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );

                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) );

                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_BOXING_ARRAY = substring(IN_INV_BOXING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_BOXING_ARRAY) - length(var_arrary_row) );

insert into S values (concat('Param 1   ', var_arrary_param1));
insert into S values (concat('Param 2   ', var_arrary_param2));
insert into S values (concat('Param 3   ', var_arrary_param3));

                SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 1;
                SET int_count_updated_row = 0;
                insert into S values (concat('Updated Row Count ', int_count_updated_row));
                OPEN cur_PROC_SC_BOX_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into S values (concat('Found row before Loop ', int_row_count));

                    IF int_row_count != 0 && int_row_count = var_arrary_param3 THEN

                        SET ALL_SUCCESS = ALL_SUCCESS + 1;

                        insert into S values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));

                    get_PROC_SC_BOX_INV_STOCK: LOOP
                        FETCH NEXT FROM  cur_PROC_SC_BOX_INV_STOCK INTO xPK_NO;

INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOX_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_BOX_INV_STOCK;
                        END IF;


INSERT INTO S VALUES(concat('INV Stock PK_NO ', xPK_NO) );

                        SET int_count_updated_row = int_count_updated_row + 1;

                        insert into temp_inv_pk_no(inv_pk_no) values (xPK_NO);
                        /*if var_inv_stored_pk = 0 THEN
                            SET var_inv_stored_pk = xPK_NO;
                        ELSE
                            SET var_inv_stored_pk = CONCAT(var_inv_stored_pk,',',xPK_NO);
                        END IF;
                        */
                    INSERT INTO S VALUES(concat('var_inv_stored_pk ', var_inv_stored_pk) );

                    END LOOP get_PROC_SC_BOX_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_BOX_INV_STOCK;
                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );
                INSERT INTO S VALUES(concat('var_arrary_param3 ', var_arrary_param3) );

                    IF int_count_updated_row != var_arrary_param3 THEN
                        SET ALL_SUCCESS_PART = 0;
                    END IF;

                set i = i + 1;

            END WHILE;

                  /* IF ALL_SUCCESS_PART = 0 THEN
                    SET OUT_STATUS = 'failed-partial';
                  ELSE */
                  INSERT INTO S VALUES(concat('ALL_SUCCESS_PART ', ALL_SUCCESS_PART) );
                  INSERT INTO S VALUES(concat('ALL_SUCCESS ', ALL_SUCCESS) );
                  INSERT INTO S VALUES(concat('IN_ROW_COUNT ', IN_ROW_COUNT) );
                  INSERT INTO S VALUES(concat('var_inv_stored_pk ', var_inv_stored_pk) );
                  IF ALL_SUCCESS = IN_ROW_COUNT AND ALL_SUCCESS_PART = 1 THEN
                        SET OUT_STATUS = 'success';
                        UPDATE INV_STOCK
                            SET F_BOX_NO = NULL,
                                PRODUCT_STATUS = NULL,
                                BOX_BARCODE = NULL,
                                BOX_TYPE = NULL
                            WHERE PK_NO IN (select inv_pk_no from temp_inv_pk_no);

                        DELETE FROM SC_BOX_INV_STOCK
                        WHERE F_INV_STOCK_NO IN (select inv_pk_no from temp_inv_pk_no);

                  drop temporary table if exists temp_inv_pk_no;

                  ELSE
                    SET OUT_STATUS = 'failed';

                   END IF;


        ELSE
           SET OUT_STATUS = 'box-not-found';

        END IF;

INSERT INTO S VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK_ITEM_REMOVE_MER` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK_ITEM_REMOVE_MER` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK_ITEM_REMOVE_MER`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, IN_WIDTH Integer, IN_LENGTH Integer, IN_HEIGHT Integer, IN_WEIGHT Float, MERCHANT_ID Integer, OUT OUT_STATUS VarChar(20))
    NO SQL
Block1: BEGIN


/*CALL PROC_SC_BOX_INV_STOCK_ITEM_ADD(20100251,'101103111102~1~9|',1,3,'~','|',1,0,@OUT_STATUS);*/

    DECLARE int_HAS_cur_PROC_SC_BOX_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 INT DEFAULT 0;
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE var_inv_stored_pk VARCHAR(20000) DEFAULT 0;
    DECLARE int_row_count INT;
    DECLARE int_box_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE int_count_updated_row INT DEFAULT 0;
    DECLARE i,j INT;
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_PART INT DEFAULT 1;

    DECLARE cur_PROC_SC_BOX_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM MER_INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND SKUID=var_arrary_param1
            AND F_BOX_NO=int_box_pk
            LIMIT var_arrary_param3;

        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0;

DELETE FROM S;
INSERT INTO S VALUES('Start Procedre Item Remove');
            SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;

            INSERT INTO S VALUES(concat('IN_BOX_LABEL ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('int_box_pk ' , int_box_pk));

insert into S values (concat('Parameter Array ',IN_INV_BOXING_ARRAY));

            IF int_box_pk IS NOT NULL OR int_box_pk > 0 THEN

               create temporary table temp_inv_pk_no
               ( inv_pk_no int );

            UPDATE SC_BOX SET WIDTH_CM = IN_WIDTH, LENGTH_CM = IN_LENGTH, HEIGHT_CM = IN_HEIGHT, WEIGHT_KG = IN_WEIGHT WHERE BOX_NO = IN_BOX_LABEL;

            SET i=1;

            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO S VALUES(concat('loop i val ', i));

                SELECT substring_index(IN_INV_BOXING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

insert into S values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;

                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );

                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) );

                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_BOXING_ARRAY = substring(IN_INV_BOXING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_BOXING_ARRAY) - length(var_arrary_row) );

insert into S values (concat('Param 1   ', var_arrary_param1));
insert into S values (concat('Param 2   ', var_arrary_param2));
insert into S values (concat('Param 3   ', var_arrary_param3));

                SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 1;
                SET int_count_updated_row = 0;
                insert into S values (concat('Updated Row Count ', int_count_updated_row));
                OPEN cur_PROC_SC_BOX_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into S values (concat('Found row before Loop ', int_row_count));

                    IF int_row_count != 0 && int_row_count = var_arrary_param3 THEN

                        SET ALL_SUCCESS = ALL_SUCCESS + 1;

                        insert into S values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));

                    get_PROC_SC_BOX_INV_STOCK: LOOP
                        FETCH NEXT FROM  cur_PROC_SC_BOX_INV_STOCK INTO xPK_NO;

INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOX_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_BOX_INV_STOCK;
                        END IF;


INSERT INTO S VALUES(concat('INV Stock PK_NO ', xPK_NO) );

                        SET int_count_updated_row = int_count_updated_row + 1;

                        insert into temp_inv_pk_no(inv_pk_no) values (xPK_NO);
                        /*if var_inv_stored_pk = 0 THEN
                            SET var_inv_stored_pk = xPK_NO;
                        ELSE
                            SET var_inv_stored_pk = CONCAT(var_inv_stored_pk,',',xPK_NO);
                        END IF;
                        */
                    INSERT INTO S VALUES(concat('var_inv_stored_pk ', var_inv_stored_pk) );

                    END LOOP get_PROC_SC_BOX_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_BOX_INV_STOCK;
                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );
                INSERT INTO S VALUES(concat('var_arrary_param3 ', var_arrary_param3) );

                    IF int_count_updated_row != var_arrary_param3 THEN
                        SET ALL_SUCCESS_PART = 0;
                    END IF;

                set i = i + 1;

            END WHILE;

                  /* IF ALL_SUCCESS_PART = 0 THEN
                    SET OUT_STATUS = 'failed-partial';
                  ELSE */
                  INSERT INTO S VALUES(concat('ALL_SUCCESS_PART ', ALL_SUCCESS_PART) );
                  INSERT INTO S VALUES(concat('ALL_SUCCESS ', ALL_SUCCESS) );
                  INSERT INTO S VALUES(concat('IN_ROW_COUNT ', IN_ROW_COUNT) );
                  INSERT INTO S VALUES(concat('var_inv_stored_pk ', var_inv_stored_pk) );
                  IF ALL_SUCCESS = IN_ROW_COUNT AND ALL_SUCCESS_PART = 1 THEN
                        SET OUT_STATUS = 'success';
                        UPDATE MER_INV_STOCK
                            SET F_BOX_NO = NULL,
                                PRODUCT_STATUS = NULL,
                                BOX_BARCODE = NULL,
                                BOX_TYPE = NULL
                            WHERE PK_NO IN (select inv_pk_no from temp_inv_pk_no);

                        DELETE FROM MER_SC_BOX_INV_STOCK
                        WHERE F_INV_STOCK_NO IN (select inv_pk_no from temp_inv_pk_no);

                  drop temporary table if exists temp_inv_pk_no;

                  ELSE
                    SET OUT_STATUS = 'failed';

                   END IF;


        ELSE
           SET OUT_STATUS = 'box-not-found';

        END IF;

INSERT INTO S VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK_MER` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK_MER` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK_MER`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, IN_WIDTH Integer, IN_LENGTH Integer, IN_HEIGHT Integer, IN_WEIGHT Float, MERCHANT_ID Integer, OUT OUT_STATUS VarChar(500))
    NO SQL
Block1: BEGIN


/*CALL PROC_SC_BOX_INV_STOCK_MER(20100251,'101103111102~1~9|',1,3,'~','|',1,0,width,length,height,weight,@OUT_STATUS);*/

DECLARE int_HAS_cur_PROC_SC_BOX_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE xLIMIT INT;
    DECLARE sPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE xCUSTOMER_PREFFERED_SHIPPING_METHOD VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE int_row_count INT;
    DECLARE int_row_count_cursor2 INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_box_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE user_name VARCHAR(200);
    DECLARE int_count_updated_row INT DEFAULT 0;
    DECLARE i,j INT;
    DECLARE check_shipment_type VARCHAR(45);
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_PART INT DEFAULT 1;
    DECLARE inverted_shipment_type VARCHAR(45);
    DECLARE variant_name VARCHAR(500);
    DECLARE is_ship_method_conflict INT DEFAULT 0;
    DECLARE conflict_qty INT DEFAULT 0;
    DECLARE variant_name_with_qty VARCHAR(500);

    DECLARE cur_PROC_SC_BOX_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM MER_INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
            AND SKUID=var_arrary_param1
            AND FINAL_PREFFERED_SHIPPING_METHOD = check_shipment_type
            LIMIT var_arrary_param3;


        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0;

            DELETE FROM S;

INSERT INTO S VALUES('Start Procedre');

            SELECT SUBSTRING(IN_BOX_LABEL, 1, 1) INTO check_shipment_type;

            INSERT INTO S VALUES(concat('SC BOX label ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('First_Box ' , check_shipment_type));

            IF check_shipment_type = '3' THEN
               SET check_shipment_type = 'AIR';
            ELSE
               SET check_shipment_type = 'SEA';
            END IF;


            SELECT PK_NO, COUNT(BOX_NO) INTO int_box_pk, int_is_duplicate_box FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;


            SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS user_name_concate INTO user_name FROM SA_USER WHERE PK_NO = USER_ID;
INSERT INTO S VALUES(concat('SC BOX Pk ' , int_box_pk));
INSERT INTO S VALUES(concat('Duplicate Box Flag ', int_is_duplicate_box));
INSERT INTO S VALUES(concat('Shipment Type ' , check_shipment_type));

        IF int_is_duplicate_box = 0 THEN

            SELECT F_INV_WAREHOUSE_NO INTO from_warehouse_no FROM SS_INV_USER_MAP WHERE F_USER_NO = USER_ID;
            INSERT INTO S VALUES(concat('IN_BOX_LABEL ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('USER_ID ' , USER_ID));
            INSERT INTO S VALUES(concat('user_name ' , user_name));
            INSERT INTO S VALUES(concat('INV house ' , from_warehouse_no));
            INSERT INTO SC_BOX (BOX_NO
                               ,F_BOX_USER_NO
                               ,USER_NAME
                               ,BOX_STATUS
                               ,F_INV_WAREHOUSE_NO
                               ,WIDTH_CM
                               ,LENGTH_CM
                               ,HEIGHT_CM
                               ,WEIGHT_KG
                               ,F_MERCHANT_NO
                               ) VALUES(
                               IN_BOX_LABEL
                               ,USER_ID
                               ,user_name
                               ,10
                               ,from_warehouse_no
                               ,IN_WIDTH
                               ,IN_LENGTH
                               ,IN_HEIGHT
                               ,IN_WEIGHT
                               ,MERCHANT_ID);
            SELECT LAST_INSERT_ID() INTO int_box_pk;

INSERT INTO S VALUES(concat('Inserted SC Box Pk ', int_box_pk));
insert into S values (concat('Parameter Array ',IN_INV_BOXING_ARRAY));

            SET i=1;


            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO S VALUES(concat('loop i val ', i));

                SELECT substring_index(IN_INV_BOXING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

insert into S values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;



                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );


                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) );


                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_BOXING_ARRAY = substring(IN_INV_BOXING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_BOXING_ARRAY) - length(var_arrary_row) );




insert into S values (concat('Param 1   ', var_arrary_param1));
insert into S values (concat('Param 2   ', var_arrary_param2));
insert into S values (concat('Param 3   ', var_arrary_param3));


                SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 1;
                SET int_count_updated_row = 0;
                insert into S values (concat('Updated Row Count ', int_count_updated_row));
                OPEN cur_PROC_SC_BOX_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into S values (concat('Found row before Loop ', int_row_count));

                    IF int_row_count != 0 && int_row_count <= var_arrary_param3 THEN

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;


                    insert into S values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));
                       /* SET j=0;


INSERT INTO S VALUES(concat('init j val ', j));*/

                    get_PROC_SC_BOX_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SC_BOX_INV_STOCK INTO xPK_NO;

INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOX_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_BOX_INV_STOCK;
                        END IF;


INSERT INTO S VALUES(concat('INV Stock PK_NO ', xPK_NO) );

                         UPDATE MER_INV_STOCK
                            SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                            WHERE PK_NO =  xPK_NO;
                        INSERT INTO MER_SC_BOX_INV_STOCK(F_BOX_NO, F_INV_STOCK_NO, F_MERCHANT_NO) VALUES ( int_box_pk, xPK_NO,MERCHANT_ID );
                          /*  SET j = j + 1;*/
                          SET int_count_updated_row = int_count_updated_row + 1;


                    END LOOP get_PROC_SC_BOX_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_BOX_INV_STOCK;
                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );
                INSERT INTO S VALUES(concat('var_arrary_param3 ', var_arrary_param3) );
                SET xLIMIT = var_arrary_param3 - int_count_updated_row;
                INSERT INTO S VALUES(concat('LIMIT VALUE ', xLIMIT) );

                IF int_count_updated_row < var_arrary_param3 THEN

                /*-------------------------BLOCK 2 BEGINS ------------------------------*/
                Block2: BEGIN
                    DECLARE int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_SC_BOXING_LIST_INV_STOCK
                    CURSOR FOR
                    SELECT
                        PK_NO,CUSTOMER_PREFFERED_SHIPPING_METHOD
                        FROM MER_INV_STOCK
                        WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
                        AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
                        AND SKUID=var_arrary_param1;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0;

                OPEN cur_PROC_SC_BOXING_LIST_INV_STOCK;
                    SELECT FOUND_ROWS() into int_row_count_cursor2 ;
                    insert into S values (concat('Found row2 before Loop ', int_row_count_cursor2));

                    IF int_row_count_cursor2 != 0 THEN
                       IF int_count_updated_row = 0 THEN
                          SET ALL_SUCCESS = ALL_SUCCESS + 1;
                       END IF;

                        INSERT INTO S VALUES(concat('ALL_SUCCESS LINE 213 ', ALL_SUCCESS) );
                        get_PROC_SC_BOX_INV_STOCK_TOP:LOOP

                            FETCH NEXT FROM cur_PROC_SC_BOXING_LIST_INV_STOCK  INTO xPK_NO,xCUSTOMER_PREFFERED_SHIPPING_METHOD;

                            INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK));
                            INSERT INTO S VALUES(concat('Cus Preferred ', xCUSTOMER_PREFFERED_SHIPPING_METHOD));

                                        IF int_count_updated_row = var_arrary_param3 OR int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0 THEN

                                                LEAVE get_PROC_SC_BOX_INV_STOCK_TOP;
                                        END IF;

                            INSERT INTO S VALUES(concat('INV Stock TOP PK_NO ', xPK_NO) );

                            IF xCUSTOMER_PREFFERED_SHIPPING_METHOD IS NULL OR xCUSTOMER_PREFFERED_SHIPPING_METHOD = check_shipment_type THEN

                                UPDATE MER_INV_STOCK
                                    SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                                    WHERE PK_NO =  xPK_NO;
                                INSERT INTO MER_SC_BOX_INV_STOCK(F_BOX_NO, F_INV_STOCK_NO,F_MERCHANT_NO) VALUES (int_box_pk,xPK_NO,MERCHANT_ID);
                                /*  SET j = j + 1;*/
                                SET int_count_updated_row = int_count_updated_row + 1;

                                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );

                            ELSEIF xCUSTOMER_PREFFERED_SHIPPING_METHOD <> check_shipment_type THEN
                                   IF check_shipment_type = 'SEA' THEN
                                      SET inverted_shipment_type = 'AIR';
                                   ELSE
                                      SET inverted_shipment_type = 'SEA';
                                   END IF;
                                   SELECT PRD_VARINAT_NAME INTO variant_name FROM MER_INV_STOCK WHERE PK_NO = xPK_NO;
                                   SET is_ship_method_conflict = 1;
                                   SET conflict_qty = int_row_count_cursor2;
                                   INSERT INTO S VALUES(CONCAT('variant Name ', variant_name) );
                                   INSERT INTO S VALUES(CONCAT('is_ship_method_conflict ', is_ship_method_conflict) );
                                   INSERT INTO S VALUES(CONCAT('conflict_qty ', conflict_qty) );

                            END IF;


                        END LOOP get_PROC_SC_BOX_INV_STOCK_TOP;
                    END IF;

                CLOSE cur_PROC_SC_BOXING_LIST_INV_STOCK;

                END Block2;
                /*-------------------------BLOCK 2 ENDS ------------------------------*/


                   IF int_count_updated_row != var_arrary_param3 THEN
                     /*UPDATE MER_INV_STOCK
                         SET PRODUCT_STATUS = NULL,
                             BOX_BARCODE = NULL,
                             BOX_TYPE = NULL,
                             F_BOX_NO = NULL
                         WHERE SKUID=var_arrary_param1
                         AND F_BOX_NO =  int_box_pk;*/

                     SET ALL_SUCCESS_PART = 0;
                   END IF;

                END IF;

                set i = i + 1;

            END WHILE;

                  /* IF ALL_SUCCESS_PART = 0 THEN
                    SET OUT_STATUS = 'failed-partial';

                  ELSE */
                  INSERT INTO S VALUES(concat('ALL_SUCCESS_PART ', ALL_SUCCESS_PART) );
                  INSERT INTO S VALUES(concat('ALL_SUCCESS ', ALL_SUCCESS) );
                  INSERT INTO S VALUES(concat('IN_ROW_COUNT ', IN_ROW_COUNT) );
                  IF ALL_SUCCESS = IN_ROW_COUNT AND ALL_SUCCESS_PART = 1 THEN
                     SET OUT_STATUS = 'success';

                  ELSEIF is_ship_method_conflict = 1 THEN
                     SET variant_name = CONCAT('Method Conflict for ',variant_name);
                     SET variant_name_with_qty = CONCAT(' => QTY ',conflict_qty);
                     SET OUT_STATUS = CONCAT(variant_name,variant_name_with_qty);
                     INSERT INTO S VALUES(CONCAT('OUT STATUS ', OUT_STATUS));
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                        IF int_box_pk IS NOT NULL THEN

                            UPDATE MER_INV_STOCK
                                SET F_BOX_NO = NULL,
                                    PRODUCT_STATUS = NULL,
                                    BOX_BARCODE = NULL,
                                    BOX_TYPE = NULL
                                WHERE F_BOX_NO = int_box_pk;

                            DELETE FROM MER_SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk;
                            DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;
                        END IF;

                  ELSE
                    SET OUT_STATUS = 'failed';
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                        IF int_box_pk IS NOT NULL THEN

                            UPDATE MER_INV_STOCK
                                SET F_BOX_NO = NULL,
                                    PRODUCT_STATUS = NULL,
                                    BOX_BARCODE = NULL,
                                    BOX_TYPE = NULL
                                WHERE F_BOX_NO = int_box_pk;

                            DELETE FROM MER_SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk ;

                            DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;
                        END IF;

                   END IF;


        ELSE
           SET OUT_STATUS = 'duplicate-box';

        END IF;

INSERT INTO S VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_PACKAGING_LIST_INV_STOCK` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_PACKAGING_LIST_INV_STOCK` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_PACKAGING_LIST_INV_STOCK`(SHIPMENT_NO Integer, IS_UPDATE Integer, OUT OUT_STATUS VarChar(20))
    NO SQL
Block1: BEGIN

    DECLARE int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK INT DEFAULT 1;
    DECLARE int_is_duplicate_shipment INT DEFAULT 1;
    DECLARE package_pk_no INT;
    DECLARE box_serial_no INT;
    DECLARE box_no INT;
    DECLARE shipment_name INT;
    DECLARE int_row_count INT;
    DECLARE int_box_row_count INT;
    DECLARE int_row_count_cursor2 INT;
    DECLARE int_row_count_cursor3 INT;
    DECLARE int_width INT;
    DECLARE int_length INT;
    DECLARE int_height INT;
    DECLARE int_weight FLOAT;
    DECLARE int_product_count INT;
    DECLARE int_count_price FLOAT;
    DECLARE variant_no INT;
    DECLARE invoice_no VarChar(255);
    DECLARE invoice_pk_no VarChar(255) DEFAULT '0';
    DECLARE int_product_count_invoice INT;
    DECLARE int_prc_no INT;
    DECLARE vendor_name VarChar(255);
    DECLARE invoice_date VarChar(255);
    DECLARE var_hs_code VarChar(255);
    DECLARE var_ig_code VarChar(255);
    DECLARE sku_id INT;
    DECLARE sub_cat_name VarChar(255);
    DECLARE var_invoice_name VarChar(255);
    DECLARE unit_price FLOAT;
    DECLARE var_invoice_details VarChar(4000) DEFAULT '0';
    DECLARE var_invoice_details_part VarChar(4000);
    DECLARE OUT_STATUS_2 VarChar(20);
    DECLARE OUT_STATUS_3 VarChar(20);
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_2 INT DEFAULT 0;
    DECLARE ALL_SUCCESS_3 INT DEFAULT 0;

    DECLARE cur_PROC_SC_PACKAGING_LIST_INV_STOCK
        CURSOR FOR
        SELECT
            BOX_SERIAL,F_BOX_NO
            FROM SC_SHIPMENT_BOX
            WHERE F_SHIPMENT_NO=SHIPMENT_NO;


        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK = 0;

            /*DELETING EXISTING VALUE*/

            IF IS_UPDATE = 1 THEN
              SELECT PK_NO INTO package_pk_no FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO LIMIT 1;
              SELECT FOUND_ROWS() into int_row_count ;
              INSERT INTO R VALUES(int_row_count);
              IF int_row_count > 0 THEN
                DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO ;
              END IF;

              SELECT PK_NO INTO package_pk_no FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO LIMIT 1;
              SELECT FOUND_ROWS() into int_row_count ;
              INSERT INTO R VALUES(int_row_count);
              IF int_row_count > 0 THEN
                DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO ;
              END IF;
            END IF;
        /*DELETING EXISTING VALUE End*/


/* DELETE FROM R; */
INSERT INTO R VALUES('Start Procedre');
INSERT INTO R VALUES(concat('SHIPMENT_NO ', SHIPMENT_NO));
            SELECT COUNT(F_SHIPMENT_NO) INTO int_is_duplicate_shipment FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
            SELECT COUNT(F_BOX_NO) INTO int_box_row_count FROM SC_SHIPMENT_BOX WHERE F_SHIPMENT_NO = SHIPMENT_NO;
INSERT INTO R VALUES(concat('Duplicate package Flag ', int_is_duplicate_shipment));

        IF int_is_duplicate_shipment = 0 THEN

            SELECT CODE INTO shipment_name FROM SC_SHIPMENT WHERE PK_NO = SHIPMENT_NO;

INSERT INTO R VALUES(concat('SHIPMENT_NAME ', shipment_name));

                SET int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK = 1;

                OPEN cur_PROC_SC_PACKAGING_LIST_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into R values (concat('Found row before Loop ', int_row_count));


                    IF int_row_count  != 0 THEN

                    get_PROC_SC_PACKAGING_LIST_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SC_PACKAGING_LIST_INV_STOCK INTO box_serial_no,box_no;

                        SELECT IFNULL(WIDTH_CM,46),IFNULL(LENGTH_CM,46),IFNULL(HEIGHT_CM,78),IFNULL(WEIGHT_KG,30) INTO int_width,int_length,int_height,int_weight FROM SC_BOX WHERE PK_NO = box_no;
INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_PACKAGING_LIST_INV_STOCK;
                            END IF;


INSERT INTO R VALUES(concat('Box Serial ', box_serial_no) );
INSERT INTO R VALUES(concat('Box No ', box_no) );
                    SET ALL_SUCCESS = ALL_SUCCESS + 1;

                    insert into R values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));




            /*-------------------------BLOCK 3 BEGINS ------------------------------*/
            Block3: BEGIN
                    DECLARE int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_PRC_STOCK_IN_INV_STOCK
                    CURSOR FOR
                    SELECT p.VENDOR_NAME,p.INVOICE_DATE,p.INVOICE_NO,INV_STOCK.F_PRC_STOCK_IN_NO AS prc_no, (SELECT COUNT(*) FROM  INV_STOCK where F_BOX_NO = box_no and F_PRC_STOCK_IN_NO = prc_no) AS PRODUCT_COUNT
                    FROM PRC_STOCK_IN AS p
                    JOIN INV_STOCK ON p.PK_NO=INV_STOCK.F_PRC_STOCK_IN_NO
                    WHERE INV_STOCK.F_BOX_NO=box_no
                    group by F_PRC_STOCK_IN_NO;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK = 0;

                    OPEN cur_PROC_PRC_STOCK_IN_INV_STOCK;
                        SELECT FOUND_ROWS() into int_row_count_cursor3 ;
                        insert into R values (concat('Found row3 before Loop ', int_row_count_cursor3));
                            IF int_row_count_cursor3 != 0 THEN

                                get_PROC_PRC_STOCK_IN_INV_STOCK:LOOP
                                    FETCH NEXT FROM  cur_PROC_PRC_STOCK_IN_INV_STOCK INTO vendor_name,invoice_date,invoice_no,int_prc_no,int_product_count_invoice;

                                INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK));

                                            IF int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK = 0 THEN

                                                    LEAVE get_PROC_PRC_STOCK_IN_INV_STOCK;
                                            END IF;


                                INSERT INTO R VALUES(concat('product count ', int_product_count_invoice) );
                                        SET ALL_SUCCESS_3 = ALL_SUCCESS_3 + 1;

                                        insert into R values (concat('ALL SUCCESS_2 VAL ', ALL_SUCCESS_3));

                                        SELECT concat(vendor_name,' ',invoice_date,' ',invoice_no,'(',int_product_count_invoice,')') INTO var_invoice_details_part;

                                        insert into R values (concat('var_invoice_details_part ', var_invoice_details_part));
                                        insert into R values (concat('var_invoice_details b_IF ', var_invoice_details));
                                        IF var_invoice_details = '0' THEN
                                           SET var_invoice_details = var_invoice_details_part;
                                           SET invoice_pk_no = int_prc_no;
                                           insert into R values (concat('var_invoice_details is 0 ', var_invoice_details));

                                        ELSE

                                           SELECT concat(var_invoice_details,', ',var_invoice_details_part) INTO var_invoice_details;
                                           SELECT concat(invoice_pk_no,', ',int_prc_no) INTO invoice_pk_no;
                                           insert into R values (concat('var_invoice_details_part ', var_invoice_details_part));
                                           insert into R values (concat('var_invoice_details ', var_invoice_details));
                                        END IF;



                                END LOOP get_PROC_PRC_STOCK_IN_INV_STOCK;

                            END IF;


                    CLOSE cur_PROC_PRC_STOCK_IN_INV_STOCK;

                    insert into R values (concat('OUT_STATUS_3 VAL ', ALL_SUCCESS_3));
                    insert into R values (concat('Row count 3 VAL ', int_row_count_cursor3));
                    IF ALL_SUCCESS_3 = int_row_count_cursor3 THEN
                        SET OUT_STATUS_3 = 'success';
                        INSERT INTO SC_PACKAGING_LIST( F_SHIPMENT_NO, SHIPMENT_NAME, BOX_SERIAL_NO, F_BOX_NO, WIDTH_CM, LENGTH_CM, HEIGHT_CM, WEIGHT_KG,INVOICE_DETAILS,INVOICE_NO) VALUES ( SHIPMENT_NO, shipment_name, box_serial_no, box_no, int_width, int_length, int_height, int_weight,var_invoice_details,invoice_pk_no );
                        SET var_invoice_details = '0';
                        SET invoice_pk_no = '0';
                    ELSE
                        SET OUT_STATUS_3 = 'failed';
                        SET ALL_SUCCESS = 99;
                        DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                        DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;

                    END IF;
                    SET ALL_SUCCESS_3 = 0;

            END Block3;

            /*-------------------------BLOCK 3 ENDS ------------------------------*/



            /*-------------------------BLOCK 2 BEGINS ------------------------------*/
            Block2: BEGIN
                    DECLARE int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_SC_PACKING_LIST_INV_STOCK
                    CURSOR FOR
                    SELECT
                        F_PRD_VARIANT_NO,HS_CODE,SKUID,IG_CODE,SUB_CATEGORY_NAME,INVOICE_NAME,SUM(PRODUCT_PURCHASE_PRICE_GBP) AS int_count_price,COUNT(PK_NO) AS int_product_count
                        FROM INV_STOCK
                        WHERE F_BOX_NO=box_no
                        GROUP BY SKUID;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK = 0;

                    OPEN cur_PROC_SC_PACKING_LIST_INV_STOCK;
                        SELECT FOUND_ROWS() into int_row_count_cursor2 ;
                        insert into R values (concat('Found row2 before Loop ', int_row_count_cursor2));
                            IF int_row_count_cursor2  != 0 THEN

                                get_PROC_SC_PACKING_LIST_INV_STOCK:LOOP
                                    FETCH NEXT FROM  cur_PROC_SC_PACKING_LIST_INV_STOCK INTO variant_no,var_hs_code,sku_id,var_ig_code,sub_cat_name,var_invoice_name,int_count_price,int_product_count;

                                INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK));

                                            IF int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK = 0 THEN

                                                    LEAVE get_PROC_SC_PACKING_LIST_INV_STOCK;
                                            END IF;


                                INSERT INTO R VALUES(concat('Price ', int_count_price) );
                                INSERT INTO R VALUES(concat('Product Count ', int_product_count) );
                                        SET ALL_SUCCESS_2 = ALL_SUCCESS_2 + 1;

                                        SET unit_price = int_count_price/int_product_count;

                                        insert into R values (concat('ALL SUCCESS_2 VAL ', ALL_SUCCESS_2));

                                        INSERT INTO SC_PACKING_LIST( F_SHIPMENT_NO, SHIPMENT_NAME, BOX_SERIAL_NO, F_BOX_NO, PRD_VARINAT_NO, HS_CODE, SKU_ID, IG_CODE, SUBCATEGORY_NAME, PRC_INV_NAME, QTY, UNIT_PRICE, TOTAL_PRICE) VALUES ( SHIPMENT_NO, shipment_name, box_serial_no, box_no, variant_no, var_hs_code, sku_id, var_ig_code, sub_cat_name, var_invoice_name, int_product_count, unit_price, int_count_price );


                                END LOOP get_PROC_SC_PACKING_LIST_INV_STOCK;

                            END IF;


                    CLOSE cur_PROC_SC_PACKING_LIST_INV_STOCK;

                    insert into R values (concat('OUT_STATUS_2 VAL ', ALL_SUCCESS_2));
                    insert into R values (concat('Row count 2 VAL ', int_row_count_cursor2));
                    IF ALL_SUCCESS_2 = int_row_count_cursor2 THEN
                        SET OUT_STATUS_2 = 'success';
                    ELSE
                        SET OUT_STATUS_2 = 'failed';
                        SET ALL_SUCCESS = 99;
                        DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                        DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;

                    END IF;
                    SET ALL_SUCCESS_2 = 0;

            END Block2;

                    END LOOP get_PROC_SC_PACKAGING_LIST_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_PACKAGING_LIST_INV_STOCK;

                  IF ALL_SUCCESS = int_box_row_count AND OUT_STATUS_2 = 'success' AND OUT_STATUS_3 = 'success' THEN
                     SET OUT_STATUS = 'success';
                   ELSE
                     SET OUT_STATUS = 'failed';
                     DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                     DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                   END IF;


        ELSE
           SET OUT_STATUS = 'duplicate-shipment';

        END IF;

INSERT INTO R VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_SHIPMENT_CANCELLED` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_SHIPMENT_CANCELLED` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_SHIPMENT_CANCELLED`(IN_INVOICE_FOR VarChar(40), IN_SHIPMENT_PK_NO Integer(11), OUT OUT_STATUS VarChar(20))
    NO SQL
BEGIN



    DECLARE int_HAS_cur_SC_BOX INT DEFAULT 1;
    DECLARE xPK_NO INT;

    DECLARE cur_SC_BOX
        CURSOR FOR
        SELECT F_BOX_NO FROM SC_SHIPMENT_BOX WHERE F_SHIPMENT_NO = IN_SHIPMENT_PK_NO ;

    DECLARE CONTINUE HANDLER
        FOR NOT FOUND SET int_HAS_cur_SC_BOX = 0;
            IF IN_INVOICE_FOR = 'azuramart' THEN            
                UPDATE INV_STOCK SET PRODUCT_STATUS = 20, F_SHIPPMENT_NO = NULL, SHIPMENT_NAME = NULL
                WHERE F_SHIPPMENT_NO = IN_SHIPMENT_PK_NO;
            ELSEIF IN_INVOICE_FOR = 'merchant' THEN 
                UPDATE MER_INV_STOCK SET PRODUCT_STATUS = 20, F_SHIPPMENT_NO = NULL, SHIPMENT_NAME = NULL
                WHERE F_SHIPPMENT_NO = IN_SHIPMENT_PK_NO;
            END IF;

                OPEN cur_SC_BOX;

                    get_PROC_SC_SHIPMENT_CANCELLED: LOOP
                        FETCH NEXT FROM  cur_SC_BOX INTO xPK_NO;

                        IF int_HAS_cur_SC_BOX = 0 THEN
                            LEAVE get_PROC_SC_SHIPMENT_CANCELLED;
                        END IF;

                        UPDATE SC_BOX SET BOX_STATUS = 10 WHERE PK_NO = xPK_NO;

                    END LOOP get_PROC_SC_SHIPMENT_CANCELLED;

                CLOSE cur_SC_BOX;

        DELETE FROM SC_SHIPMENT_BOX WHERE F_SHIPMENT_NO = IN_SHIPMENT_PK_NO;

    SET OUT_STATUS = 'success';

END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SHELVING_INV_STOCK` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SHELVING_INV_STOCK` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SHELVING_INV_STOCK`(shelve_label VarChar(20), IN_INV_SHELVING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, OUT OUT_STATUS VarChar(20))
    NO SQL
BEGIN

/*10101010~10~5|10101011~9~3|10101012~10~1|*/
  DECLARE int_HAS_cur_PROC_SHELVING_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE int_row_count INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_shelve_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE user_name VARCHAR(200);
    DECLARE i,j INT;
    DECLARE item_count_warehouse INT(11);
    DECLARE ALL_SUCCESS INT DEFAULT 0;

    DECLARE cur_PROC_SHELVING_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND (F_INV_ZONE_NO IS NULL)
            AND SKUID=var_arrary_param1 LIMIT var_arrary_param3;

        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SHELVING_INV_STOCK = 0;

DELETE FROM R;
INSERT INTO R VALUES('Start Procedre');

 SELECT PK_NO,ITEM_COUNT INTO int_shelve_pk,item_count_warehouse FROM INV_WAREHOUSE_ZONES WHERE ZONE_BARCODE = shelve_label;
 INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
 INSERT INTO R VALUES(concat('Zone PK_NO val ', int_shelve_pk));
 INSERT INTO R VALUES(concat('shelve_label val ', shelve_label));
 insert into R values (concat('Parameter Array ',IN_INV_SHELVING_ARRAY));


            SELECT USERNAME INTO user_name FROM SA_USER WHERE PK_NO = USER_ID;
            SET i=1;

            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO R VALUES(concat('loop i val ', i));

                SELECT substring_index(IN_INV_SHELVING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

insert into R values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;

                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );


                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) );


                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_SHELVING_ARRAY = substring(IN_INV_SHELVING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_SHELVING_ARRAY) - length(var_arrary_row) );


insert into R values (concat('Param 1   ', var_arrary_param1));
insert into R values (concat('Param 2   ', var_arrary_param2));
insert into R values (concat('Param 3   ', var_arrary_param3));


                SET int_HAS_cur_PROC_SHELVING_INV_STOCK = 1;

                OPEN cur_PROC_SHELVING_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into R values (concat('Found row before Loop ', int_row_count));


                    IF int_row_count  != 0 && int_row_count = var_arrary_param3 THEN

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;

                    insert into R values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));
                       /* SET j=0;


INSERT INTO R VALUES(concat('init j val ', j));*/

                    get_PROC_SHELVING_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SHELVING_INV_STOCK INTO xPK_NO;

INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SHELVING_INV_STOCK));

                        IF int_HAS_cur_PROC_SHELVING_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SHELVING_INV_STOCK;
                            END IF;


INSERT INTO R VALUES(concat('INV Stock PK_NO ', xPK_NO) );
/*INSERT INTO R VALUES(concat('loop j val ', j));   */

                        UPDATE INV_STOCK
                            SET F_INV_ZONE_NO = int_shelve_pk
                            ,INV_ZONE_BARCODE = shelve_label
                            ,ZONE_CHECK_IN_BY_NAME= user_name
                            ,ZONE_CHECK_IN_BY = USER_ID
                            WHERE PK_NO =  xPK_NO;
                        INSERT INTO INV_WAREHOUSE_ZONE_STOCK_ITEM( F_INV_STOCK_NO, F_INV_WAREHOUSE_ZONE_NO) VALUES ( xPK_NO, int_shelve_pk );
                          /*  SET j = j + 1;*/
                        INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
                        SET item_count_warehouse = item_count_warehouse + 1;

                    END LOOP get_PROC_SHELVING_INV_STOCK;

                    INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
                     UPDATE INV_WAREHOUSE_ZONES
                            SET ITEM_COUNT = item_count_warehouse
                            WHERE ZONE_BARCODE =  shelve_label;

                    END IF;

                CLOSE cur_PROC_SHELVING_INV_STOCK;

                set i = i + 1;

            END WHILE;

                  IF ALL_SUCCESS = IN_ROW_COUNT THEN
                     SET OUT_STATUS = 'success';
                   ELSE
                     SET OUT_STATUS = 'exeeded';
                  /*  SELECT PK_NO INTO int_shelve_pk FROM INV_WAREHOUSE_ZONES WHERE ZONE_BARCODE = shelve_label;
                    UPDATE INV_STOCK
                           SET F_INV_ZONE_NO = NULL,
                               INV_ZONE_BARCODE = NULL
                           WHERE F_INV_ZONE_NO =  int_shelve_pk ;

                    DELETE FROM INV_WAREHOUSE_ZONE_STOCK_ITEM WHERE F_INV_WAREHOUSE_ZONE_NO = int_shelve_pk ;
                    */
                   END IF;

INSERT INTO R VALUES(concat('End of Procedure with status ', OUT_STATUS));




END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SHELVING_UPDATE_INV_STOCK` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SHELVING_UPDATE_INV_STOCK` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SHELVING_UPDATE_INV_STOCK`(shelve_label VarChar(20), IN_INV_SHELVING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, OUT OUT_STATUS VarChar(20))
    NO SQL
BEGIN
                                                           
/*10101010~10~5|10101011~9~3|10101012~10~1|*/
  DECLARE int_HAS_cur_PROC_SHELVING_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;      
    DECLARE var_arrary_row VARCHAR(200); 
    DECLARE var_arrary_row_part VARCHAR(200);     
    DECLARE int_row_count INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_shelve_pk INT(11);  
    DECLARE from_warehouse_no INT(11);   
    DECLARE user_name VARCHAR(200);
    DECLARE i,j INT;    
    DECLARE item_count_warehouse INT(11);   
    DECLARE ALL_SUCCESS INT DEFAULT 0;
  
    DECLARE cur_PROC_SHELVING_INV_STOCK
        CURSOR FOR    
        SELECT 
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2 
            AND (PRODUCT_STATUS = 60 )  
            AND (INV_ZONE_BARCODE = shelve_label )
            AND SKUID=var_arrary_param1 ORDER BY PK_NO DESC LIMIT var_arrary_param3;    
    
        DECLARE CONTINUE HANDLER 
            FOR NOT FOUND SET int_HAS_cur_PROC_SHELVING_INV_STOCK = 0;    
            
            /*RESHELVING*/
            
            
            
           /* IF IS_UPDATE = 1 THEN   
              SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
              SELECT FOUND_ROWS() into int_row_count ;
              INSERT INTO R VALUES(int_row_count);
              IF int_row_count > 0 THEN
              UPDATE INV_STOCK
                     SET F_BOX_NO = NULL, 
                     PRODUCT_STATUS = 0
              WHERE F_BOX_NO =  int_box_pk ;
         
              DELETE FROM SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk ;
                 INSERT INTO R VALUES(2);
              DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;  
              END IF;
                
            END IF; 
        /*RESHELVING End*/

DELETE FROM R;
INSERT INTO R VALUES('Start Procedre');
 
 SELECT PK_NO,ITEM_COUNT INTO int_shelve_pk,item_count_warehouse FROM INV_WAREHOUSE_ZONES WHERE ZONE_BARCODE = shelve_label;
 INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));  
 INSERT INTO R VALUES(concat('Zone PK_NO val ', int_shelve_pk));    
 INSERT INTO R VALUES(concat('shelve_label val ', shelve_label));             
insert into R values (concat('Parameter Array ',IN_INV_SHELVING_ARRAY));

            SET i=1;         


            WHILE i <= IN_ROW_COUNT DO 
                INSERT INTO R VALUES(concat('loop i val ', i)); 
                
                SELECT substring_index(IN_INV_SHELVING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;  

insert into R values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;      
                  


                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );
                                                                                                                                    
                  
                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) ); 

                
                SET  var_arrary_param3 = var_arrary_row_part;                 

                SET IN_INV_SHELVING_ARRAY = substring(IN_INV_SHELVING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_SHELVING_ARRAY) - length(var_arrary_row) ); 
                 



insert into R values (concat('Param 1   ', var_arrary_param1));  
insert into R values (concat('Param 2   ', var_arrary_param2));  
insert into R values (concat('Param 3   ', var_arrary_param3)); 


                SET int_HAS_cur_PROC_SHELVING_INV_STOCK = 1;
                
                OPEN cur_PROC_SHELVING_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;
                    
                insert into R values (concat('Found row before Loop ', int_row_count));  
                              

                    IF int_row_count  != 0 && int_row_count = var_arrary_param3 THEN 
                       
                    SET ALL_SUCCESS = ALL_SUCCESS + 1; 
                     
                    insert into R values (concat('ALL SUCCESS VAL ', ALL_SUCCESS)); 
                       /* SET j=0;   
                       
                   
INSERT INTO R VALUES(concat('init j val ', j));*/

                    get_PROC_SHELVING_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SHELVING_INV_STOCK INTO xPK_NO;  

INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SHELVING_INV_STOCK));                        

                        IF int_HAS_cur_PROC_SHELVING_INV_STOCK = 0 THEN 
                                LEAVE get_PROC_SHELVING_INV_STOCK;
                            END IF;
                     

INSERT INTO R VALUES(concat('INV Stock PK_NO ', xPK_NO) );
/*INSERT INTO R VALUES(concat('loop j val ', j));   */
                       
                        UPDATE INV_STOCK
                              SET F_INV_ZONE_NO = null, INV_ZONE_BARCODE = null
                              WHERE PK_NO =  xPK_NO;
                          DELETE FROM INV_WAREHOUSE_ZONE_STOCK_ITEM WHERE F_INV_STOCK_NO = xPK_NO;
                          INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
                          SET item_count_warehouse = item_count_warehouse - 1;
                            
                    END LOOP get_PROC_SHELVING_INV_STOCK;   
                    
                    INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
                     UPDATE INV_WAREHOUSE_ZONES
                            SET ITEM_COUNT = item_count_warehouse
                            WHERE ZONE_BARCODE =  shelve_label;
                    
                    END IF; 
    
                CLOSE cur_PROC_SHELVING_INV_STOCK;  
              
                set i = i + 1; 
                    
            END WHILE; 
                  
                  IF ALL_SUCCESS = IN_ROW_COUNT THEN
                     SET OUT_STATUS = 'success';
                   ELSE  
                     SET OUT_STATUS = 'exeeded';
                  /*  SELECT PK_NO INTO int_shelve_pk FROM INV_WAREHOUSE_ZONES WHERE ZONE_BARCODE = shelve_label;
                    UPDATE INV_STOCK
                           SET F_INV_ZONE_NO = NULL, 
                               INV_ZONE_BARCODE = NULL
                           WHERE F_INV_ZONE_NO =  int_shelve_pk ;
         
                    DELETE FROM INV_WAREHOUSE_ZONE_STOCK_ITEM WHERE F_INV_WAREHOUSE_ZONE_NO = int_shelve_pk ;
                    */
                   END IF;

INSERT INTO R VALUES(concat('End of Procedure with status ', OUT_STATUS));
        



END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SLS_CHECK_OFFER` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SLS_CHECK_OFFER` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SLS_CHECK_OFFER`(IN_BOOKING_PK_NO Integer)
    NO SQL
BLOCKPARENT: BEGIN

        DECLARE xF_BOOKING_NO       INT;
        DECLARE xF_BUNDLE_NO        INT DEFAULT 0;
        DECLARE xF_LIST_NO          INT DEFAULT 0;
        DECLARE xF_LIST_CHILD_NO    INT DEFAULT 0;
        DECLARE xIS_A_LIST          INT DEFAULT 0;
        DECLARE xF_PRD_VARIANT_NO   INT;
        DECLARE xREGULAR_PRICE      FLOAT(0);
        DECLARE xINSTALLMENT_PRICE  FLOAT(0);
        DECLARE xF_INV_STOCK_NO     INT;
        DECLARE var_IS_A_LIST       INT(1);
        DECLARE xINT_HAS_IN_LIST_A  INT DEFAULT 0;
        DECLARE xINT_HAS_IN_LIST_B  INT DEFAULT 0;
        DECLARE xLIST_NO            INT DEFAULT NULL;
        DECLARE xLIST_DTL_NO        INT DEFAULT NULL;
        DECLARE xLIST               VARCHAR(40) DEFAULT NULL;

        DECLARE vSLS_CHECK_OFFER_NO INT;
        DECLARE vF_BUNDLE_NO INT;
        DECLARE vF_BOOKING_NO INT;
        DECLARE vF_LIST_NO INT;
        DECLARE vF_LIST_CHILD_NO INT;
        DECLARE vIS_A_LIST INT;
        DECLARE vF_VARIANT_NO INT;
        DECLARE vREGULAR_PRICE FLOAT(0);
        DECLARE vINSTALLMENT_PRICE FLOAT(0);
        DECLARE vF_INV_STOCK_NO INT;
        DECLARE vLIST_TYPE VARCHAR(40) DEFAULT NULL;
        DECLARE vREGULAR_BUNDLE_PRICE FLOAT(0);
        DECLARE vINSTALLMENT_BUNDLE_PRICE FLOAT(0);
        DECLARE vIS_PROCESSED INT;
        DECLARE vSLS_BUNDLE_NO INT;
        DECLARE vCODE VARCHAR(40) DEFAULT NULL;
        DECLARE vCOUPON_CODE VARCHAR(40) DEFAULT NULL;
        DECLARE vBUNDLE_NAME VARCHAR(200) DEFAULT NULL;
        DECLARE vBUNDLE_NAME_PUBLIC VARCHAR(200) DEFAULT NULL;
        DECLARE vVALIDITY_FROM DATE DEFAULT NULL;
        DECLARE vVALIDITY_TO DATE DEFAULT NULL;
        DECLARE vF_A_LIST_NO INT;
        DECLARE vF_B_LIST_NO INT;
        DECLARE vF_BUNDLE_TYPE VARCHAR(40) DEFAULT NULL;
        DECLARE vP_AMOUNT FLOAT(0);
        DECLARE vP2_AMOUNT FLOAT(0);
        DECLARE vX1_QTY INT;
        DECLARE vX2_QTY INT;
        DECLARE vZA1 INT;
        DECLARE vZA2 INT;
        DECLARE vZA3 INT;
        DECLARE vR_AMOUNT FLOAT(0);
        DECLARE vR2_AMOUNT FLOAT(0);
        DECLARE vY1_QTY INT;
        DECLARE vY2_QTY INT;
        DECLARE vZB1 INT;
        DECLARE vZB2 INT;
        DECLARE vZB3 INT;
        DECLARE cvSLS_CHECK_OFFER_NO INT;
        DECLARE cvF_BUNDLE_NO INT;
        DECLARE cvF_BOOKING_NO INT;



        DECLARE int_row_count INT;
        DECLARE int_row_count2 INT;
        DECLARE int_row_count3 INT;
        DECLARE COUNTER1 INT DEFAULT 1;
        DECLARE COUNTER2 INT DEFAULT 1;
        DECLARE COUNTER3 INT DEFAULT 1;

Block1: BEGIN
        DECLARE COUNTER1 INT DEFAULT 1;
        DECLARE INT_HAS_CUR_PROC_SLS_BOOKING INT DEFAULT 1;
        /*Data tranfered to SLS_CHECK_OFFER */

        DECLARE CUR_PROC_SLS_BOOKING
            CURSOR FOR
                SELECT
                    SLS_BOOKING_DETAILS.F_BOOKING_NO
                    ,SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                    ,SLS_BOOKING_DETAILS.CURRENT_REGULAR_PRICE
                    ,SLS_BOOKING_DETAILS.CURRENT_INSTALLMENT_PRICE
                    ,INV_STOCK.F_PRD_VARIANT_NO
                    ,SLS_BUNDLE_PRIMARY_SET.PK_NO AS LIST_NO
                    ,SLS_BUNDLE_PRIMARY_SET_DTL.PK_NO AS LIST_DTL_NO
                    ,SLS_BUNDLE.PK_NO AS BUNDLE_PK_NO
                    ,'A' AS LIST

                FROM
                    SLS_BOOKING_DETAILS
                    ,INV_STOCK
                    ,SLS_BUNDLE_PRIMARY_SET_DTL
                    ,SLS_BUNDLE_PRIMARY_SET
                    ,SLS_BUNDLE

                WHERE SLS_BOOKING_DETAILS.F_BOOKING_NO = IN_BOOKING_PK_NO
                    AND INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                    AND SLS_BUNDLE_PRIMARY_SET_DTL.F_PRD_VARIANT_NO = INV_STOCK.F_PRD_VARIANT_NO
                    AND SLS_BUNDLE_PRIMARY_SET.PK_NO = SLS_BUNDLE_PRIMARY_SET_DTL.F_SLS_BUNDLE_PRIMARY_SET_NO
                    AND SLS_BUNDLE.F_A_LIST_NO = SLS_BUNDLE_PRIMARY_SET.PK_NO
                    AND CURDATE() between SLS_BUNDLE.VALIDITY_FROM and SLS_BUNDLE.VALIDITY_TO
                    AND SLS_BUNDLE.STATUS = 1
                UNION

                SELECT
                    SLS_BOOKING_DETAILS.F_BOOKING_NO
                    ,SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                    ,SLS_BOOKING_DETAILS.CURRENT_REGULAR_PRICE
                    ,SLS_BOOKING_DETAILS.CURRENT_INSTALLMENT_PRICE
                    ,INV_STOCK.F_PRD_VARIANT_NO
                    ,SLS_BUNDLE_SECONDARY_SET.PK_NO AS LIST_NO
                    ,SLS_BUNDLE_SECONDARY_SET_DTL.PK_NO AS LIST_DTL_NO
                    ,SLS_BUNDLE.PK_NO AS BUNDLE_PK_NO
                    ,'B' AS LIST

                FROM
                    SLS_BOOKING_DETAILS
                    ,INV_STOCK
                    ,SLS_BUNDLE_SECONDARY_SET_DTL
                    ,SLS_BUNDLE_SECONDARY_SET
                    ,SLS_BUNDLE

                WHERE SLS_BOOKING_DETAILS.F_BOOKING_NO = IN_BOOKING_PK_NO
                AND INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                AND SLS_BUNDLE_SECONDARY_SET_DTL.F_PRD_VARIANT_NO = INV_STOCK.F_PRD_VARIANT_NO
                AND SLS_BUNDLE_SECONDARY_SET.PK_NO = SLS_BUNDLE_SECONDARY_SET_DTL.F_SLS_BUNDLE_SECONDARY_SET_NO
                AND SLS_BUNDLE.F_B_LIST_NO = SLS_BUNDLE_SECONDARY_SET.PK_NO
                AND CURDATE() between SLS_BUNDLE.VALIDITY_FROM and SLS_BUNDLE.VALIDITY_TO
                AND SLS_BUNDLE.STATUS = 1
                ;


        DECLARE CONTINUE HANDLER

            FOR NOT FOUND SET INT_HAS_CUR_PROC_SLS_BOOKING = 0;
DELETE FROM SLS_CHECK_OFFER WHERE F_BOOKING_NO = IN_BOOKING_PK_NO;
DELETE FROM S;
-- INSERT INTO S VALUES('Line 26');

            OPEN CUR_PROC_SLS_BOOKING;
                SELECT FOUND_ROWS() INTO int_row_count ;

-- INSERT INTO S values ('Line 32');
-- INSERT INTO S values (concat('Found row ', int_row_count));

                IF int_row_count > 0 THEN

                    GET_PROC_SLS_BOOKING: LOOP
                        FETCH NEXT
                        FROM  CUR_PROC_SLS_BOOKING
                            INTO
                            xF_BOOKING_NO
                            ,xF_INV_STOCK_NO
                            ,xREGULAR_PRICE
                            ,xINSTALLMENT_PRICE
                            ,xF_PRD_VARIANT_NO
                            ,xLIST_NO
                            ,xLIST_DTL_NO
                            ,xF_BUNDLE_NO
                            ,xLIST
                            ;

                            IF INT_HAS_CUR_PROC_SLS_BOOKING = 0 THEN
                            LEAVE GET_PROC_SLS_BOOKING;
                            END IF;

-- INSERT INTO S VALUES('line 48');


                            INSERT INTO SLS_CHECK_OFFER(
                            F_BOOKING_NO
                            ,F_BUNDLE_NO
                            ,F_LIST_NO
                            ,F_LIST_CHILD_NO
                            ,LIST_TYPE
                            ,F_VARIANT_NO
                            ,REGULAR_PRICE
                            ,INSTALLMENT_PRICE
                            ,F_INV_STOCK_NO
                            )
                            VALUES (
                            xF_BOOKING_NO
                            ,xF_BUNDLE_NO
                            ,xLIST_NO
                            ,xLIST_DTL_NO
                            ,xLIST
                            ,xF_PRD_VARIANT_NO
                            ,xREGULAR_PRICE
                            ,xINSTALLMENT_PRICE
                            ,xF_INV_STOCK_NO
                            );



                    END LOOP GET_PROC_SLS_BOOKING;

                END IF;

            CLOSE CUR_PROC_SLS_BOOKING;

END Block1;

Block2: BEGIN
            DECLARE COUNTER2 INT DEFAULT 1;
            DECLARE INT_HAS_CUR_SLS_CHECK_OFFER_RESULT INT DEFAULT 1;

            /* OFFER RESULT  */
            DECLARE CUR_SLS_CHECK_OFFER_RESULT
                CURSOR FOR
                SELECT
                    SLS_CHECK_OFFER.PK_NO AS SLS_CHECK_OFFER_NO
                    ,SLS_CHECK_OFFER.F_BUNDLE_NO
                    ,SLS_CHECK_OFFER.F_BOOKING_NO
                    ,SLS_CHECK_OFFER.F_LIST_NO
                    ,SLS_CHECK_OFFER.F_LIST_CHILD_NO
                    ,SLS_CHECK_OFFER.IS_A_LIST
                    ,SLS_CHECK_OFFER.F_VARIANT_NO
                    ,SLS_CHECK_OFFER.REGULAR_PRICE
                    ,SLS_CHECK_OFFER.INSTALLMENT_PRICE
                    ,SLS_CHECK_OFFER.F_INV_STOCK_NO
                    ,SLS_CHECK_OFFER.LIST_TYPE
                    ,SLS_CHECK_OFFER.REGULAR_BUNDLE_PRICE
                    ,SLS_CHECK_OFFER.INSTALLMENT_BUNDLE_PRICE
                    ,SLS_CHECK_OFFER.IS_PROCESSED
                    ,SLS_BUNDLE.CODE
                    ,SLS_BUNDLE.COUPON_CODE
                    ,SLS_BUNDLE.BUNDLE_NAME
                    ,SLS_BUNDLE.BUNDLE_NAME_PUBLIC
                    ,SLS_BUNDLE.VALIDITY_FROM
                    ,SLS_BUNDLE.VALIDITY_TO
                    ,SLS_BUNDLE.F_A_LIST_NO
                    ,SLS_BUNDLE.F_B_LIST_NO
                    ,SLS_BUNDLE.F_BUNDLE_TYPE
                    ,SLS_BUNDLE.P_AMOUNT
                    ,SLS_BUNDLE.P2_AMOUNT
                    ,SLS_BUNDLE.X1_QTY
                    ,SLS_BUNDLE.X2_QTY
                    ,SLS_BUNDLE.ZA1
                    ,SLS_BUNDLE.ZA2
                    ,SLS_BUNDLE.ZA3
                    ,SLS_BUNDLE.R_AMOUNT
                    ,SLS_BUNDLE.R2_AMOUNT
                    ,SLS_BUNDLE.Y1_QTY
                    ,SLS_BUNDLE.Y2_QTY
                    ,SLS_BUNDLE.ZB1
                    ,SLS_BUNDLE.ZB2
                    ,SLS_BUNDLE.ZB3
                FROM SLS_CHECK_OFFER
                    ,SLS_BUNDLE
                WHERE SLS_CHECK_OFFER.F_BOOKING_NO = IN_BOOKING_PK_NO
                    AND SLS_CHECK_OFFER.F_BUNDLE_NO = SLS_BUNDLE.PK_NO
                GROUP BY SLS_CHECK_OFFER.F_BUNDLE_NO
                 ;


                DECLARE CONTINUE HANDLER

                FOR NOT FOUND SET INT_HAS_CUR_SLS_CHECK_OFFER_RESULT = 0;

DELETE FROM S;
-- INSERT INTO S VALUES('Line 125');

                OPEN CUR_SLS_CHECK_OFFER_RESULT;
                    select FOUND_ROWS() into int_row_count2 ;

-- INSERT INTO S values ('Line 130');
-- INSERT INTO S values (concat('Found row parent ', int_row_count2));

                    IF int_row_count2 > 0 THEN

                        GET_CUR_SLS_CHECK_OFFER_RESULT: LOOP
                            FETCH NEXT
                                FROM  CUR_SLS_CHECK_OFFER_RESULT
                                    INTO
                                vSLS_CHECK_OFFER_NO
                                ,vF_BUNDLE_NO
                                ,vF_BOOKING_NO
                                ,vF_LIST_NO
                                ,vF_LIST_CHILD_NO
                                ,vIS_A_LIST
                                ,vF_VARIANT_NO
                                ,vREGULAR_PRICE
                                ,vINSTALLMENT_PRICE
                                ,vF_INV_STOCK_NO
                                ,vLIST_TYPE
                                ,vREGULAR_BUNDLE_PRICE
                                ,vINSTALLMENT_BUNDLE_PRICE
                                ,vIS_PROCESSED
                                ,vCODE
                                ,vCOUPON_CODE
                                ,vBUNDLE_NAME
                                ,vBUNDLE_NAME_PUBLIC
                                ,vVALIDITY_FROM
                                ,vVALIDITY_TO
                                ,vF_A_LIST_NO
                                ,vF_B_LIST_NO
                                ,vF_BUNDLE_TYPE
                                ,vP_AMOUNT
                                ,vP2_AMOUNT
                                ,vX1_QTY
                                ,vX2_QTY
                                ,vZA1
                                ,vZA2
                                ,vZA3
                                ,vR_AMOUNT
                                ,vR2_AMOUNT
                                ,vY1_QTY
                                ,vY2_QTY
                                ,vZB1
                                ,vZB2
                                ,vZB3
                                ;

                                IF INT_HAS_CUR_SLS_CHECK_OFFER_RESULT = 0 THEN
                                    LEAVE GET_CUR_SLS_CHECK_OFFER_RESULT;
                                END IF;

        Block3: BEGIN
            DECLARE COUNTER3 INT DEFAULT 1;
            DECLARE COUNTER9 INT DEFAULT 1;
            DECLARE COUNTER4 INT DEFAULT 1;
            DECLARE COUNTER10 INT DEFAULT 1;
            DECLARE INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW INT DEFAULT 1;

            DECLARE CUR_SLS_CHECK_OFFER_RESULT_ROW
            CURSOR FOR
                SELECT
                SLS_CHECK_OFFER.PK_NO AS SLS_CHECK_OFFER_NO
                ,SLS_CHECK_OFFER.F_BUNDLE_NO
                ,SLS_CHECK_OFFER.F_BOOKING_NO
                --    ,SLS_CHECK_OFFER.F_LIST_NO
                --  ,SLS_CHECK_OFFER.F_LIST_CHILD_NO
                --  ,SLS_CHECK_OFFER.IS_A_LIST
                --  ,SLS_CHECK_OFFER.F_VARIANT_NO
                --  ,SLS_CHECK_OFFER.REGULAR_PRICE
                --  ,SLS_CHECK_OFFER.INSTALLMENT_PRICE
                --  ,SLS_CHECK_OFFER.F_INV_STOCK_NO
                --  ,SLS_CHECK_OFFER.LIST_TYPE
                -- ,SLS_CHECK_OFFER.REGULAR_BUNDLE_PRICE
                --  ,SLS_CHECK_OFFER.INSTALLMENT_BUNDLE_PRICE
                -- ,SLS_CHECK_OFFER.IS_PROCESSED

                FROM SLS_CHECK_OFFER
                WHERE SLS_CHECK_OFFER.F_BUNDLE_NO = vF_BUNDLE_NO
                AND SLS_CHECK_OFFER.F_BOOKING_NO = vF_BOOKING_NO;


                DECLARE CONTINUE HANDLER
                FOR NOT FOUND SET INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW = 0;


-- INSERT INTO S VALUES('Line 224');

                OPEN CUR_SLS_CHECK_OFFER_RESULT_ROW;

                    SELECT FOUND_ROWS() INTO int_row_count3 ;

-- INSERT INTO S values ('Line 229');
-- INSERT INTO S values (concat('Found row ', int_row_count3));

                    IF int_row_count3 > 0 THEN

-- INSERT INTO S values ('Line 2331');
-- INSERT INTO S values (INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW);

                        GET_CUR_SLS_CHECK_OFFER_RESULT_ROW: LOOP
                            FETCH NEXT
                                FROM  CUR_SLS_CHECK_OFFER_RESULT_ROW
                                    INTO
                                    cvSLS_CHECK_OFFER_NO
                                    ,cvF_BUNDLE_NO
                                    ,cvF_BOOKING_NO

                                ;
-- INSERT INTO S values ('Line 251');
                                IF INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW = 0 THEN
                                    LEAVE GET_CUR_SLS_CHECK_OFFER_RESULT_ROW;
                                END IF;


-- INSERT INTO S values (concat('when_', vP_AMOUNT));
-- INSERT INTO S values (concat('when1_', vX1_QTY));
-- INSERT INTO S values (concat('when2_', vZA1));


                            IF vP_AMOUNT = 0 AND vX1_QTY = 0  AND vZA1 = 0 THEN
                            -- universal false
                                UPDATE SLS_CHECK_OFFER
                                    SET
                                    REGULAR_BUNDLE_PRICE = vREGULAR_BUNDLE_PRICE
                                    ,INSTALLMENT_BUNDLE_PRICE = vINSTALLMENT_BUNDLE_PRICE
                                    ,IS_PROCESSED = 1
                                    ,CON = 1
                                WHERE PK_NO = cvSLS_CHECK_OFFER_NO AND IS_PROCESSED = 0 AND F_BOOKING_NO = IN_BOOKING_PK_NO ;
INSERT INTO S values (CONCAT('con 1_',cvSLS_CHECK_OFFER_NO));

                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY = 0 AND vZA1 > 0 THEN
                             -- Buy any item at 20%;
INSERT INTO S values (CONCAT('con 2_',cvSLS_CHECK_OFFER_NO));
-- INSERT INTO S values (CONCAT('con IP',xREGULAR_PRICE));
-- INSERT INTO S values (CONCAT('con RP',xINSTALLMENT_PRICE));

                                UPDATE SLS_CHECK_OFFER
                                    SET
                                    REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZA1
                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZA1
                                    ,IS_PROCESSED = 1
                                    ,SEQUENC = COUNTER2
                                    ,CON = 2
                                WHERE SLS_CHECK_OFFER.PK_NO = cvSLS_CHECK_OFFER_NO
                                AND IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ;

                                SET COUNTER2 = COUNTER2+1;

                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 = 0 THEN
                            -- buy 1 get 1, buy 2 get 1, buy 1 get 2, buy 1 get 1 half price from A list
INSERT INTO S values (CONCAT('con 3_',cvSLS_CHECK_OFFER_NO));
                                SELECT count(*) INTO @ALIST FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ;

                                    IF @ALIST >= vX1_QTY THEN
        --  INSERT INTO S values (CONCAT('LINE_',422));
        --  INSERT INTO S values (CONCAT('RR',@ALIST));
        --  INSERT INTO S values (CONCAT('SS',vX1_QTY));
                                        SELECT count(*) INTO @BLIST FROM SLS_CHECK_OFFER
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'B'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ;

                                             IF @BLIST >= vY1_QTY AND vR_AMOUNT = 0 THEN

                                                UPDATE SLS_CHECK_OFFER
                                                    SET
                                                    REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE
                                                    ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 31
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'A'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vX1_QTY
                                                    ;

                                                UPDATE SLS_CHECK_OFFER
                                                    SET REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZB1
                                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZB1
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 32
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'B'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vY1_QTY ;



                                                 SET COUNTER1 = COUNTER1+1;

                                            END IF;

                                            IF @BLIST >= vY1_QTY AND vR_AMOUNT > 0 THEN

                                                UPDATE SLS_CHECK_OFFER
                                                    SET
                                                    REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE
                                                    ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 31
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'A'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vX1_QTY
                                                    ;

                                                UPDATE SLS_CHECK_OFFER
                                                    SET REGULAR_BUNDLE_PRICE = vR_AMOUNT
                                                    ,INSTALLMENT_BUNDLE_PRICE = vR2_AMOUNT
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 32
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'B'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vY1_QTY ;



                                                 SET COUNTER1 = COUNTER1+1;

                                            END IF;


                                    END IF;


                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY = 0 AND vZA1 = 0 THEN
                            -- Buy min 500 amt from A list get 2 free from B list, buy min 500 amt get 1 half price;

INSERT INTO S values (CONCAT('con 4_',COUNTER1));

                                SELECT SUM(REGULAR_PRICE), SUM(INSTALLMENT_PRICE)
                                    INTO @TOTAL_P_AMOUNT, @TOTAL_P2_AMOUNT
                                    FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ;

                                IF @TOTAL_P_AMOUNT >= vP_AMOUNT THEN

                                    SELECT COUNT(*) INTO @TOTAL_FREE_QTY_FOR_vP_AMOUNT FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ;

                                    IF @TOTAL_FREE_QTY_FOR_vP_AMOUNT > 0  THEN
                                            UPDATE SLS_CHECK_OFFER
                                                SET
                                                REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = COUNTER4
                                                ,CON = 41
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ;

                                            UPDATE SLS_CHECK_OFFER
                                                SET REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZB1
                                                ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZB1
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = COUNTER4
                                                ,CON = 42
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'B'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            LIMIT vY1_QTY ;

                                            SET COUNTER4 = COUNTER4+1;

                                    END IF;

                                    IF vZA1 > 0 THEN
                                        -- buy 500amt or above from A list and get 20% discount
                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA1
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA1
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 43
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ;

                                    END IF;


                                END IF;



                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 > 0 THEN

                            -- not possible
 INSERT INTO S values (CONCAT('con 5_',cvSLS_CHECK_OFFER_NO));

                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT = 0 AND vY1_QTY = 0 THEN
                            -- buy any lowest priced 6 item from A list at 800 amt;
                            -- buy any lowest priced 6 item A list at 800 amt more item at 50% discount;

                                IF vZA2 > 0 THEN
                            -- buy any lowest priced 6 item A list at 800 amt more item at 50% discount;
INSERT INTO S values (CONCAT('con 6_A',cvSLS_CHECK_OFFER_NO));
                                    SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY
                                        INTO @TOTAL_P_AMOUNT_CON6, @TOTAL_X1_QTY_CON6
                                        FROM SLS_CHECK_OFFER
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT vX1_QTY ;

                                    IF @TOTAL_P_AMOUNT_CON6 >= vP_AMOUNT AND @TOTAL_X1_QTY_CON6 >= vX1_QTY THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 61
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT  vX1_QTY;

                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 62
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ;




                                    END IF;

                                ELSE
                                -- buy any lowest priced 6 from A list item at 800 amt;

INSERT INTO S values (CONCAT('con 6_B',cvSLS_CHECK_OFFER_NO));
                                    SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY
                                        INTO @TOTAL_P_AMOUNT_CON6, @TOTAL_X1_QTY_CON6
                                        FROM SLS_CHECK_OFFER
                                        WHERE
                                        IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT vX1_QTY ;

                                    IF @TOTAL_P_AMOUNT_CON6 >= vP_AMOUNT AND @TOTAL_X1_QTY_CON6 >= vX1_QTY THEN
INSERT INTO S values (CONCAT('con 6_B',612));
                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                                ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = COUNTER3
                                                ,CON = 63
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT  vX1_QTY;



                                        SET COUNTER3 = COUNTER3+1;
                                    END IF;

                                END IF;






                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY > 0 AND vY1_QTY = 0 THEN
                            -- buy any lowest priced 6item at 800amt and more item at 50% discount ;
                            -- buy any lowest priced 6item at 800amt and more item at 50% discount and more item at 20% discount;

INSERT INTO S values (CONCAT('con 7_',vX1_QTY));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON7, @TOTAL_X1_QTY_CON7 FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ORDER BY REGULAR_PRICE ASC
                                ;

                                IF @TOTAL_X1_QTY_CON7 >= vX1_QTY THEN

                                    UPDATE SLS_CHECK_OFFER
                                        SET
                                        REGULAR_BUNDLE_PRICE = REGULAR_PRICE
                                        ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE
                                        ,IS_PROCESSED = 1
                                        ,SEQUENC = 1
                                        ,CON = 71
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC LIMIT vX1_QTY;


                                    IF @TOTAL_X1_QTY_CON7 > vX1_QTY THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 72
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC LIMIT vX2_QTY;

                                    END IF;

                                    SELECT  COUNT(*) AS TOTAL_QTY  INTO @TOTAL_X1_QTY_CON7C FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC ;

                                    IF @TOTAL_X1_QTY_CON7C > 0 AND vZA3 > 0 THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA3
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA3
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 73
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ORDER BY REGULAR_PRICE ASC ;

                                    END IF;



                                END IF;


                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vY1_QTY = 0 THEN
                                -- Buy lowest 6 item at 50% discount, next 2 at 30% (and remaining at 10 discount) if remaining qty and more item at 20% discount jodi thake;
    INSERT INTO S values (CONCAT('con 8_',vX1_QTY));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8, @TOTAL_X1_QTY_CON8 FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ORDER BY REGULAR_PRICE ASC
                                ;
                                IF @TOTAL_X1_QTY_CON8 >= vX1_QTY THEN
                                    UPDATE SLS_CHECK_OFFER
                                        SET
                                        REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA1
                                        ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA1
                                        ,IS_PROCESSED = 1
                                        ,SEQUENC = 1
                                        ,CON = 81
                                    WHERE IS_PROCESSED = 0 AND
                                    LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC LIMIT vX1_QTY;

                                    IF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vX2_QTY > 0 AND vZA2  THEN
                                        -- next 2 qty 30% discount

                                        SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8A, @TOTAL_X1_QTY_CON8A FROM SLS_CHECK_OFFER
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        ;

                                        IF @TOTAL_X1_QTY_CON8A > 0 THEN

                                            UPDATE SLS_CHECK_OFFER
                                                SET
                                                REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 82
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ORDER BY REGULAR_PRICE ASC LIMIT vX2_QTY;

                                            IF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vX2_QTY > 0 AND vZA2 AND vZA3 > 0 THEN
                                                -- next remaining qty qty 20% discount
                                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8B, @TOTAL_X1_QTY_CON8B FROM SLS_CHECK_OFFER
                                                WHERE IS_PROCESSED = 0
                                                AND LIST_TYPE = 'A'
                                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                ORDER BY REGULAR_PRICE ASC
                                                ;

                                                    IF @TOTAL_X1_QTY_CON8B > 0 THEN

                                                        UPDATE SLS_CHECK_OFFER
                                                            SET
                                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA3
                                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA3
                                                            ,IS_PROCESSED = 1
                                                            ,SEQUENC = 1
                                                            ,CON = 83
                                                        WHERE IS_PROCESSED = 0
                                                        AND LIST_TYPE = 'A'
                                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                        ORDER BY REGULAR_PRICE ASC ;

                                                    END IF;
                                                    -- end next remaining qty qty 20% discount
                                            END IF;


                                        END IF;

                                    END IF;
                                END IF;

                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT > 0 AND vY1_QTY > 0 THEN
                            -- buy 1 qty from A list at 100 taka get 1 qty from B list at 20 taka
INSERT INTO S values (CONCAT('con 9_', cvSLS_CHECK_OFFER_NO));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON9, @TOTAL_X1_QTY_CON9 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_R_AMOUNT_CON9, @TOTAL_Y1_QTY_CON9 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                            IF @TOTAL_X1_QTY_CON9 >= vX1_QTY AND @TOTAL_Y1_QTY_CON9 >= vY1_QTY THEN
INSERT INTO S values (CONCAT('con 9_','YES'));

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER9
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vX1_QTY;

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vR_AMOUNT/vY1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vR2_AMOUNT/vY1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER9
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'B'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vY1_QTY;
                                SET COUNTER9 = COUNTER9+1;

                                END IF;


                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT = 0 AND vY1_QTY > 0 and vZB1 > 0 THEN
                            -- get 1 qty from A list by 100 taka discount from B list
INSERT INTO S values (CONCAT('con 10_',cvSLS_CHECK_OFFER_NO));

                            SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON10, @TOTAL_X1_QTY_CON10 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_R_AMOUNT_CON10, @TOTAL_Y1_QTY_CON10 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                            IF @TOTAL_X1_QTY_CON10 >= vX1_QTY AND @TOTAL_Y1_QTY_CON10 >= vY1_QTY THEN
INSERT INTO S values (CONCAT('con 10_','YES'));

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER10
                                            ,CON = 101
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vX1_QTY;

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE - (REGULAR_BUNDLE_PRICE/100)*vZB1
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE - (INSTALLMENT_BUNDLE_PRICE/100)*vZB1
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER10
                                            ,CON = 102
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'B'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vY1_QTY;

                                SET COUNTER10 = COUNTER10+1;

                                END IF;




                            END IF; -- last if
                        END LOOP GET_CUR_SLS_CHECK_OFFER_RESULT_ROW;
                    END IF;



        CLOSE CUR_SLS_CHECK_OFFER_RESULT_ROW;

        END Block3;






                        END LOOP GET_CUR_SLS_CHECK_OFFER_RESULT;

                    END IF;

                CLOSE CUR_SLS_CHECK_OFFER_RESULT;







END Block2;

END BLOCKPARENT */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SLS_CHECK_OFFER_TEMP` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SLS_CHECK_OFFER_TEMP` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SLS_CHECK_OFFER_TEMP`(IN_BOOKING_PK_NO Integer)
    NO SQL
BLOCKPARENT: BEGIN

        DECLARE xF_BOOKING_NO       INT;
        DECLARE xF_BUNDLE_NO        INT DEFAULT 0;
        DECLARE xF_LIST_NO          INT DEFAULT 0;
        DECLARE xF_LIST_CHILD_NO    INT DEFAULT 0;
        DECLARE xIS_A_LIST          INT DEFAULT 0;
        DECLARE xF_PRD_VARIANT_NO   INT;
        DECLARE xREGULAR_PRICE      FLOAT(0);
        DECLARE xINSTALLMENT_PRICE  FLOAT(0);
        DECLARE xF_INV_STOCK_NO     INT;
        DECLARE var_IS_A_LIST       INT(1);
        DECLARE xINT_HAS_IN_LIST_A  INT DEFAULT 0;
        DECLARE xINT_HAS_IN_LIST_B  INT DEFAULT 0;
        DECLARE xLIST_NO            INT DEFAULT NULL;
        DECLARE xLIST_DTL_NO        INT DEFAULT NULL;
        DECLARE xLIST               VARCHAR(40) DEFAULT NULL;

        DECLARE vSLS_CHECK_OFFER_NO INT;
        DECLARE vF_BUNDLE_NO INT;
        DECLARE vF_BOOKING_NO INT;
        DECLARE vF_LIST_NO INT;
        DECLARE vF_LIST_CHILD_NO INT;
        DECLARE vIS_A_LIST INT;
        DECLARE vF_VARIANT_NO INT;
        DECLARE vREGULAR_PRICE FLOAT(0);
        DECLARE vINSTALLMENT_PRICE FLOAT(0);
        DECLARE vF_INV_STOCK_NO INT;
        DECLARE vLIST_TYPE VARCHAR(40) DEFAULT NULL;
        DECLARE vREGULAR_BUNDLE_PRICE FLOAT(0);
        DECLARE vINSTALLMENT_BUNDLE_PRICE FLOAT(0);
        DECLARE vIS_PROCESSED INT;
        DECLARE vSLS_BUNDLE_NO INT;
        DECLARE vCODE VARCHAR(40) DEFAULT NULL;
        DECLARE vCOUPON_CODE VARCHAR(40) DEFAULT NULL;
        DECLARE vBUNDLE_NAME VARCHAR(200) DEFAULT NULL;
        DECLARE vBUNDLE_NAME_PUBLIC VARCHAR(200) DEFAULT NULL;
        DECLARE vVALIDITY_FROM DATE DEFAULT NULL;
        DECLARE vVALIDITY_TO DATE DEFAULT NULL;
        DECLARE vF_A_LIST_NO INT;
        DECLARE vF_B_LIST_NO INT;
        DECLARE vF_BUNDLE_TYPE VARCHAR(40) DEFAULT NULL;
        DECLARE vP_AMOUNT FLOAT(0);
        DECLARE vP2_AMOUNT FLOAT(0);
        DECLARE vX1_QTY INT;
        DECLARE vX2_QTY INT;
        DECLARE vZA1 INT;
        DECLARE vZA2 INT;
        DECLARE vZA3 INT;
        DECLARE vR_AMOUNT FLOAT(0);
        DECLARE vR2_AMOUNT FLOAT(0);
        DECLARE vY1_QTY INT;
        DECLARE vY2_QTY INT;
        DECLARE vZB1 INT;
        DECLARE vZB2 INT;
        DECLARE vZB3 INT;
        DECLARE cvSLS_CHECK_OFFER_NO INT;
        DECLARE cvF_BUNDLE_NO INT;
        DECLARE cvF_BOOKING_NO INT;



        DECLARE int_row_count INT;
        DECLARE int_row_count2 INT;
        DECLARE int_row_count3 INT;
        DECLARE COUNTER1 INT DEFAULT 1;
        DECLARE COUNTER2 INT DEFAULT 1;
        DECLARE COUNTER3 INT DEFAULT 1;

Block1: BEGIN
        DECLARE COUNTER1 INT DEFAULT 1;
        DECLARE INT_HAS_CUR_PROC_SLS_BOOKING INT DEFAULT 1;
        /*Data tranfered to SLS_CHECK_OFFER */

        DECLARE CUR_PROC_SLS_BOOKING
            CURSOR FOR
                SELECT
                    SLS_BOOKING_DETAILS_TEMP.F_BOOKING_NO
                    ,SLS_BOOKING_DETAILS_TEMP.F_INV_STOCK_NO
                    ,SLS_BOOKING_DETAILS_TEMP.CURRENT_REGULAR_PRICE
                    ,SLS_BOOKING_DETAILS_TEMP.CURRENT_INSTALLMENT_PRICE
                    ,INV_STOCK.F_PRD_VARIANT_NO
                    ,SLS_BUNDLE_PRIMARY_SET.PK_NO AS LIST_NO
                    ,SLS_BUNDLE_PRIMARY_SET_DTL.PK_NO AS LIST_DTL_NO
                    ,SLS_BUNDLE.PK_NO AS BUNDLE_PK_NO
                    ,'A' AS LIST

                FROM
                    SLS_BOOKING_DETAILS_TEMP
                    ,INV_STOCK
                    ,SLS_BUNDLE_PRIMARY_SET_DTL
                    ,SLS_BUNDLE_PRIMARY_SET
                    ,SLS_BUNDLE

                WHERE SLS_BOOKING_DETAILS_TEMP.F_BOOKING_NO = IN_BOOKING_PK_NO
                    AND INV_STOCK.PK_NO = SLS_BOOKING_DETAILS_TEMP.F_INV_STOCK_NO
                    AND SLS_BUNDLE_PRIMARY_SET_DTL.F_PRD_VARIANT_NO = INV_STOCK.F_PRD_VARIANT_NO
                    AND SLS_BUNDLE_PRIMARY_SET.PK_NO = SLS_BUNDLE_PRIMARY_SET_DTL.F_SLS_BUNDLE_PRIMARY_SET_NO
                    AND SLS_BUNDLE.F_A_LIST_NO = SLS_BUNDLE_PRIMARY_SET.PK_NO
                    AND CURDATE() BETWEEN SLS_BUNDLE.VALIDITY_FROM AND SLS_BUNDLE.VALIDITY_TO
                    AND SLS_BUNDLE.STATUS = 1
                UNION

                SELECT
                    SLS_BOOKING_DETAILS_TEMP.F_BOOKING_NO
                    ,SLS_BOOKING_DETAILS_TEMP.F_INV_STOCK_NO
                    ,SLS_BOOKING_DETAILS_TEMP.CURRENT_REGULAR_PRICE
                    ,SLS_BOOKING_DETAILS_TEMP.CURRENT_INSTALLMENT_PRICE
                    ,INV_STOCK.F_PRD_VARIANT_NO
                    ,SLS_BUNDLE_SECONDARY_SET.PK_NO AS LIST_NO
                    ,SLS_BUNDLE_SECONDARY_SET_DTL.PK_NO AS LIST_DTL_NO
                    ,SLS_BUNDLE.PK_NO AS BUNDLE_PK_NO
                    ,'B' AS LIST

                FROM
                    SLS_BOOKING_DETAILS_TEMP
                    ,INV_STOCK
                    ,SLS_BUNDLE_SECONDARY_SET_DTL
                    ,SLS_BUNDLE_SECONDARY_SET
                    ,SLS_BUNDLE

                WHERE SLS_BOOKING_DETAILS_TEMP.F_BOOKING_NO = IN_BOOKING_PK_NO
                AND INV_STOCK.PK_NO = SLS_BOOKING_DETAILS_TEMP.F_INV_STOCK_NO
                AND SLS_BUNDLE_SECONDARY_SET_DTL.F_PRD_VARIANT_NO = INV_STOCK.F_PRD_VARIANT_NO
                AND SLS_BUNDLE_SECONDARY_SET.PK_NO = SLS_BUNDLE_SECONDARY_SET_DTL.F_SLS_BUNDLE_SECONDARY_SET_NO
                AND SLS_BUNDLE.F_B_LIST_NO = SLS_BUNDLE_SECONDARY_SET.PK_NO
                AND CURDATE() BETWEEN SLS_BUNDLE.VALIDITY_FROM AND SLS_BUNDLE.VALIDITY_TO
                AND SLS_BUNDLE.STATUS = 1
                ;


        DECLARE CONTINUE HANDLER

            FOR NOT FOUND SET INT_HAS_CUR_PROC_SLS_BOOKING = 0;
DELETE FROM SLS_CHECK_OFFER WHERE F_BOOKING_NO = IN_BOOKING_PK_NO;

-- INSERT INTO S VALUES('Line 26');

            OPEN CUR_PROC_SLS_BOOKING;
                SELECT FOUND_ROWS() INTO int_row_count ;

-- INSERT INTO S values ('Line 32');
-- INSERT INTO S values (concat('Found row ', int_row_count));

                IF int_row_count > 0 THEN

                    GET_PROC_SLS_BOOKING:LOOP
                        FETCH NEXT
                        FROM  CUR_PROC_SLS_BOOKING
                            INTO
                            xF_BOOKING_NO
                            ,xF_INV_STOCK_NO
                            ,xREGULAR_PRICE
                            ,xINSTALLMENT_PRICE
                            ,xF_PRD_VARIANT_NO
                            ,xLIST_NO
                            ,xLIST_DTL_NO
                            ,xF_BUNDLE_NO
                            ,xLIST
                            ;

                            IF INT_HAS_CUR_PROC_SLS_BOOKING = 0 THEN
                            LEAVE GET_PROC_SLS_BOOKING;
                            END IF;

-- INSERT INTO S VALUES('line 48');


                            INSERT INTO SLS_CHECK_OFFER(
                            F_BOOKING_NO
                            ,F_BUNDLE_NO
                            ,F_LIST_NO
                            ,F_LIST_CHILD_NO
                            ,LIST_TYPE
                            ,F_VARIANT_NO
                            ,REGULAR_PRICE
                            ,INSTALLMENT_PRICE
                            ,F_INV_STOCK_NO 
                            ,IS_TEMP
                            )
                            VALUES (
                            xF_BOOKING_NO
                            ,xF_BUNDLE_NO
                            ,xLIST_NO
                            ,xLIST_DTL_NO
                            ,xLIST
                            ,xF_PRD_VARIANT_NO
                            ,xREGULAR_PRICE
                            ,xINSTALLMENT_PRICE
                            ,xF_INV_STOCK_NO 
                            ,1
                            );



                    END LOOP GET_PROC_SLS_BOOKING;

                END IF;

            CLOSE CUR_PROC_SLS_BOOKING;

END Block1;

Block2: BEGIN
            DECLARE COUNTER2 INT DEFAULT 1;
            DECLARE INT_HAS_CUR_SLS_CHECK_OFFER_RESULT INT DEFAULT 1;

            /* OFFER RESULT  */
            DECLARE CUR_SLS_CHECK_OFFER_RESULT
                CURSOR FOR
                SELECT
                    SLS_CHECK_OFFER.PK_NO AS SLS_CHECK_OFFER_NO
                    ,SLS_CHECK_OFFER.F_BUNDLE_NO
                    ,SLS_CHECK_OFFER.F_BOOKING_NO
                    ,SLS_CHECK_OFFER.F_LIST_NO
                    ,SLS_CHECK_OFFER.F_LIST_CHILD_NO
                    ,SLS_CHECK_OFFER.IS_A_LIST
                    ,SLS_CHECK_OFFER.F_VARIANT_NO
                    ,SLS_CHECK_OFFER.REGULAR_PRICE
                    ,SLS_CHECK_OFFER.INSTALLMENT_PRICE
                    ,SLS_CHECK_OFFER.F_INV_STOCK_NO
                    ,SLS_CHECK_OFFER.LIST_TYPE
                    ,SLS_CHECK_OFFER.REGULAR_BUNDLE_PRICE
                    ,SLS_CHECK_OFFER.INSTALLMENT_BUNDLE_PRICE
                    ,SLS_CHECK_OFFER.IS_PROCESSED
                    ,SLS_BUNDLE.CODE
                    ,SLS_BUNDLE.COUPON_CODE
                    ,SLS_BUNDLE.BUNDLE_NAME
                    ,SLS_BUNDLE.BUNDLE_NAME_PUBLIC
                    ,SLS_BUNDLE.VALIDITY_FROM
                    ,SLS_BUNDLE.VALIDITY_TO
                    ,SLS_BUNDLE.F_A_LIST_NO
                    ,SLS_BUNDLE.F_B_LIST_NO
                    ,SLS_BUNDLE.F_BUNDLE_TYPE
                    ,SLS_BUNDLE.P_AMOUNT
                    ,SLS_BUNDLE.P2_AMOUNT
                    ,SLS_BUNDLE.X1_QTY
                    ,SLS_BUNDLE.X2_QTY
                    ,SLS_BUNDLE.ZA1
                    ,SLS_BUNDLE.ZA2
                    ,SLS_BUNDLE.ZA3
                    ,SLS_BUNDLE.R_AMOUNT
                    ,SLS_BUNDLE.R2_AMOUNT
                    ,SLS_BUNDLE.Y1_QTY
                    ,SLS_BUNDLE.Y2_QTY
                    ,SLS_BUNDLE.ZB1
                    ,SLS_BUNDLE.ZB2
                    ,SLS_BUNDLE.ZB3
                FROM SLS_CHECK_OFFER
                    ,SLS_BUNDLE
                WHERE SLS_CHECK_OFFER.F_BOOKING_NO = IN_BOOKING_PK_NO
                    AND SLS_CHECK_OFFER.F_BUNDLE_NO = SLS_BUNDLE.PK_NO
                GROUP BY SLS_CHECK_OFFER.F_BUNDLE_NO
                 ;


                DECLARE CONTINUE HANDLER

                FOR NOT FOUND SET INT_HAS_CUR_SLS_CHECK_OFFER_RESULT = 0;

DELETE FROM S;
-- INSERT INTO S VALUES('Line 125');

                OPEN CUR_SLS_CHECK_OFFER_RESULT;
                    SELECT FOUND_ROWS() INTO int_row_count2 ;

-- INSERT INTO S values ('Line 130');
-- INSERT INTO S values (concat('Found row parent ', int_row_count2));

                    IF int_row_count2 > 0 THEN

                        GET_CUR_SLS_CHECK_OFFER_RESULT:LOOP
                            FETCH NEXT
                                FROM  CUR_SLS_CHECK_OFFER_RESULT
                                    INTO
                                vSLS_CHECK_OFFER_NO
                                ,vF_BUNDLE_NO
                                ,vF_BOOKING_NO
                                ,vF_LIST_NO
                                ,vF_LIST_CHILD_NO
                                ,vIS_A_LIST
                                ,vF_VARIANT_NO
                                ,vREGULAR_PRICE
                                ,vINSTALLMENT_PRICE
                                ,vF_INV_STOCK_NO
                                ,vLIST_TYPE
                                ,vREGULAR_BUNDLE_PRICE
                                ,vINSTALLMENT_BUNDLE_PRICE
                                ,vIS_PROCESSED
                                ,vCODE
                                ,vCOUPON_CODE
                                ,vBUNDLE_NAME
                                ,vBUNDLE_NAME_PUBLIC
                                ,vVALIDITY_FROM
                                ,vVALIDITY_TO
                                ,vF_A_LIST_NO
                                ,vF_B_LIST_NO
                                ,vF_BUNDLE_TYPE
                                ,vP_AMOUNT
                                ,vP2_AMOUNT
                                ,vX1_QTY
                                ,vX2_QTY
                                ,vZA1
                                ,vZA2
                                ,vZA3
                                ,vR_AMOUNT
                                ,vR2_AMOUNT
                                ,vY1_QTY
                                ,vY2_QTY
                                ,vZB1
                                ,vZB2
                                ,vZB3
                                ;

                                IF INT_HAS_CUR_SLS_CHECK_OFFER_RESULT = 0 THEN
                                    LEAVE GET_CUR_SLS_CHECK_OFFER_RESULT;
                                END IF;

        Block3: BEGIN
            DECLARE COUNTER3 INT DEFAULT 1;
            DECLARE COUNTER9 INT DEFAULT 1;
            DECLARE COUNTER10 INT DEFAULT 1;
            DECLARE INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW INT DEFAULT 1;

            DECLARE CUR_SLS_CHECK_OFFER_RESULT_ROW
            CURSOR FOR
                SELECT
                SLS_CHECK_OFFER.PK_NO AS SLS_CHECK_OFFER_NO
                ,SLS_CHECK_OFFER.F_BUNDLE_NO
                ,SLS_CHECK_OFFER.F_BOOKING_NO
                --  ,SLS_CHECK_OFFER.F_LIST_NO
                --  ,SLS_CHECK_OFFER.F_LIST_CHILD_NO
                --  ,SLS_CHECK_OFFER.IS_A_LIST
                --  ,SLS_CHECK_OFFER.F_VARIANT_NO
                --  ,SLS_CHECK_OFFER.REGULAR_PRICE
                --  ,SLS_CHECK_OFFER.INSTALLMENT_PRICE
                --  ,SLS_CHECK_OFFER.F_INV_STOCK_NO
                --  ,SLS_CHECK_OFFER.LIST_TYPE
                --  ,SLS_CHECK_OFFER.REGULAR_BUNDLE_PRICE
                --  ,SLS_CHECK_OFFER.INSTALLMENT_BUNDLE_PRICE
                --  ,SLS_CHECK_OFFER.IS_PROCESSED

                FROM SLS_CHECK_OFFER
                WHERE SLS_CHECK_OFFER.F_BUNDLE_NO = vF_BUNDLE_NO
                AND SLS_CHECK_OFFER.F_BOOKING_NO = vF_BOOKING_NO;


                DECLARE CONTINUE HANDLER
                FOR NOT FOUND SET INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW = 0;


-- INSERT INTO S VALUES('Line 224');

                OPEN CUR_SLS_CHECK_OFFER_RESULT_ROW;

                    SELECT FOUND_ROWS() INTO int_row_count3 ;

-- INSERT INTO S values ('Line 229');
-- INSERT INTO S values (concat('Found row ', int_row_count3));

                    IF int_row_count3 > 0 THEN

-- INSERT INTO S values ('Line 2331');
-- INSERT INTO S values (INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW);

                        GET_CUR_SLS_CHECK_OFFER_RESULT_ROW:LOOP
                            FETCH NEXT
                                FROM  CUR_SLS_CHECK_OFFER_RESULT_ROW
                                    INTO
                                    cvSLS_CHECK_OFFER_NO
                                    ,cvF_BUNDLE_NO
                                    ,cvF_BOOKING_NO

                                ;
-- INSERT INTO S values ('Line 251');
                                IF INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW = 0 THEN
                                    LEAVE GET_CUR_SLS_CHECK_OFFER_RESULT_ROW;
                                END IF;


-- INSERT INTO S values (concat('when_', vP_AMOUNT));
-- INSERT INTO S values (concat('when1_', vX1_QTY));
-- INSERT INTO S values (concat('when2_', vZA1));

-- con1
                            IF vP_AMOUNT = 0 AND vX1_QTY = 0  AND vZA1 = 0 THEN
                            -- universal false
                                UPDATE SLS_CHECK_OFFER
                                    SET
                                    REGULAR_BUNDLE_PRICE = vREGULAR_BUNDLE_PRICE
                                    ,INSTALLMENT_BUNDLE_PRICE = vINSTALLMENT_BUNDLE_PRICE
                                    ,IS_PROCESSED = 1
                                    ,CON = 1
                                WHERE PK_NO = cvSLS_CHECK_OFFER_NO AND IS_PROCESSED = 0 AND F_BOOKING_NO = IN_BOOKING_PK_NO ;
INSERT INTO S VALUES (CONCAT('con 1_',cvSLS_CHECK_OFFER_NO));

-- con2
                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY = 0 AND vZA1 > 0 THEN
                             -- Buy any item at 20%;
INSERT INTO S VALUES (CONCAT('con 2_',cvSLS_CHECK_OFFER_NO));
-- INSERT INTO S values (CONCAT('con IP',xREGULAR_PRICE));
-- INSERT INTO S values (CONCAT('con RP',xINSTALLMENT_PRICE));

                                UPDATE SLS_CHECK_OFFER
                                    SET
                                    REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZA1
                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZA1
                                    ,IS_PROCESSED = 1
                                    ,SEQUENC = COUNTER2
                                    ,CON = 2
                                WHERE SLS_CHECK_OFFER.PK_NO = cvSLS_CHECK_OFFER_NO
                                AND IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ;

                                SET COUNTER2 = COUNTER2+1;
-- con3
                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 = 0 THEN
                            -- buy 1 get 1, buy 2 get 1, buy 1 get 2, buy 1 get 1 half price from A list (get from B list)
INSERT INTO S VALUES (CONCAT('con 3_',cvSLS_CHECK_OFFER_NO));
                                SELECT COUNT(*) INTO @ALIST FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ;

                                    IF @ALIST >= vX1_QTY THEN
        --  INSERT INTO S values (CONCAT('LINE_',422));
        --  INSERT INTO S values (CONCAT('RR',@ALIST));
        --  INSERT INTO S values (CONCAT('SS',vX1_QTY));
                                        SELECT COUNT(*) INTO @BLIST FROM SLS_CHECK_OFFER
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'B'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ;

                                            IF @BLIST >= vY1_QTY AND vR_AMOUNT = 0 THEN

                                                UPDATE SLS_CHECK_OFFER
                                                    SET
                                                    REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE
                                                    ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 31
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'A'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vX1_QTY
                                                    ;

                                                UPDATE SLS_CHECK_OFFER
                                                    SET REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZB1
                                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZB1
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 32
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'B'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vY1_QTY ;



                                                 SET COUNTER1 = COUNTER1+1;

                                            END IF;

                                            IF @BLIST >= vY1_QTY AND vR_AMOUNT > 0 THEN

                                                UPDATE SLS_CHECK_OFFER
                                                    SET
                                                    REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE
                                                    ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 31
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'A'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vX1_QTY
                                                    ;

                                                UPDATE SLS_CHECK_OFFER
                                                    SET REGULAR_BUNDLE_PRICE = vR_AMOUNT
                                                    ,INSTALLMENT_BUNDLE_PRICE = vR2_AMOUNT
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 32
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'B'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vY1_QTY ;



                                                 SET COUNTER1 = COUNTER1+1;

                                            END IF;


                                    END IF;

-- con4
                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY = 0 AND vZA1 = 0 THEN
                            -- Buy min 500 amt from A list get 2 free from B list, buy min 500 amt get 1 half price;

INSERT INTO S VALUES (CONCAT('con 4_',COUNTER1));

                                SELECT SUM(REGULAR_PRICE), SUM(INSTALLMENT_PRICE)
                                    INTO @TOTAL_P_AMOUNT, @TOTAL_P2_AMOUNT
                                    FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ;

                                IF @TOTAL_P_AMOUNT >= vP_AMOUNT THEN

                                    SELECT COUNT(*) INTO @TOTAL_FREE_QTY_FOR_vP_AMOUNT FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ;

                                    IF @TOTAL_FREE_QTY_FOR_vP_AMOUNT > 0  THEN
                                            UPDATE SLS_CHECK_OFFER
                                                SET
                                                REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 41
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ;

                                            UPDATE SLS_CHECK_OFFER
                                                SET REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZB1
                                                ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZB1
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 42
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'B'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            LIMIT vY1_QTY ;

                                    END IF;

                                    IF vZA1 > 0 THEN
                                        -- buy 500amt or above from A list and get 20% discount
                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA1
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA1
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 43
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ;

                                    END IF;


                                END IF;


-- con5
                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 > 0 THEN

                            -- not possible
INSERT INTO S VALUES (CONCAT('con 5_',cvSLS_CHECK_OFFER_NO));

-- con6
                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT = 0 AND vY1_QTY = 0 THEN
                            -- buy any lowest priced 6 item from A list at 800 amt;
                            -- buy any lowest priced 6 item A list at 800 amt more item at 50% discount;

                                IF vZA2 > 0 THEN
                            -- buy any lowest priced 6 item A list at 800 amt more item at 50% discount;
INSERT INTO S VALUES (CONCAT('con 6_A',cvSLS_CHECK_OFFER_NO));
                                    SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY
                                        INTO @TOTAL_P_AMOUNT_CON6, @TOTAL_X1_QTY_CON6
                                        FROM SLS_CHECK_OFFER
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT vX1_QTY ;

                                    IF @TOTAL_P_AMOUNT_CON6 >= vP_AMOUNT AND @TOTAL_X1_QTY_CON6 >= vX1_QTY THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 61
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT  vX1_QTY;

                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 62
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ;




                                    END IF;

                                ELSE
                                -- buy any lowest priced 6 from A list item at 800 amt;

INSERT INTO S VALUES (CONCAT('con 6_B',cvSLS_CHECK_OFFER_NO));
                                    SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY
                                        INTO @TOTAL_P_AMOUNT_CON6, @TOTAL_X1_QTY_CON6
                                        FROM SLS_CHECK_OFFER
                                        WHERE
                                        IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT vX1_QTY ;

                                    IF @TOTAL_P_AMOUNT_CON6 >= vP_AMOUNT AND @TOTAL_X1_QTY_CON6 >= vX1_QTY THEN
INSERT INTO S VALUES (CONCAT('con 6_B',612));
                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                                ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = COUNTER3
                                                ,CON = 63
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT  vX1_QTY;



                                        SET COUNTER3 = COUNTER3+1;
                                    END IF;

                                END IF;





-- con7
                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY > 0 AND vY1_QTY = 0 THEN
                            -- buy any lowest priced 6item at 800amt and more item at 50% discount ;
                            -- buy any lowest priced 6item at 800amt and more item at 50% discount and more item at 20% discount;

INSERT INTO S VALUES (CONCAT('con 7_',vX1_QTY));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON7, @TOTAL_X1_QTY_CON7 FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ORDER BY REGULAR_PRICE ASC
                                ;

                                IF @TOTAL_X1_QTY_CON7 >= vX1_QTY THEN

                                    UPDATE SLS_CHECK_OFFER
                                        SET
                                        REGULAR_BUNDLE_PRICE = REGULAR_PRICE
                                        ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE
                                        ,IS_PROCESSED = 1
                                        ,SEQUENC = 1
                                        ,CON = 71
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC LIMIT vX1_QTY;


                                    IF @TOTAL_X1_QTY_CON7 > vX1_QTY THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 72
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC LIMIT vX2_QTY;

                                    END IF;

                                    SELECT  COUNT(*) AS TOTAL_QTY  INTO @TOTAL_X1_QTY_CON7C FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC ;

                                    IF @TOTAL_X1_QTY_CON7C > 0 AND vZA3 > 0 THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA3
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA3
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 73
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ORDER BY REGULAR_PRICE ASC ;

                                    END IF;



                                END IF;
-- con8

                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vY1_QTY = 0 THEN
                                -- Buy lowest 6 item at 50% discount, next 2 at 30% (and remaining at 10 discount) if remaining qty and more item at 20% discount jodi thake;
    INSERT INTO S VALUES (CONCAT('con 8_',vX1_QTY));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8, @TOTAL_X1_QTY_CON8 FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ORDER BY REGULAR_PRICE ASC
                                ;
                                IF @TOTAL_X1_QTY_CON8 >= vX1_QTY THEN
                                    UPDATE SLS_CHECK_OFFER
                                        SET
                                        REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA1
                                        ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA1
                                        ,IS_PROCESSED = 1
                                        ,SEQUENC = 1
                                        ,CON = 81
                                    WHERE IS_PROCESSED = 0 AND
                                    LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC LIMIT vX1_QTY;

                                    IF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vX2_QTY > 0 AND vZA2  THEN
                                        -- next 2 qty 30% discount

                                        SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8A, @TOTAL_X1_QTY_CON8A FROM SLS_CHECK_OFFER
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        ;

                                        IF @TOTAL_X1_QTY_CON8A > 0 THEN

                                            UPDATE SLS_CHECK_OFFER
                                                SET
                                                REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 82
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ORDER BY REGULAR_PRICE ASC LIMIT vX2_QTY;

                                            IF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vX2_QTY > 0 AND vZA2 AND vZA3 > 0 THEN
                                                -- next remaining qty qty 20% discount
                                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8B, @TOTAL_X1_QTY_CON8B FROM SLS_CHECK_OFFER
                                                WHERE IS_PROCESSED = 0
                                                AND LIST_TYPE = 'A'
                                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                ORDER BY REGULAR_PRICE ASC
                                                ;

                                                    IF @TOTAL_X1_QTY_CON8B > 0 THEN

                                                        UPDATE SLS_CHECK_OFFER
                                                            SET
                                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA3
                                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA3
                                                            ,IS_PROCESSED = 1
                                                            ,SEQUENC = 1
                                                            ,CON = 83
                                                        WHERE IS_PROCESSED = 0
                                                        AND LIST_TYPE = 'A'
                                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                        ORDER BY REGULAR_PRICE ASC ;

                                                    END IF;
                                                    -- end next remaining qty qty 20% discount
                                            END IF;


                                        END IF;

                                    END IF;
                                END IF;
-- con9
                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT > 0 AND vY1_QTY > 0 THEN
                            -- buy 1 qty from A list at 100 taka get 1 qty from B list at 20 taka
INSERT INTO S VALUES (CONCAT('con 9_', cvSLS_CHECK_OFFER_NO));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON9, @TOTAL_X1_QTY_CON9 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_R_AMOUNT_CON9, @TOTAL_Y1_QTY_CON9 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                            IF @TOTAL_X1_QTY_CON9 >= vX1_QTY AND @TOTAL_Y1_QTY_CON9 >= vY1_QTY THEN
INSERT INTO S VALUES (CONCAT('con 9_','YES'));

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER9
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vX1_QTY;

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vR_AMOUNT/vY1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vR2_AMOUNT/vY1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER9
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'B'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vY1_QTY;
                                SET COUNTER9 = COUNTER9+1;

                                END IF;

-- con10
                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT = 0 AND vY1_QTY > 0 AND vZB1 > 0 THEN
                            -- get 1 qty from A list by 100 taka discount from B list
INSERT INTO S VALUES (CONCAT('con 10_',cvSLS_CHECK_OFFER_NO));

                            SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON10, @TOTAL_X1_QTY_CON10 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_R_AMOUNT_CON10, @TOTAL_Y1_QTY_CON10 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                            IF @TOTAL_X1_QTY_CON10 >= vX1_QTY AND @TOTAL_Y1_QTY_CON10 >= vY1_QTY THEN
INSERT INTO S VALUES (CONCAT('con 10_','YES'));

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER10
                                            ,CON = 101
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vX1_QTY;

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE - (REGULAR_BUNDLE_PRICE/100)*vZB1
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE - (INSTALLMENT_BUNDLE_PRICE/100)*vZB1
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER10
                                            ,CON = 102
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'B'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vY1_QTY;

                                SET COUNTER10 = COUNTER10+1;

                                END IF;




                            END IF; -- last if
                        END LOOP GET_CUR_SLS_CHECK_OFFER_RESULT_ROW;
                    END IF;



        CLOSE CUR_SLS_CHECK_OFFER_RESULT_ROW;

        END Block3;






                        END LOOP GET_CUR_SLS_CHECK_OFFER_RESULT;

                    END IF;

                CLOSE CUR_SLS_CHECK_OFFER_RESULT;






END Block2;

END BLOCKPARENT */$$
DELIMITER ;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
